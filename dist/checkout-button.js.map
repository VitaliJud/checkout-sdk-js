{"version":3,"file":"checkout-button.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,2JCL9D,MAAM,EAA+BC,QAAQ,+BCAvC,EAA+BA,QAAQ,4BCAvC,EAA+BA,QAAQ,SCAvC,EAA+BA,QAAQ,2B,ECQ7C,YAII,WAAYC,G,ICZuBC,EAAaR,E,mBDYhD,EACI,YAAMO,GAAW,sCAAoC,K,OAJzD,EAAAE,KAAO,gBACP,EAAAC,KAAO,WCV4BF,EDehB,ECf6BR,EDevB,EAAWA,UCdhCN,OAAOiB,eACPjB,OAAOiB,eAAeH,EAAQR,GAE9BQ,EAAOI,UAAYZ,EDaoB,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAKF,MAAM,EAAKN,SAAUQ,M,CAE/C,CACJ,OAfoD,oBAepD,EAfA,CAAoDF,OEJpD,IAAMG,EAAmB,CACrBC,KAAM,CAAC,EACPC,QAAS,CAAC,EACVC,OAAQ,G,QAOZ,YAMI,WACIC,EACA,G,IAAA,aAGI,CAAC,EAAC,EAHJb,EAAO,UAAEc,EAAM,SAFrB,OAOU,EAA4BD,GAAYJ,EAAtCC,EAAI,OAAEC,EAAO,UAAEC,EAAM,S,OAE7B,cAAMZ,GAAW,sCAAoC,MAEhDE,KAAO,eACZ,EAAKC,KAAO,UACZ,EAAKO,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,OAASA,EACd,EAAKE,OAASA,GAAU,G,CAC5B,CACJ,OAxBuD,oBAwBvD,EAxBA,CAAuD,G,ECLvD,YACI,WAAYD,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAAS,yEAAwE,K,OAEnG,EAAKE,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPgE,oBAOhE,EAPA,CAAgE,G,ECDhE,YACI,WAAYU,EAAuBb,GAAnC,MACI,YAAMa,EAAU,CACZb,QAASA,GAAW,yFACtB,K,OAEF,EAAKE,KAAO,qBACZ,EAAKC,KAAO,gB,CAChB,CACJ,OATyD,oBASzD,EATA,CAAyD,GCRnD,EAA+BJ,QAAQ,UCqB7C,SAASgB,EAAWD,GAChB,OAAOA,EAAOE,QAAO,SAACC,EAAkBC,GACpC,OAAIA,GACO,oBAAID,EAAQ,CAAAC,IAGhBD,CACX,GAAG,IAAIE,KAAK,IAChB,CCVA,SAAS,EAAWL,GAChB,GAAKM,MAAMC,QAAQP,GAInB,OAAOA,EAAOE,QAAO,SAACC,EAAkBC,GACpC,OAAIA,GAASA,EAAMlB,SACR,oBAAIiB,EAAQ,CAAAC,EAAMlB,UAGtBiB,CACX,GAAG,IAAIE,KAAK,IAChB,C,QCvBA,YACI,WAAYN,GAAZ,MACI,YAAMA,EAAU,CACZb,QAAS,2CACX,K,OAEF,EAAKE,KAAO,eACZ,EAAKC,KAAO,U,CAChB,CACJ,OATmD,oBASnD,EATA,CAAmD,G,ECFnD,WAGI,aAFQ,KAAAmB,gBAAyD,CAAC,EAG9DC,KAAKC,SAAS,WAAW,SAACX,EAAUb,GAAY,WAAI,EAAaa,EAAU,CAAEb,QAAO,GAApC,IAChDuB,KAAKC,SAAS,YAAY,SAACX,EAAUb,GAAY,OHL1C,SACXa,EACAb,GAEQ,IAAAU,EAASG,EAAQ,KACjB,EAAgBH,EAAI,OAApBI,OAAM,IAAG,KAAE,EAEnB,OAAO,IAAI,EAAaD,EAAU,CAC9Bb,QAASe,EAAWD,IAAWJ,EAAKe,QAAUf,EAAKgB,OAAS1B,EAC5Dc,OAAQA,EAAOa,OACXb,EAAOc,KAAI,SAAA5B,GAAW,OAAG6B,KAAMnB,EAAKP,KAAMH,QAAO,EAA3B,IACtB,CAAC,CAAE6B,KAAMnB,EAAKP,KAAMH,QAASU,EAAKe,QAAUf,EAAKgB,SAE7D,CGRyDI,CAA6BjB,EAAUb,EAAvC,IACjDuB,KAAKC,SAAS,cAAc,SAACX,EAAUb,GAAY,OCN5C,SACXa,EACAb,GAEQ,IAAAU,EAASG,EAAQ,KAEzB,OAAO,IAAI,EAAaA,EAAU,CAC9Bb,QAASA,GAAWU,EAAKe,QAAUf,EAAKgB,MACxCZ,OAAQ,CAAC,CACLe,KAAMnB,EAAKmB,MAAQnB,EAAKP,KACxBH,QAASU,EAAKe,QAAUf,EAAKgB,SAGzC,CDP2DK,CAA+BlB,EAAUb,EAAzC,IACnDuB,KAAKC,SAAS,WAAW,SAACX,EAAUb,GAAY,OFPzC,SACXa,EACAb,GAEQ,IACA,EADSa,EAAQ,KACG,OAApBC,OAAM,IAAG,KAAE,EAEnB,OAAO,IAAI,EAAaD,EAAU,CAC9Bb,QAAS,EAAWc,IAAWd,EAC/Bc,OAAM,GAEd,CEJwDkB,CAA4BnB,EAAUb,EAAtC,IAChDuB,KAAKC,SAAS,WAAW,SAAAX,GAAY,WAAI,EAAaA,EAAjB,GACzC,CA4DJ,OA1DI,YAAAW,SAAA,SAASrB,EAAc8B,GACnBV,KAAKD,gBAAgBnB,GAAQ8B,CACjC,EAEA,YAAAC,YAAA,SAAYrB,EAAyBb,GAGjC,OAFsBuB,KAAKD,gBAAgBC,KAAKY,SAAStB,KAAcU,KAAKD,gBAAgBc,SAEvEvB,EAAUb,EACnC,EAEQ,YAAAmC,SAAR,SAAiBtB,GACb,GAAwB,IAApBA,EAASD,OACT,MAAO,UAGX,GAAIW,KAAKc,+BAA+BxB,EAASH,MAC7C,MAAO,aAGX,GAAIa,KAAKe,6BAA6BzB,EAASH,MAAO,CAClD,IAAM6B,GAAe,IAAAC,MAAK3B,EAASH,KAAKP,KAAKsC,MAAM,MAEnD,OAAOF,GAAgBhB,KAAKD,gBAAgBiB,GACxCA,EACA,U,CAGR,IAAMrB,GAAQ,IAAAsB,MAAK3B,EAASH,MAAQG,EAASH,KAAKI,QAElD,OAAII,GAASA,EAAMW,MAAQN,KAAKD,gBAAgBJ,EAAMW,MAC3CX,EAAMW,KAGV,SACX,EAEQ,YAAAQ,+BAAR,SACIK,GAEA,IAAMC,EAA0BD,EAEhC,OAAQnB,KAAKe,6BAA6BI,IACG,iBAAlCC,EAAwBjB,OACS,iBAAjCiB,EAAwBxC,MACW,iBAAnCwC,EAAwB/B,QACW,iBAAnC+B,EAAwBlB,MACvC,EAEQ,YAAAa,6BAAR,SACII,GAEA,IAAME,EAAwBF,EAE9B,MAA+C,iBAAjCE,EAAsB9B,QACO,iBAAhC8B,EAAsBlB,OACS,iBAA/BkB,EAAsBzC,MACW,iBAAjCyC,EAAsBhC,MACrC,EACJ,EArEA,GENM,EAA+Bb,QAAQ,QCAvC,EAA+BA,QAAQ,kBCO7C,IAAY8C,ECLAC,ECGAC,ECDAC,ECAAC,ECFG,SAASC,EAASjD,EAAakD,GAC1C,OAAI/B,MAAMC,QAAQpB,GACPA,EAAO2B,KAAI,SAAA9B,GAAS,OAAAoD,EAASpD,EAAOqD,EAAhB,KAG3B,IAAAC,eAAcnD,IACP,IAAAoD,YAAU,IAAAC,QAAOrD,EAAQkD,IAAY,SAAClC,EAAQnB,EAAOb,GACxDgC,EAAOhC,GAAOiE,EAASpD,EAAOqD,EAClC,GAAG,CAAC,GAGDlD,CACX,CCRe,SAASsD,EACpBC,EACAC,GAEA,OAOJ,SAA4BA,GACxB,OAAOA,EAAOtD,OAAS2C,EAAgBY,UAC3C,CATQC,CAAmBF,GACZP,EAASM,GAAO,SAAA1D,GAAS,OAAAA,IAAU2D,EAAOG,OAAjB,IAG7BJ,CACX,CCXe,SAASK,EAAQC,EAAcC,EAAcC,GACxD,OAAIF,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxD3C,MAAMC,QAAQyC,IAAY1C,MAAMC,QAAQ0C,GAsCpD,SAAsBD,EAAgBC,EAAgBC,GAClD,GAAIF,EAAQnC,SAAWoC,EAAQpC,OAC3B,OAAO,EAGX,IAAK,IAAIsC,EAAQ,EAAG,EAASH,EAAQnC,OAAQsC,EAAQ,EAAQA,IACzD,IAAKJ,EAAQC,EAAQG,GAAQF,EAAQE,GAAQD,GACzC,OAAO,EAIf,OAAO,CACX,CAjDmBE,CAAaJ,EAASC,EAASC,IAGtC5C,MAAMC,QAAQyC,KAAY1C,MAAMC,QAAQ0C,KAIvCD,aAAmBK,MAAUJ,aAAmBI,KA0B7D,SAAqBL,EAAeC,GAChC,OAAOD,EAAQM,YAAcL,EAAQK,SACzC,CA3BmBC,CAAYP,EAASC,KAG3BD,aAAmBK,MAAUJ,aAAmBI,QAIhDL,aAAmBQ,QAAYP,aAAmBO,OAc/D,SAAuBR,EAAiBC,GACpC,OAAOD,EAAQS,aAAeR,EAAQQ,UAC1C,CAfmBC,CAAcV,EAASC,KAG7BD,aAAmBQ,QAAYP,aAAmBO,SAgC/D,SACIR,EACAC,EACAC,GAEA,IAAMS,EAAST,GAAWA,EAAQU,UAC5BC,EAAQF,EAAStF,OAAOyF,KAAKd,GAASW,OAAOA,GAAUtF,OAAOyF,KAAKd,GACnEe,EAAQJ,EAAStF,OAAOyF,KAAKb,GAASU,OAAOA,GAAUtF,OAAOyF,KAAKb,GAEzE,GAAIY,EAAMhD,SAAWkD,EAAMlD,OACvB,OAAO,EAGX,IAAK,IAAIsC,EAAQ,EAAG,EAASU,EAAMhD,OAAQsC,EAAQ,EAAQA,IAAS,CAChE,IAAMhF,EAAM0F,EAAMV,GAElB,IAAK9E,OAAOM,UAAUC,eAAeC,KAAKoE,EAAS9E,GAC/C,OAAO,EAGX,IAAK4E,EAAQC,EAAQ7E,GAAM8E,EAAQ9E,GAAM+E,GACrC,OAAO,C,CAIf,OAAO,CACX,CAtDec,CAAchB,EAASC,EAASC,KAGpCF,IAAYC,EACvB,CChCe,SAASgB,EAAWC,EAAiBC,GAChD,YAAiBC,IAAbD,GAA0BpB,EAAQmB,EAAcC,GACzCD,EAGJC,CACX,CCNe,SAASE,EACpBlF,EACAhB,EACAa,G,MAEA,OAAIG,GAAUd,OAAOM,UAAUC,eAAeC,KAAKM,EAAQhB,IAAQ4E,EAAQ5D,EAAOhB,GAAMa,GAC7EG,GAGJ,gCACAA,KAAa,MACfhB,GAAMa,EAAK,GAEpB,ETZA,SAAY+C,GACR,kDACA,kDACA,4CAEA,sDACA,sDACA,+CACH,CARD,CAAYA,IAAAA,EAAkB,KCL9B,SAAYC,GACR,0BACH,CAFD,CAAYA,IAAAA,EAAe,KCG3B,SAAYC,GACR,4CACA,4CACA,sCAEA,6DACA,6DACA,uDAEA,gDACA,gDACA,0CAEA,oDACA,oDACA,6CACH,CAhBD,CAAYA,IAAAA,EAAe,KCD3B,SAAYC,GACR,gEACA,gEACA,yDACH,CAJD,CAAYA,IAAAA,EAAuB,KCAnC,SAAYC,GACR,mEACA,mEACA,6DAEA,yDACA,yDACA,kDACH,CARD,CAAYA,IAAAA,EAAwB,KMgB7B,IAAMmC,EAAqC,CAC9CtE,OAAQ,CAAC,EACTuE,SAAU,CAAC,GCVA,SAASC,EACpB9B,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,IAGgB,IAAA+B,iBAAqC,CACjDC,KAAMC,EACN3E,QAAQ,IAAA4E,iBAAgBC,EAAepC,GACvC8B,SAAUO,GAGPC,CAAQrC,EAAOC,EAC1B,CAEA,SAASgC,EACLD,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK8C,EAAyB6C,8BAC9B,KAAK7C,EAAyB8C,yBAC9B,KAAKlD,EAAmBmD,sBACxB,KAAKjD,EAAgBkD,mBACjB,OAAOlB,EAAQS,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQsC,gBAE1D,QACI,OAAOV,EAEf,CAEA,SAASG,EACL7E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAoCsE,EAActE,QAG1C2C,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACxB,KAAKtD,EAAmBmD,sBACpB,OAAOb,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKrC,EAAmBuD,mBACpB,OAAOjB,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,KAAKX,EAAyBoD,8BAC9B,KAAKpD,EAAyB6C,8BAC1B,OAAOX,EAAUrE,EAAQ,mBAAeoE,GAE5C,KAAKjC,EAAyBqD,2BAC1B,OAAOnB,EAAUrE,EAAQ,cAAe2C,EAAOG,SAEnD,KAAKZ,EAAwBuD,6BAC7B,KAAKvD,EAAwBwD,6BAC7B,KAAKvD,EAAyBwD,yBAC9B,KAAKxD,EAAyB8C,yBAC1B,OAAOZ,EAAUrE,EAAQ,4BAAwBoE,GAErD,KAAKlC,EAAwB0D,0BAC7B,KAAKzD,EAAyB0D,sBAC1B,OAAOxB,EAAUrE,EAAQ,uBAAwB2C,EAAOG,SAE5D,QACI,OAAO9C,EAEf,CAEA,SAAS8E,EACLP,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAwCD,EAAcC,UAG9C5B,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKxC,EAAmBmD,sBACxB,KAAKnD,EAAmBuD,mBACpB,OAAOjB,EAAUE,EAAU,aAAa,GAE5C,KAAKpC,EAAyBoD,8BAC1B,OAAOlB,EAAUE,EAAU,cAAc,GAE7C,KAAKpC,EAAyBqD,2BAC9B,KAAKrD,EAAyB6C,8BAC1B,OAAOX,EAAUE,EAAU,cAAc,GAE7C,KAAKpC,EAAyBwD,yBAC9B,KAAKzD,EAAwBuD,6BACzB,OAAOpB,EAAUE,EAAU,uBAAuB,GAEtD,KAAKrC,EAAwBwD,6BAC7B,KAAKxD,EAAwB0D,0BAC7B,KAAKzD,EAAyB0D,sBAC9B,KAAK1D,EAAyB8C,yBAC1B,OAAOZ,EAAUE,EAAU,uBAAuB,GAEtD,QACI,OAAOA,EAEf,CCxGe,SAASjC,EAActD,GAClC,OAAO,mBAAoBA,EAC/B,CCsFA,QA9EA,SAAS8G,EAAgBC,EAAoBC,EAAgB9C,GACjD,OAA0EA,GAAW,CAAC,GAAC,YAAvF+C,OAAW,IAAG,WAACjI,EAAQkI,GAAW,YAAS9B,IAATpG,EAAEmI,IAAoBnI,EAAEmI,KAAOD,EAAEC,EAAjC,EAAmC,EAG7E,IAAKJ,EACD,OAAOC,EAMX,IAAKA,GAAYD,IAAiBC,EAC9B,OAAOD,EAMX,IAAIK,EAAqB,EACrBC,EAAiB,EAEfC,EAAsB,SAAIC,EAAkBrC,EAAiBC,GAI/D,OAHAiC,GAAsBG,IAAkBrC,EAAe,EAAI,EAC3DmC,GAAkBE,IAAkBpC,EAAW,EAAI,EAE5CoC,CACX,EAEMpG,EAAS6F,EAASlF,KAAI,SAAC0F,EAASrD,GAClC,IAAMsD,EAAcV,GAAgBA,EAAa5C,GAEjD,OAAIb,EAAcmE,IAAgBnE,EAAckE,GACxCP,EAAYQ,EAAaD,GAClBF,EACH,EAAYG,EAAaD,GACzBC,EACAD,GAIDF,EACHrC,EAAQwC,EAAaD,GACrBC,EACAD,IAIJ,IAAAjG,SAAQkG,KAAgB,IAAAlG,SAAQiG,GACzBF,EACHR,EAAaW,EAAaD,GAC1BC,EACAD,GAIDF,EACHrC,EAAQwC,EAAaD,GACrBC,EACAD,EAER,IAKA,OAAIJ,IAAuBJ,EAASnF,QAAWkF,GAAgBA,EAAalF,SAAWmF,EAASnF,OACrFkF,EAKPM,IAAmBL,EAASnF,OACrBmF,EAGJ7F,CACX,ECjDA,EA/BA,SAASuG,EAA8BC,EAAmBC,GACtD,OAAKD,EAMAC,GAAaD,IAAkBC,EAO5BvI,OAAOyF,KAAK8C,GACf1G,QAAO,SAACC,EAAQhC,GACb,IAAM+F,EAAe/D,EAAOhC,GACtBgG,EAAWyC,EAAUzI,GAE3B,OAAImE,EAAc4B,IAAiB5B,EAAc6B,GACtCE,EAAUlE,EAAQhC,EAAKuI,EAAYxC,EAAcC,KAGxD,IAAA5D,SAAQ2D,KAAiB,IAAA3D,SAAQ4D,GAC1BE,EAAUlE,EAAQhC,EAAK,EAAa+F,EAAcC,IAGtDE,EAAUlE,EAAQhC,EAAKgG,EAClC,GAAGwC,GApBIA,EANAC,CA2Bf,EChCA,IAAYC,ECAAC,ECAAC,GFAZ,SAAYF,GACR,gDACA,gDACA,0CAEA,kDACA,kDACA,2CACH,CARD,CAAYA,IAAAA,EAAgB,KCA5B,SAAYC,GACR,mEACA,mEACA,6DAEA,qEACA,qEACA,8DACH,CARD,CAAYA,IAAAA,EAAyB,KCArC,SAAYC,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,0DACH,CApBD,CAAYA,IAAAA,EAAqB,KCU1B,ICVKC,EDUC,EAA2B,CACpChH,OAAQ,CAAC,EACTuE,SAAU,CAAC,GENA,SAAS0C,EACpBvE,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,IAGgB,IAAA+B,iBAA2B,CACvCC,KAAM,EACN1E,QAAQ,IAAA4E,iBAAgB,EAAenC,GACvC8B,SAAU,GAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,EACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK8C,EAAyB6C,8BAC9B,KAAKjD,EAAmBmD,sBACxB,KAAK6B,EAAsBG,4BAC3B,KAAKH,EAAsBI,2BAC3B,KAAKJ,EAAsBK,2BAC3B,KAAKL,EAAsBM,8BAC3B,KAAKN,EAAsBO,6BAC3B,KAAKT,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKV,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC3B,OAAO,EAAYhD,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ6E,MAE9D,QACI,OAAOjD,EAEf,CAEA,SAAS,EACLH,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA8B,YAGtB5B,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKxC,EAAmBuD,mBACxB,KAAKvD,EAAmBmD,sBACpB,OAAOb,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEf,CAEA,SAAS,EACLvE,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA0B,UAGlB2C,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACxB,KAAKtD,EAAmBmD,sBACpB,OAAOb,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKrC,EAAmBuD,mBACpB,OAAOjB,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,ED1EA,SAAYgH,GACR,oDACA,0DACA,0DAEA,wDACA,8DACA,6DACH,CARD,CAAYA,IAAAA,EAAwB,KEwB7B,IC1BKY,ED0BC,EAAqC,CAC9ClD,KAAM,CAAC,EACP1E,OAAQ,CAAC,EACTuE,SAAU,CAAC,GE1BTsD,EAA8C,CAAEC,sBAAuB,CAAC,GACxEC,EAAiD,CAAC,EAClDC,EAAoD,CAAC,EAE5C,SAASC,EACpBvF,EACAC,G,UAEA,YAHA,IAAAD,IAAAA,EAAA,GAGKC,EAAOuF,MAASvF,EAAOuF,KAAKC,UAIjB,IAAA1D,iBAAqC,CACjDC,MAAM,IAAAD,kBAAe,KACjB,EAAC9B,EAAOuF,KAAKC,UAAW,E,IAE5BnI,QAAQ,IAAAyE,kBAAe,KACnB,EAAC9B,EAAOuF,KAAKC,UAAW,E,IAE5B5D,UAAU,IAAAE,kBAAe,KACrB,EAAC9B,EAAOuF,KAAKC,UAAW,G,KAIzBpD,CAAQrC,EAAOC,GAfXD,CAgBf,CAEA,SAAS,EACLgC,EACA/B,G,MAEA,YAHA,IAAA+B,IAAAA,EAAA,GAGQ/B,EAAOtD,MACf,KAAK2H,EAAyBoB,0BAC1B,OAAKzF,EAAOuF,MAASvF,EAAOuF,KAAKG,YAI1B,EAAY3D,EAAM,CACrBoD,uBAAqB,KACjB,EAACnF,EAAOuF,KAAKG,cAAc,E,KALxB3D,EASf,KAAKsC,EAAyBsB,4BAC1B,OAAOjE,EAAUK,EAAM,wBAAyB,CAAC,GAGrD,OAAOA,CACX,CAEA,SAAS,EACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAA,GAGQ2C,EAAOtD,MACf,KAAK2H,EAAyBuB,0BAC9B,KAAKvB,EAAyBoB,0BAC1B,OAAO/D,EAAUrE,EAAQ,uBAAmBoE,GAEhD,KAAK4C,EAAyBwB,uBAC1B,OAAOnE,EAAUrE,EAAQ,kBAAmB2C,EAAOG,SAEvD,KAAKkE,EAAyByB,4BAC9B,KAAKzB,EAAyBsB,4BAC1B,OAAOjE,EAAUrE,EAAQ,yBAAqBoE,GAElD,KAAK4C,EAAyB0B,yBAC1B,OAAOrE,EAAUrE,EAAQ,oBAAqB2C,EAAOG,SAEzD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAA,GAGQ5B,EAAOtD,MACf,KAAK2H,EAAyBuB,0BAC1B,OAAOlE,EAAUE,EAAU,kBAAkB,GAEjD,KAAKyC,EAAyBwB,uBAC9B,KAAKxB,EAAyBoB,0BAC1B,OAAO/D,EAAUE,EAAU,kBAAkB,GAEjD,KAAKyC,EAAyByB,4BAC1B,OAAOpE,EAAUE,EAAU,oBAAoB,GAEnD,KAAKyC,EAAyB0B,yBAC9B,KAAK1B,EAAyBsB,4BAC1B,OAAOjE,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,EAEf,EDnGA,SAAYqD,GACR,8CACA,8CACA,uCACH,CAJD,CAAYA,IAAAA,EAAgB,KEoBrB,IAAM,GAA6B,CACtCM,KAAM,CAAC,EACPlI,OAAQ,CAAC,EACTuE,SAAU,CAAC,GClBA,SAASoE,GACpBjG,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6B,CACzCC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,OACVuI,EAAiBgB,oBACX,EAAYlE,EAAM/B,EAAOG,SAGzB4B,CAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA4B,WAGpB2C,EAAOtD,MACf,KAAKuI,EAAiBgB,oBAClB,OAAOvE,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKwD,EAAiBiB,iBAClB,OAAOxE,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAgC,aAGxB5B,EAAOtD,MACf,KAAKuI,EAAiBkB,oBAClB,OAAOzE,EAAUE,EAAU,aAAa,GAE5C,KAAKqD,EAAiBgB,oBACtB,KAAKhB,EAAiBiB,iBAClB,OAAOxE,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEf,CC7CO,IAAM,GAA6B,CACtCvE,OAAQ,CAAC,EACTuE,SAAU,CAAC,GCXA,SAASwE,GACpBrG,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6B,CACzCC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK0C,EAAmBmD,sBACxB,KAAK2B,EAAiBU,qBACtB,KAAKR,EAAsBM,8BAC3B,KAAKR,EAAiBW,sBACtB,KAAKvF,EAAgBkD,mBACjB,OAAO,EAAaT,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQkG,SAE/D,QACI,OAAOtE,EAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAA,IAGQ2C,EAAOtD,MACf,KAAKwH,EAAiBoC,qBACtB,KAAKpC,EAAiBU,qBAClB,OAAOlD,EAAUrE,EAAQ,wBAAoBoE,GAEjD,KAAKyC,EAAiBqC,kBAClB,OAAO7E,EAAUrE,EAAQ,mBAAoB2C,EAAOG,SAExD,KAAK+D,EAAiBsC,sBACtB,KAAKtC,EAAiBW,sBAClB,OAAOnD,EAAUrE,EAAQ,yBAAqBoE,GAElD,KAAKyC,EAAiBuC,mBAClB,OAAO/E,EAAUrE,EAAQ,oBAAqB2C,EAAOG,SAEzD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAA,IAGQ5B,EAAOtD,MACf,KAAKwH,EAAiBoC,qBAClB,OAAO5E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKsC,EAAiBU,qBACtB,KAAKV,EAAiBqC,kBAClB,OAAO7E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKsC,EAAiBsC,sBAClB,OAAO9E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKsC,EAAiBW,sBACtB,KAAKX,EAAiBuC,mBAClB,OAAO/E,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,EAEf,CCnEO,ICbK8E,GDaC,GAAsC,CAC/CrJ,OAAQ,CAAC,EACTuE,SAAU,CAAC,GEXA,SAAS+E,GACpB5G,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsC,CAClDC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK0C,EAAmBmD,sBACxB,KAAK6B,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKR,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKV,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC3B,OAAO,EAAahD,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQyG,kBAE/D,QACI,OAAO7E,EAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAqC,WAG7B2C,EAAOtD,MACf,KAAKyH,EAA0B0C,8BAC/B,KAAK1C,EAA0BW,8BAC3B,OAAOpD,EAAUrE,EAAQ,iCAA6BoE,GAE1D,KAAK0C,EAA0B2C,2BAC3B,OAAOpF,EAAUrE,EAAQ,4BAA6B2C,EAAOG,SAEjE,KAAKgE,EAA0B4C,+BAC/B,KAAK5C,EAA0BY,+BAC3B,OAAOrD,EAAUrE,EAAQ,kCAA8BoE,GAE3D,KAAK0C,EAA0B6C,4BAC3B,OAAOtF,EAAUrE,EAAQ,6BAA8B2C,EAAOG,SAElE,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,aAGjC5B,EAAOtD,MACf,KAAKyH,EAA0B0C,8BAC3B,OAAOnF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKuC,EAA0BW,8BAC/B,KAAKX,EAA0B2C,2BAC3B,OAAOpF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKuC,EAA0B4C,+BAC3B,OAAOrF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKuC,EAA0BY,+BAC/B,KAAKZ,EAA0B6C,4BAC3B,OAAOtF,EAAUE,EAAU,6BAA6B,GAE5D,QACI,OAAOA,EAEf,EDpFA,SAAY8E,GACR,uDACA,uDACA,iDAEA,yDACA,yDACA,mDAEA,sDACA,sDACA,gDAEA,qEACA,qEACA,8DACH,CAhBD,CAAYA,KAAAA,GAAkB,KEUvB,IChBKO,GDgBC,GAA+B,CACxC5J,OAAQ,CAAC,EACTuE,SAAU,CAAC,GETA,SAASsF,GACpBnH,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAwF,CACpGC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK8C,EAAyB8C,yBAC9B,KAAKlD,EAAmBmD,sBACpB,OAAO,EAAYR,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQgH,UAE9D,KAAKT,GAAmBU,+BAChB,OAAO,EAAYrF,EAAM/B,EAAOG,SAExC,QACI,OAAO4B,EAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA8B,WAGtB2C,EAAOtD,MACf,KAAKgK,GAAmBW,wBACxB,KAAKX,GAAmBY,wBACpB,OAAO5F,EAAUrE,EAAQ,mBAAeoE,GAE5C,KAAKiF,GAAmBa,qBACpB,OAAO7F,EAAUrE,EAAQ,cAAe2C,EAAOG,SAEnD,KAAKuG,GAAmBc,+BACxB,KAAKd,GAAmBU,+BACpB,OAAO1F,EAAUrE,EAAQ,0BAAsBoE,GAEnD,KAAKiF,GAAmBe,4BACpB,OAAO/F,EAAUrE,EAAQ,qBAAsB2C,EAAOG,SAE1D,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,aAG1B5B,EAAOtD,MACf,KAAKgK,GAAmBW,wBACpB,OAAO3F,EAAUE,EAAU,cAAc,GAE7C,KAAK8E,GAAmBa,qBACxB,KAAKb,GAAmBY,wBACpB,OAAO5F,EAAUE,EAAU,cAAc,GAE7C,KAAK8E,GAAmBc,+BACpB,OAAO9F,EAAUE,EAAU,qBAAqB,GAEpD,KAAK8E,GAAmBe,4BACxB,KAAKf,GAAmBU,+BACpB,OAAO1F,EAAUE,EAAU,qBAAqB,GACpD,QACI,OAAOA,EAEf,EDpFA,SAAYqF,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,gGACA,sGACA,sGACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,uEACH,CAnBD,CAAYA,KAAAA,GAA0B,KEwC/B,ICtCKS,GDsCC,GAAuC,CAChD3F,KAAM,CAAC,EACP1E,OAAQ,CAAC,EACTuE,SAAU,CAAC,GErCA,SAAS+F,GACpB5H,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+D,CAC3EC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAkC,SAG1B/B,EAAOtD,MACf,KAAKuK,GAA2BW,oBAC5B,OAAO,EAAY7F,IAAI,MAClB/B,EAAOuF,MAAQvF,EAAOuF,KAAKC,UAAW,CACnCqC,eAAe,G,IAI3B,KAAKZ,GAA2Ba,sBAC5B,OAAO,EAAY/F,IAAI,MAClB/B,EAAOuF,MAAQvF,EAAOuF,KAAKC,UAAW,CACnCqC,eAAe,G,IAK3B,OAAO9F,CACX,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAsC,WAG9B2C,EAAOtD,MACf,KAAKuK,GAA2Bc,oBAChC,KAAKd,GAA2BW,oBAC5B,OAAO,EAAYvK,EAAQ,CACvB2K,qBAAiBvG,EACjBwG,wBAAoBxG,IAG5B,KAAKwF,GAA2BiB,iBAC5B,OAAO,EAAY7K,EAAQ,CACvB2K,gBAAiBhI,EAAOG,QACxB8H,mBAAoBjI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGvD,KAAKyB,GAA2BkB,sBAChC,KAAKlB,GAA2Ba,sBAC5B,OAAO,EAAYzK,EAAQ,CACvB+K,uBAAmB3G,EACnB4G,0BAAsB5G,IAG9B,KAAKwF,GAA2BqB,mBAC5B,OAAO,EAAYjL,EAAQ,CACvB+K,kBAAmBpI,EAAOG,QAC1BkI,qBAAsBrI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKyB,GAA2BsB,gBAChC,KAAKtB,GAA2BuB,gBAC5B,OAAO,EAAYnL,EAAQ,CACvBoL,iBAAahH,EACbiH,oBAAgBjH,IAGxB,KAAKwF,GAA2B0B,aAC5B,OAAO,EAAYtL,EAAQ,CACvBoL,YAAazI,EAAOG,QACpBuI,eAAgB1I,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGnD,KAAKyB,GAA2B2B,iBAChC,KAAK3B,GAA2B4B,iBAC5B,OAAO,EAAYxL,EAAQ,CACvByL,kBAAcrH,EACdsH,qBAAiBtH,IAGzB,KAAKwF,GAA2B+B,cAC5B,OAAO,EAAY3L,EAAQ,CACvByL,aAAc9I,EAAOG,QACrB4I,gBAAiB/I,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGpD,KAAKyB,GAA2BgC,sCAChC,KAAKhC,GAA2BiC,sCAC5B,OAAO,EAAY7L,EAAQ,CACvB8L,uCAAmC1H,EACnC2H,0CAAsC3H,IAG9C,KAAKwF,GAA2BoC,mCAC5B,OAAO,EAAYhM,EAAQ,CACvB8L,kCAAmCnJ,EAAOG,QAC1CiJ,qCAAsCpJ,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzE,KAAKyB,GAA2BqC,yBAChC,KAAKrC,GAA2BsC,0BAC5B,OAAO,EAAYlM,EAAQ,CACvBmM,4BAAwB/H,EACxBgI,+BAA2BhI,IAGnC,KAAKwF,GAA2ByC,wBAC5B,OAAO,EAAYrM,EAAQ,CACvBmM,uBAAwBxJ,EAAOG,QAC/BsJ,0BAA2BzJ,EAAOuF,KAAKC,WAG/C,QACI,OAAOnI,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA0C,aAGlC5B,EAAOtD,MACf,KAAKuK,GAA2Bc,oBAC5B,OAAO,EAAYnG,EAAU,CACzB+H,gBAAgB,EAChB1B,mBAAoBjI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGvD,KAAKyB,GAA2BiB,iBAChC,KAAKjB,GAA2BW,oBAC5B,OAAO,EAAYhG,EAAU,CACzB+H,gBAAgB,EAChB1B,wBAAoBxG,IAG5B,KAAKwF,GAA2BkB,sBAC5B,OAAO,EAAYvG,EAAU,CACzBgI,kBAAkB,EAClBvB,qBAAsBrI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKyB,GAA2BqB,mBAChC,KAAKrB,GAA2Ba,sBAC5B,OAAO,EAAYlG,EAAU,CACzBgI,kBAAkB,EAClBvB,0BAAsB5G,IAG9B,KAAKwF,GAA2BsB,gBAC5B,OAAO,EAAY3G,EAAU,CACzBiI,aAAa,EACbnB,eAAgB1I,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGnD,KAAKyB,GAA2B0B,aAChC,KAAK1B,GAA2BuB,gBAC5B,OAAO,EAAY5G,EAAU,CACzBiI,aAAa,EACbnB,oBAAgBjH,IAGxB,KAAKwF,GAA2B2B,iBAC5B,OAAO,EAAYhH,EAAU,CACzBkI,cAAc,EACdf,gBAAiB/I,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGpD,KAAKyB,GAA2B+B,cAChC,KAAK/B,GAA2B4B,iBAC5B,OAAO,EAAYjH,EAAU,CACzBkI,cAAc,EACdf,qBAAiBtH,IAGzB,KAAKwF,GAA2BgC,sCAC5B,OAAO,EAAYrH,EAAU,CACzBmI,kCAAkC,EAClCX,qCAAsCpJ,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzE,KAAKyB,GAA2BoC,mCAChC,KAAKpC,GAA2BiC,sCAC5B,OAAO,EAAYtH,EAAU,CACzBmI,kCAAkC,EAClCX,0CAAsC3H,IAG9C,KAAKwF,GAA2BqC,yBAC5B,OAAO,EAAY1H,EAAU,CACzBoI,qBAAqB,EACrBP,0BAA2BzJ,EAAOuF,KAAKC,WAG/C,KAAKyB,GAA2BsC,0BAChC,KAAKtC,GAA2ByC,wBAC5B,OAAO,EAAY9H,EAAU,CACzBoI,qBAAqB,EACrBP,+BAA2BhI,IAGnC,QACI,OAAOG,EAEf,EDtNA,SAAY8F,GACR,uDACA,uDACA,gDACH,CAJD,CAAYA,KAAAA,GAAoB,KEYzB,ICZKuC,GDYC,GAAiC,CAC1C5M,OAAQ,CAAC,EACTuE,SAAU,CAAC,GETA,SAASsI,GACpBnK,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiC,CAC7CC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,OACVgL,GAAqByC,wBACf,EAAYpI,EAAM/B,EAAOG,SAGzB4B,CAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA+B,WAGvB2C,EAAOtD,MACf,KAAKgL,GAAqByC,wBACtB,OAAOzI,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKiG,GAAqB0C,qBACtB,OAAO1I,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAoC,aAG5B5B,EAAOtD,MACf,KAAKgL,GAAqB2C,wBACtB,OAAO3I,EAAUE,EAAU,aAAa,GAE5C,KAAK8F,GAAqByC,wBAC1B,KAAKzC,GAAqB0C,qBACtB,OAAO1I,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEf,ED9DA,SAAYqI,GACR,oDACA,oDACA,6CACH,CAJD,CAAYA,KAAAA,GAAiB,KEYtB,IAAM,GAA8B,CACvC5M,OAAQ,CAAC,EACTuE,SAAU,CAAC,GCTA,SAAS0I,GACpBvK,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA8B,CAC1CC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,OACVuN,GAAkBM,uBACZ,EAAaxI,EAAM/B,EAAOG,SAG1B4B,CAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA6B,WAGrB2C,EAAOtD,MACf,KAAKuN,GAAkBO,uBACvB,KAAKP,GAAkBM,uBACnB,OAAO7I,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKwI,GAAkBQ,oBACnB,OAAO/I,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAiC,aAGzB5B,EAAOtD,MACf,KAAKuN,GAAkBO,uBACnB,OAAO9I,EAAUE,EAAU,aAAa,GAE5C,KAAKqI,GAAkBM,uBACvB,KAAKN,GAAkBQ,oBACnB,OAAO/I,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEf,CClCO,IC3BK8I,GCDAC,GF4BC,GAA4B,CACrCtN,OAAQ,CAAC,EACTkI,KAAM,CAAC,EACP3D,SAAU,CAAC,GG3BA,SAASgJ,GACpB7K,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA4B,CACxCC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvCyF,KAAMsF,GACNjJ,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK4C,EAAgBkD,mBACrB,KAAKlD,EAAgBwL,2BACjB,OAAO,EAAY/I,GAAM,IAAAgJ,MAAK/K,EAAOG,QAAS,CAAC,iBAAkB,aAErE,QACI,OAAO4B,EAEf,CAEA,SAAS8I,GACLtF,EACAvF,GAEA,OAAQA,EAAOtD,MACf,KAAK4C,EAAgB0L,uBACrB,KAAK1L,EAAgB2L,qBACjB,OAAO,EAAY1F,GAAM,gCAClBvF,EAAOuF,MAAI,CACd2F,YAAalL,EAAOG,SAAWH,EAAOG,QAAQgL,MAAMD,YACpDE,WAAYpL,EAAOG,SAAWH,EAAOG,QAAQgL,MAAME,MACnDC,QAAStL,EAAOG,SAAWH,EAAOG,QAAQgL,OAASnL,EAAOG,QAAQgL,MAAMG,WAGhF,QACI,OAAO/F,EAEf,CAEA,SAAS,GACLlI,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA2B,WAGnB2C,EAAOtD,MACf,KAAK4C,EAAgBiM,mBACrB,KAAKjM,EAAgBkD,mBACrB,KAAKlD,EAAgBwL,2BACrB,KAAKxL,EAAgBkM,2BACjB,OAAO9J,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKnC,EAAgBmM,gBACrB,KAAKnM,EAAgBoM,wBACjB,OAAOhK,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA+B,aAGvB5B,EAAOtD,MACf,KAAK4C,EAAgBiM,mBACrB,KAAKjM,EAAgBkM,2BACjB,OAAO9J,EAAUE,EAAU,aAAa,GAE5C,KAAKtC,EAAgBkD,mBACrB,KAAKlD,EAAgBmM,gBACrB,KAAKnM,EAAgBwL,2BACrB,KAAKxL,EAAgBoM,wBACjB,OAAOhK,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEf,CCxFe,SAAS+J,GAAe5L,EAA0BC,GAK7D,YALmC,IAAAD,IAAAA,EAAA,KACnB,IAAA+B,iBAA6C,CACzDC,KAAM,IAGHK,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GAAY+B,EAAuC/B,GACxD,OAAQA,EAAOtD,OACVgO,GAAkBkB,uBACZ5L,EAAOG,QAGP4B,CAEf,EHhBA,SAAY2I,GACR,oDACA,oDACA,8CAEA,2EACA,2EACA,oEACH,CARD,CAAYA,KAAAA,GAAiB,KCD7B,SAAYC,GACR,6DACA,6DACA,uDAEA,+DACA,+DACA,wDACH,CARD,CAAYA,KAAAA,GAAuB,KGiB5B,IClBKkB,GDkBC,GAAoC,CAC7CxO,OAAQ,CAAC,EACTuE,SAAU,CAAC,GEdA,SAASkK,GACpB/L,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAoC,CAChDC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvCyF,KAAM,GACN3D,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAKiO,GAAwBoB,2BACzB,OCrBO,SACXC,EACAC,EACAvM,GAEA,IAAKuM,EACD,OAAOD,EAGX,IAAME,GAAmB,IAAAC,MAAKF,EAAM,MAC9BzL,GAAQ,IAAA4L,WAAUJ,EAA4B,iBAAdtM,GAAyB,IAAA2M,QAAO3M,GAAcA,GAAawM,GAC3F7I,GAAW,oBAAI2I,GAErB,IAAe,IAAXxL,EACA6C,EAASiJ,KAAKL,OACX,CACH,IAAMM,EAAeP,EAAMxL,GAE3B6C,EAAS7C,GAASb,EAAc4M,IAAiB5M,EAAcsM,GAC3D,EAAYM,EAAcN,GAC1BA,C,CAGR,OAAO5I,CACX,CDHemJ,CAAYzK,GAAQ,GAAI/B,EAAOG,QAASH,EAAOG,SAAW,CAC7DqD,GAAIxD,EAAOG,QAAQqD,GACnBiJ,QAASzM,EAAOG,QAAQsM,UAGhC,KAAK9B,GAAwB+B,4BACzB,OAAO,EAAa3K,EAAM/B,EAAOG,QAAS,CACtCmD,YAAa,SAACqJ,EAASC,GAAY,OAC/BD,EAAQnJ,KAAOoJ,EAAQpJ,IAAMmJ,EAAQF,UAAYG,EAAQH,OAD1B,IAK3C,QACI,OAAO1K,EAEf,CAEA,SAAS,GACLwD,EACAvF,GAEA,OAAQA,EAAOtD,OACViO,GAAwB+B,4BAClB,EAAYnH,EAAMvF,EAAOuF,MAGzBA,CAEf,CAEA,SAAS,GACLlI,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAmC,WAG3B2C,EAAOtD,MACf,KAAKiO,GAAwBkC,4BAC7B,KAAKlC,GAAwB+B,4BACzB,OAAOhL,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKkJ,GAAwBmC,yBACzB,OAAOpL,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,KAAKwK,GAAwBoC,2BAC7B,KAAKpC,GAAwBoB,2BACzB,OAAO,EAAY1O,EAAQ,CACvB2P,kBAAcvL,EACdwL,qBAAiBxL,IAGzB,KAAKkJ,GAAwBuC,wBACzB,OAAO,EAAY7P,EAAQ,CACvB2P,aAAchN,EAAOuF,KAAKC,SAC1ByH,gBAAiBjN,EAAOG,UAGhC,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAuC,aAG/B5B,EAAOtD,MACf,KAAKiO,GAAwBkC,4BACzB,OAAOnL,EAAUE,EAAU,aAAa,GAE5C,KAAK+I,GAAwB+B,4BAC7B,KAAK/B,GAAwBmC,yBACzB,OAAOpL,EAAUE,EAAU,aAAa,GAE5C,KAAK+I,GAAwBoC,2BACzB,OAAO,EAAYnL,EAAU,CACzBuL,iBAAiB,EACjBH,aAAchN,EAAOuF,KAAKC,WAGlC,KAAKmF,GAAwBoB,2BAC7B,KAAKpB,GAAwBuC,wBACzB,OAAO,EAAYtL,EAAU,CACzBuL,iBAAiB,EACjBH,kBAAcvL,IAGtB,QACI,OAAOG,EAEf,EDlHA,SAAYiK,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,sEACH,CAhBD,CAAYA,KAAAA,GAAyB,KGkC9B,ICjCKuB,GDiCC,GAAsC,CAC/CrL,KAAM,CAAC,EACP1E,OAAQ,CAAC,EACTuE,SAAU,CAAC,GEjCA,SAASyL,GACpBtN,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6D,CACzEC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAiC,SAGzB/B,EAAOtD,MACf,KAAKmP,GAA0BjE,oBAC3B,OAAO,EAAY7F,IAAI,MAClB/B,EAAOuF,MAAQvF,EAAOuF,KAAKC,UAAW,CACnCqC,eAAe,G,IAI3B,KAAKgE,GAA0B/D,sBAC3B,OAAO,EAAY/F,IAAI,MAClB/B,EAAOuF,MAAQvF,EAAOuF,KAAKC,UAAW,CACnCqC,eAAe,G,IAK3B,OAAO9F,CACX,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAqC,WAG7B2C,EAAOtD,MACf,KAAKmP,GAA0B9D,oBAC/B,KAAK8D,GAA0BjE,oBAC3B,OAAO,EAAYvK,EAAQ,CACvB2K,qBAAiBvG,EACjBwG,wBAAoBxG,IAG5B,KAAKoK,GAA0B3D,iBAC3B,OAAO,EAAY7K,EAAQ,CACvB2K,gBAAiBhI,EAAOG,QACxB8H,mBAAoBjI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGvD,KAAKqG,GAA0B1D,sBAC/B,KAAK0D,GAA0B/D,sBAC3B,OAAO,EAAYzK,EAAQ,CACvB+K,uBAAmB3G,EACnB4G,0BAAsB5G,IAG9B,KAAKoK,GAA0BvD,mBAC3B,OAAO,EAAYjL,EAAQ,CACvB+K,kBAAmBpI,EAAOG,QAC1BkI,qBAAsBrI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKqG,GAA0ByB,iBAC/B,KAAKzB,GAA0B0B,iBAC3B,OAAO,EAAYlQ,EAAQ,CACvBmQ,kBAAc/L,EACdgM,qBAAiBhM,IAGzB,KAAKoK,GAA0B6B,cAC3B,OAAO,EAAYrQ,EAAQ,CACvBmQ,aAAcxN,EAAOG,QACrBsN,gBAAiBzN,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGpD,KAAKqG,GAA0B8B,kBAC/B,KAAK9B,GAA0B+B,kBAC3B,OAAO,EAAYvQ,EAAQ,CACvBwQ,mBAAepM,EACfqM,sBAAkBrM,IAG1B,KAAKoK,GAA0BkC,eAC3B,OAAO,EAAY1Q,EAAQ,CACvBwQ,cAAe7N,EAAOG,QACtB2N,iBAAkB9N,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGrD,KAAKqG,GAA0BvC,yBAC/B,KAAKuC,GAA0BtC,0BAC3B,OAAO,EAAYlM,EAAQ,CACvBmM,4BAAwB/H,EACxBgI,+BAA2BhI,IAGnC,KAAKoK,GAA0BnC,wBAC3B,OAAO,EAAYrM,EAAQ,CACvBmM,uBAAwBxJ,EAAOG,QAC/BsJ,0BAA2BzJ,EAAOuF,KAAKC,WAG/C,QACI,OAAOnI,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,aAGjC5B,EAAOtD,MACf,KAAKmP,GAA0B9D,oBAC3B,OAAO,EAAYnG,EAAU,CACzB+H,gBAAgB,EAChB1B,mBAAoBjI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGvD,KAAKqG,GAA0B3D,iBAC/B,KAAK2D,GAA0BjE,oBAC3B,OAAO,EAAYhG,EAAU,CACzB+H,gBAAgB,EAChB1B,wBAAoBxG,IAG5B,KAAKoK,GAA0B1D,sBAC3B,OAAO,EAAYvG,EAAU,CACzBgI,kBAAkB,EAClBvB,qBAAsBrI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKqG,GAA0BvD,mBAC/B,KAAKuD,GAA0B/D,sBAC3B,OAAO,EAAYlG,EAAU,CACzBgI,kBAAkB,EAClBvB,0BAAsB5G,IAG9B,KAAKoK,GAA0ByB,iBAC3B,OAAO,EAAY1L,EAAU,CACzBoM,aAAa,EACbP,gBAAiBzN,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGpD,KAAKqG,GAA0B6B,cAC/B,KAAK7B,GAA0B0B,iBAC3B,OAAO,EAAY3L,EAAU,CACzBoM,aAAa,EACbP,qBAAiBhM,IAGzB,KAAKoK,GAA0B8B,kBAC3B,OAAO,EAAY/L,EAAU,CACzBqM,cAAc,EACdH,iBAAkB9N,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGrD,KAAKqG,GAA0BkC,eAC/B,KAAKlC,GAA0B+B,kBAC3B,OAAO,EAAYhM,EAAU,CACzBqM,cAAc,EACdH,sBAAkBrM,IAG1B,KAAKoK,GAA0BvC,yBAC3B,OAAO,EAAY1H,EAAU,CACzBoI,qBAAqB,EACrBP,0BAA2BzJ,EAAOuF,KAAKC,WAG/C,KAAKqG,GAA0BtC,0BAC/B,KAAKsC,GAA0BnC,wBAC3B,OAAO,EAAY9H,EAAU,CACzBoI,qBAAqB,EACrBP,+BAA2BhI,IAGnC,QACI,OAAOG,EAEf,ED3LA,SAAYwL,GACR,wDACA,wDACA,kDAEA,0DACA,0DACA,mDACH,CARD,CAAYA,KAAAA,GAAoB,KEoBzB,ICrBKc,GDqBC,GAAgB,CACzBnM,KAAM,GACN1E,OAAQ,CAAC,EACTuE,SAAU,CAAC,GEnBA,SAASuM,GACpBpO,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiC,CAC7CC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvCyF,KAAM,GACN3D,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,YAHA,IAAA+B,IAAAA,EAA4B,SAGpB/B,EAAOtD,OACV0Q,GAAqBgB,yBACf,EAAarM,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQkO,oBAAsB,IAG1EtM,CAEf,CAEA,SAAS,GACLwD,EACAvF,GAEA,OAAQA,EAAOtD,MACf,KAAK0Q,GAAqBgB,yBAC1B,KAAKhB,GAAqBkB,0BACtB,OAAO,EAAY/I,EAAMvF,EAAOuF,MAEpC,QACI,OAAOA,EAEf,CAEA,SAAS,GACLlI,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA+B,WAGvB2C,EAAOtD,MACf,KAAK0Q,GAAqBmB,yBAC1B,KAAKnB,GAAqBgB,yBACtB,OAAO1M,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAK2L,GAAqBoB,0BAC1B,KAAKpB,GAAqBkB,0BACtB,OAAO,EAAYjR,EAAQ,CACvBoR,iBAAahN,EACbiN,sBAAkBjN,IAG1B,KAAK2L,GAAqBuB,sBACtB,OAAOjN,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,KAAKiN,GAAqBwB,uBACtB,OAAO,EAAYvR,EAAQ,CACvBoR,YAAazO,EAAOG,QACpBuO,iBAAkB1O,EAAOuF,KAAKsJ,eAGtC,QACI,OAAOxR,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,aAG1B5B,EAAOtD,MACf,KAAK0Q,GAAqBmB,yBACtB,OAAO7M,EAAUE,EAAU,aAAa,GAE5C,KAAKwL,GAAqBoB,0BACtB,OAAO,EAAY5M,EAAU,CACzBkN,YAAY,EACZC,mBAAoB/O,EAAOuF,KAAKsJ,eAGxC,KAAKzB,GAAqBgB,yBAC1B,KAAKhB,GAAqBuB,sBACtB,OAAOjN,EAAUE,EAAU,aAAa,GAE5C,KAAKwL,GAAqBkB,0BAC1B,KAAKlB,GAAqBwB,uBACtB,OAAO,EAAYhN,EAAU,CACzBkN,YAAY,EACZC,wBAAoBtN,IAG5B,QACI,OAAOG,EAEf,EDxGA,SAAYsM,GACR,oFACA,oFACA,8EAEA,yEACA,yEACA,mEAEA,2EACA,2EACA,qEAEA,yEACA,yEACA,mEAEA,+DACA,+DACA,yDAEA,sEACA,sEACA,gEAEA,+CACH,CA1BD,CAAYA,KAAAA,GAAwB,KEM7B,IAAM,GAAqC,CAC9CnM,KAAM,CAAC,GCHI,SAASiN,GACpBjP,EACAC,G,MAEA,YAHA,IAAAD,IAAAA,EAAA,IAGKC,EAAOuF,MAASvF,EAAOuF,KAAKC,UAIjB,IAAA1D,iBAAqC,CACjDC,MAAM,IAAAD,kBAAe,KACjB,EAAC9B,EAAOuF,KAAKC,UAAW,G,KAIzBpD,CAAQrC,EAAOC,GATXD,CAUf,CAEA,SAAS,GACLgC,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAKwR,GAAyBe,iCAC1B,OAAOvN,EAAUK,EAAM,UAAkB/B,EAAOG,SAAWH,EAAOG,QAAQ+O,SAE9E,KAAKhB,GAAyBiB,kCAC1B,OAAOzN,EAAUK,EAAM,WAAmB/B,EAAOG,SAAWH,EAAOG,QAAQiP,UAE/E,KAAKlB,GAAyBmB,4BAC1B,OAAO3N,EAAUK,EAAM,WAAY/B,EAAOG,SAE9C,KAAK+N,GAAyBoB,qBAC1B,OAAO,EAAYvN,EAAM/B,EAAOG,SAEpC,QACI,OAAO4B,EAEf,CCnBO,ICtBKwN,GDsBC,GAAkC,CAC3ClS,OAAQ,CACJmS,0BAA2B,CAAC,EAC5BC,YAAa,CAAC,EACdhB,YAAa,CAAC,GAElB7M,SAAU,CACN8N,WAAY,CAAC,EACbC,yBAA0B,CAAC,EAC3Bb,WAAY,CAAC,IEvBN,SAASc,GACpB7P,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsE,CAClFC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,MACf,KAAK0C,EAAmBmD,sBACxB,KAAK6B,EAAsBO,6BAC3B,KAAKP,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKR,EAAiBU,qBACtB,KAAKV,EAAiBW,sBAClB,OAAO,EAAa9C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ0P,cAE/D,KAAKnJ,GAAmBoJ,yBACpB,OAAO,EAAa/N,EAAM,IAE9B,QACI,OAAOA,EAEf,CAEA,SAAS,GACL1E,EACA2C,G,gBAEA,YAHA,IAAA3C,IAAAA,EAAiC,WAGzB2C,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACxB,KAAKtD,EAAmBmD,sBACxB,KAAK6B,EAAsBO,6BAC3B,KAAKP,EAAsB2L,6BACvB,OAAOrO,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKrC,EAAmBuD,mBACxB,KAAKyB,EAAsB4L,0BACvB,OAAOtO,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,KAAKiE,EAAsB6L,4BAC3B,KAAK7L,EAAsBG,4BACvB,OAAO7C,EAAUrE,EAAQ,mBAAeoE,GAE5C,KAAK2C,EAAsB8L,yBACvB,OAAOxO,EAAUrE,EAAQ,cAAe2C,EAAOG,SAEnD,KAAKiE,EAAsBK,2BAC3B,KAAKL,EAAsB+L,2BACvB,OAAInQ,EAAOuF,KACA,EAAYlI,EAAQ,CACvBoS,aAAW,KACP,EAACzP,EAAOuF,KAAK/B,SAAK/B,E,KAKvBpE,EAEX,KAAK+G,EAAsBgM,wBACvB,OAAIpQ,EAAOuF,KACA,EAAYlI,EAAQ,CACvBoS,aAAW,KACP,EAACzP,EAAOuF,KAAK/B,IAAKxD,EAAOG,Q,KAK9B9C,EAEX,KAAK+G,EAAsBI,2BAC3B,KAAKJ,EAAsBiM,2BACvB,OAAIrQ,EAAOuF,KACA,EAAYlI,EAAQ,CACvBoR,aAAW,KACP,EAACzO,EAAOuF,KAAK/B,SAAK/B,E,KAKvBpE,EAEX,KAAK+G,EAAsBkM,wBACvB,OAAItQ,EAAOuF,KACA,EAAYlI,EAAQ,CACvBoR,aAAW,KACP,EAACzO,EAAOuF,KAAK/B,IAAKxD,EAAOG,Q,KAK9B9C,EAEX,KAAK+G,EAAsBmM,8BAC3B,KAAKnM,EAAsBM,8BACvB,OAAI1E,EAAOuF,KACA,EAAYlI,EAAQ,CACvBmS,2BAAyB,KACrB,EAACxP,EAAOuF,KAAK/B,SAAK/B,E,KAKvBpE,EAEX,KAAK+G,EAAsBoM,2BACvB,OAAIxQ,EAAOuF,KACA,EAAYlI,EAAQ,CACvBmS,2BAAyB,KACrB,EAACxP,EAAOuF,KAAK/B,IAAKxD,EAAOG,Q,KAK9B9C,EAEX,QACI,OAAOA,EAEf,CAEA,SAAS,GACLuE,EACA5B,G,gBAEA,YAHA,IAAA4B,IAAAA,EAAqC,aAG7B5B,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKwC,EAAsB2L,6BACvB,OAAOrO,EAAUE,EAAU,4BAA4B,GAE3D,KAAKxC,EAAmBmD,sBACxB,KAAKnD,EAAmBuD,mBACpB,OAAOjB,EAAUE,EAAU,aAAa,GAE5C,KAAKwC,EAAsBO,6BAC3B,KAAKP,EAAsB4L,0BACvB,OAAOtO,EAAUE,EAAU,4BAA4B,GAE3D,KAAKwC,EAAsB6L,4BACvB,OAAOvO,EAAUE,EAAU,cAAc,GAE7C,KAAKwC,EAAsBG,4BAC3B,KAAKH,EAAsB8L,yBACvB,OAAOxO,EAAUE,EAAU,cAAc,GAE7C,KAAKwC,EAAsB+L,2BACvB,OAAInQ,EAAOuF,KACA,EAAY3D,EAAU,CACzB8N,YAAU,KACN,EAAC1P,EAAOuF,KAAK/B,KAAK,E,KAKvB5B,EAEX,KAAKwC,EAAsBK,2BAC3B,KAAKL,EAAsBgM,wBACvB,OAAIpQ,EAAOuF,KACA,EAAY3D,EAAU,CACzB8N,YAAU,KACN,EAAC1P,EAAOuF,KAAK/B,KAAK,E,KAKvB5B,EAEX,KAAKwC,EAAsBiM,2BACvB,OAAIrQ,EAAOuF,KACA,EAAY3D,EAAU,CACzBkN,YAAU,KACN,EAAC9O,EAAOuF,KAAK/B,KAAK,E,KAKvB5B,EAEX,KAAKwC,EAAsBI,2BAC3B,KAAKJ,EAAsBkM,wBACvB,OAAItQ,EAAOuF,KACA,EAAY3D,EAAU,CACzBkN,YAAU,KACN,EAAC9O,EAAOuF,KAAK/B,KAAK,E,KAKvB5B,EAEX,KAAKwC,EAAsBmM,8BACvB,OAAIvQ,EAAOuF,KACA,EAAY3D,EAAU,CACzB+N,0BAAwB,KACpB,EAAC3P,EAAOuF,KAAK/B,KAAK,E,KAKvB5B,EAEX,KAAKwC,EAAsBM,8BAC3B,KAAKN,EAAsBoM,2BACvB,OAAIxQ,EAAOuF,KACA,EAAY3D,EAAU,CACzB+N,0BAAwB,KACpB,EAAC3P,EAAOuF,KAAK/B,KAAK,E,KAKvB5B,EAEX,QACI,OAAOA,EAEf,CC/Oe,SAAS6O,GACpBjU,EACAkU,GAEA,IAAMC,EAAkC,CAAC,EAWzC,OAVAjV,OAAOyF,KAAK3E,GAAQoU,SAAQ,SAACpV,GACzB,IAAMa,EAAQG,EAAOhB,GACfqV,EAAYH,EAASA,EAAS,IAAMlV,EAAMA,EAC3B,iBAAVa,EACPX,OAAOoV,OAAOH,EAAWF,GAAcpU,EAAOwU,IAE9CF,EAAUE,GAAaxU,CAE/B,IAEOsU,CACX,CCnBe,SAASI,GACpBvU,GAUA,OARad,OAAOyF,KAAK3E,GACDwU,OAEOzT,QAAO,SAAC0T,EAAUC,G,MAAY,OAAC,gCACvDD,KAAQ,MACVC,GAAU1U,EAAO0U,GAAQ,GAF+B,GAGzD,CAAC,EAGT,EHRA,SAAY3B,GACR,6DACA,6DACA,sDACH,CAJD,CAAYA,KAAAA,GAAsB,KIY3B,ICZK4B,GDYC,GAAmC,CAC5C9T,OAAQ,CAAC,EACTuE,SAAU,CAAC,GETA,SAASwP,GACpBrR,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAmC,CAC/CC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,GAAQA,EAAOtD,OACN6S,GAAuB8B,2BAexB,OAAOtP,EAdP,GAAI/B,EAAOuF,KAAM,CACb,IAKM+L,EAAsBP,GADNN,GAJF,CAChBc,cAAevR,EAAOuF,KAAKgM,cAC3BC,WAAYxR,EAAOuF,KAAKiM,cAM5B,OAAO9P,EAAUK,EAFC0P,KAAK,GAAGC,KAAKC,UAAUL,IAENtR,EAAOG,Q,CAO1D,CAEA,SAAS,GACL9C,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAkC,WAG1B2C,EAAOtD,MACX,KAAK6S,GAAuBqC,2BAC5B,KAAKrC,GAAuB8B,2BACxB,OAAO3P,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAK8N,GAAuBsC,wBACxB,OAAOnQ,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEnB,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAsC,aAG9B5B,EAAOtD,MACX,KAAK6S,GAAuBqC,2BACxB,OAAOlQ,EAAUE,EAAU,aAAa,GAC5C,KAAK2N,GAAuB8B,2BAC5B,KAAK9B,GAAuBsC,wBACxB,OAAOnQ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDzEA,SAAYuP,GACR,qEACA,qEACA,8DACH,CAJD,CAAYA,KAAAA,GAAyB,KEY9B,ICdKW,GDcC,GAAsC,CAC/CzU,OAAQ,CAAC,EACTuE,SAAU,CAAC,GETA,SAASmQ,GACpBhS,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsC,CAClDC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,OACVyU,GAA0Ba,+BACpB,EAAajQ,EAAM/B,EAAOG,SAG1B4B,CAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAqC,WAG7B2C,EAAOtD,MACf,KAAKyU,GAA0Bc,+BAC/B,KAAKd,GAA0Ba,+BAC3B,OAAOtQ,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAK0P,GAA0Be,4BAC3B,OAAOxQ,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,aAGjC5B,EAAOtD,MACf,KAAKyU,GAA0Bc,+BAC3B,OAAOvQ,EAAUE,EAAU,aAAa,GAE5C,KAAKuP,GAA0Ba,+BAC/B,KAAKb,GAA0Be,4BAC3B,OAAOxQ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEf,EDjEA,SAAYkQ,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,uEACH,CAhBD,CAAYA,KAAAA,GAA0B,KEoC/B,IClCKK,GDkCC,GAAuC,CAChDpQ,KAAM,CAAC,EACP1E,OAAQ,CAAC,EACTuE,SAAU,CAAC,GEjCA,SAASwQ,GACpBrS,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+D,CAC3EC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAkC,SAG1B/B,EAAOtD,MACf,KAAKoV,GAA2BlK,oBAC5B,OAAO,EAAY7F,IAAI,MAClB/B,EAAOuF,MAAQvF,EAAOuF,KAAKC,UAAW,CACnCqC,eAAe,G,IAI3B,KAAKiK,GAA2BhK,sBAC5B,OAAO,EAAY/F,IAAI,MAClB/B,EAAOuF,MAAQvF,EAAOuF,KAAKC,UAAW,CACnCqC,eAAe,G,IAK3B,OAAO9F,CACX,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAsC,WAG9B2C,EAAOtD,MACf,KAAKoV,GAA2B/J,oBAChC,KAAK+J,GAA2BlK,oBAC5B,OAAO,EAAYvK,EAAQ,CACvB2K,qBAAiBvG,EACjBwG,wBAAoBxG,IAG5B,KAAKqQ,GAA2B5J,iBAC5B,OAAO,EAAY7K,EAAQ,CACvB2K,gBAAiBhI,EAAOG,QACxB8H,mBAAoBjI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGvD,KAAKsM,GAA2B3J,sBAChC,KAAK2J,GAA2BhK,sBAC5B,OAAO,EAAYzK,EAAQ,CACvB+K,uBAAmB3G,EACnB4G,0BAAsB5G,IAG9B,KAAKqQ,GAA2BxJ,mBAC5B,OAAO,EAAYjL,EAAQ,CACvB+K,kBAAmBpI,EAAOG,QAC1BkI,qBAAsBrI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKsM,GAA2BO,uBAChC,KAAKP,GAA2BQ,uBAC5B,OAAO,EAAYjV,EAAQ,CACvBkV,wBAAoB9Q,EACpB+Q,2BAAuB/Q,IAG/B,KAAKqQ,GAA2BW,oBAC5B,OAAO,EAAYpV,EAAQ,CACvBkV,mBAAoBvS,EAAOG,QAC3BqS,sBAAuBxS,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAG1D,KAAKsM,GAA2BY,sBAChC,KAAKZ,GAA2Ba,sBAC5B,OAAO,EAAYtV,EAAQ,CACvBuV,uBAAmBnR,EACnBoR,0BAAsBpR,IAG9B,KAAKqQ,GAA2BgB,mBAC5B,OAAO,EAAYzV,EAAQ,CACvBuV,kBAAmB5S,EAAOG,QAC1B0S,qBAAsB7S,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKsM,GAA2BxI,yBAChC,KAAKwI,GAA2BvI,0BAC5B,OAAO,EAAYlM,EAAQ,CACvBmM,4BAAwB/H,EACxBgI,+BAA2BhI,IAGnC,KAAKqQ,GAA2BpI,wBAC5B,OAAO,EAAYrM,EAAQ,CACvBmM,uBAAwBxJ,EAAOG,QAC/BsJ,0BAA2BzJ,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAG9D,QACI,OAAOnI,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA0C,aAGlC5B,EAAOtD,MACf,KAAKoV,GAA2B/J,oBAC5B,OAAO,EAAYnG,EAAU,CACzB+H,gBAAgB,EAChB1B,mBAAoBjI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGvD,KAAKsM,GAA2B5J,iBAChC,KAAK4J,GAA2BlK,oBAC5B,OAAO,EAAYhG,EAAU,CACzB+H,gBAAgB,EAChB1B,wBAAoBxG,IAG5B,KAAKqQ,GAA2B3J,sBAC5B,OAAO,EAAYvG,EAAU,CACzBgI,kBAAkB,EAClBvB,qBAAsBrI,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKsM,GAA2BxJ,mBAChC,KAAKwJ,GAA2BhK,sBAC5B,OAAO,EAAYlG,EAAU,CACzBgI,kBAAkB,EAClBvB,0BAAsB5G,IAG9B,KAAKqQ,GAA2BO,uBAC5B,OAAO,EAAYzQ,EAAU,CACzBmR,mBAAmB,EACnBP,sBAAuBxS,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAG1D,KAAKsM,GAA2BW,oBAChC,KAAKX,GAA2BQ,uBAC5B,OAAO,EAAY1Q,EAAU,CACzBmR,mBAAmB,EACnBP,2BAAuB/Q,IAG/B,KAAKqQ,GAA2BY,sBAC5B,OAAO,EAAY9Q,EAAU,CACzBoR,mBAAmB,EACnBH,qBAAsB7S,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAGzD,KAAKsM,GAA2BgB,mBAChC,KAAKhB,GAA2Ba,sBAC5B,OAAO,EAAY/Q,EAAU,CACzBoR,mBAAmB,EACnBH,0BAAsBpR,IAG9B,KAAKqQ,GAA2BxI,yBAC5B,OAAO,EAAY1H,EAAU,CACzBoI,qBAAqB,EACrBP,0BAA2BzJ,EAAOuF,MAAQvF,EAAOuF,KAAKC,WAG9D,KAAKsM,GAA2BvI,0BAChC,KAAKuI,GAA2BpI,wBAC5B,OAAO,EAAY9H,EAAU,CACzBoI,qBAAqB,EACrBP,+BAA2BhI,IAGnC,QACI,OAAOG,EAEf,ED5LA,SAAYuQ,GACR,yDACA,yDACA,kDACH,CAJD,CAAYA,KAAAA,GAAqB,KEY1B,ICVKc,GDUC,GAAkC,CAC3C5V,OAAQ,CAAC,EACTuE,SAAU,CAAC,GETA,SAASsR,GACpBnT,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkC,CAC9CC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOtD,OACVyV,GAAsBgB,yBAChB,EAAYpR,EAAM/B,EAAOG,SAGzB4B,CAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAiC,WAGzB2C,EAAOtD,MACf,KAAKyV,GAAsBiB,yBAC3B,KAAKjB,GAAsBgB,yBACvB,OAAOzR,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAK0Q,GAAsBkB,sBACvB,OAAO3R,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAqC,aAG7B5B,EAAOtD,MACf,KAAKyV,GAAsBiB,yBACvB,OAAO1R,EAAUE,EAAU,aAAa,GAE5C,KAAKuQ,GAAsBkB,sBAC3B,KAAKlB,GAAsBgB,yBACvB,OAAOzR,EAAUE,EAAU,aAAa,GAC5C,QACI,OAAOA,EAEf,ED5DA,SAAYqR,GACR,2DACA,2DACA,oDACH,CAJD,CAAYA,KAAAA,GAAqB,KEEjC,IAAM,GAAkC,CACpC5V,OAAQ,CAAC,EACTuE,SAAU,CAAC,GAGA,SAAS0R,GACpBvT,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkC,CAC9CzE,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL3C,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAiC,GAAcA,QAGvC2C,EAAOtD,MACf,KAAKuW,GAAsBM,0BAC3B,KAAKN,GAAsBO,0BACvB,OAAO9R,EAAUrE,EAAQ,kBAAcoE,GAE3C,KAAKwR,GAAsBQ,uBACvB,OAAO/R,EAAUrE,EAAQ,aAAc2C,EAAOG,SAElD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAqC,GAAcA,UAG3C5B,EAAOtD,MACf,KAAKuW,GAAsBM,0BACvB,OAAO7R,EAAUE,EAAU,cAAc,GAE7C,KAAKqR,GAAsBO,0BAC3B,KAAKP,GAAsBQ,uBACvB,OAAO/R,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,EAEf,CC5CO,ICTK8R,GDSC,GAAoC,CAC7CrW,OAAQ,CAAC,EACTuE,SAAU,CAAC,GEPA,SAAS+R,GACpB5T,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAoC,CAChDzE,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL3C,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAAmC,WAG3B2C,EAAOtD,MACf,KAAK6C,EAAwBuD,6BAC7B,KAAKvD,EAAwBwD,6BACzB,OAAOrB,EAAUrE,EAAQ,mBAAeoE,GAE5C,KAAKlC,EAAwB0D,0BACzB,OAAOvB,EAAUrE,EAAQ,cAAe2C,EAAOG,SAEnD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAuC,aAG/B5B,EAAOtD,MACf,KAAK6C,EAAwBuD,6BACzB,OAAOpB,EAAUE,EAAU,cAAc,GAE7C,KAAKrC,EAAwB0D,0BAC7B,KAAK1D,EAAwBwD,6BACzB,OAAOrB,EAAUE,EAAU,cAAc,GAC7C,QACI,OAAOA,EAEf,ED/CA,SAAY8R,GACR,uDACA,6DACA,6DACA,sEACA,sEACA,gEACA,uDACA,uDACA,gDACH,CAVD,CAAYA,KAAAA,GAAwB,KEmB7B,IAAM,GAA+B,CACxCrW,OAAQ,CAAC,EACTuE,SAAU,CAAC,GCVA,SAASgS,GACpB7T,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+B,CAC3CC,KAAM,GACN1E,QAAQ,IAAA4E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAGA,OAAQA,EAAOtD,MACf,KAAK0C,EAAmBmD,sBACxB,KAAKnD,EAAmByU,wBACxB,KAAKZ,GAAsBO,0BAC3B,KAAKhU,EAAyB6C,8BAC9B,KAAK6B,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKT,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKN,EAAsBO,6BAC3B,KAAKR,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC/B,KAAK2O,GAAyBI,wBAC1B,OAAO,EAAY/R,GAAM,IAAAgJ,MAAK/K,EAAOG,QAAS,CAC1C,iBACA,OACA,eACA,WACA,UACA,sBAGR,KAAKb,EAAgB2L,qBACjB,OAAOvJ,EAAUK,EAAM,UAAW/B,EAAOG,SAAWH,EAAOG,QAAQgL,MAAM4I,SAE7E,QACI,OAAOhS,EAEf,CAEA,SAAS,GACL1E,EACA2C,GAEA,YAHA,IAAA3C,IAAAA,EAA8B,WAGtB2C,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACxB,KAAKtD,EAAmBmD,sBACpB,OAAOb,EAAUrE,EAAQ,iBAAaoE,GAE1C,KAAKrC,EAAmBuD,mBACpB,OAAOjB,EAAUrE,EAAQ,YAAa2C,EAAOG,SAEjD,KAAKf,EAAmB4U,wBACxB,KAAK5U,EAAmByU,wBACpB,OAAOnS,EAAUrE,EAAQ,mBAAeoE,GAE5C,KAAKrC,EAAmB6U,qBACpB,OAAOvS,EAAUrE,EAAQ,cAAe2C,EAAOG,SAEnD,QACI,OAAO9C,EAEf,CAEA,SAAS,GACLuE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,aAG1B5B,EAAOtD,MACf,KAAK0C,EAAmBsD,sBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKxC,EAAmBuD,mBACxB,KAAKvD,EAAmBmD,sBACpB,OAAOb,EAAUE,EAAU,aAAa,GAE5C,KAAKxC,EAAmB4U,wBACpB,OAAOtS,EAAUE,EAAU,cAAc,GAE7C,KAAKxC,EAAmB6U,qBACxB,KAAK7U,EAAmByU,wBACpB,OAAOnS,EAAUE,EAAU,cAAc,GAE7C,KAAK8R,GAAyBpG,iBAC1B,OAAO5L,EAAUE,EAAU,wBAAwB,GAEvD,KAAK8R,GAAyBhG,cAC9B,KAAKgG,GAAyBnG,iBAC1B,OAAO7L,EAAUE,EAAU,wBAAwB,GAEvD,QACI,OAAOA,EAEf,CCtHA,MAAM,GAA+BtF,QAAQ,wBCE7C,IAAY4X,IAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAYA,KAAAA,GAAoB,K,SAyBhC,YACI,WACWC,GADX,MAGI,YAOR,SAAyBzX,GACrB,OAAQA,GACR,KAAKwX,GAAqBE,sBACtB,MAAO,iEAEX,KAAKF,GAAqBG,YACtB,MAAO,sDAEX,KAAKH,GAAqBI,oBACtB,MAAO,8DAEX,KAAKJ,GAAqBK,gBACtB,MAAO,0DAEX,KAAKL,GAAqBM,gBACtB,MAAO,0DAEX,KAAKN,GAAqBO,sBAC1B,KAAKP,GAAqBQ,mBACtB,MAAO,+DAEX,KAAKR,GAAqBS,aACtB,MAAO,uDAEX,KAAKT,GAAqBU,eACtB,MAAO,0EAEX,KAAKV,GAAqBW,eACtB,MAAO,yDAEX,KAAKX,GAAqBY,oBACtB,MAAO,+EAEX,KAAKZ,GAAqBa,qBACtB,MAAO,2FAEX,KAAKb,GAAqBc,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEf,CAjDcC,CAAgBd,KAAS,K,OAFxB,EAAAA,QAAAA,EAIP,EAAK1X,KAAO,mBACZ,EAAKC,KAAO,e,CAChB,CACJ,OAT8C,oBAS9C,EATA,CAA8C,GC3BxC,GAA+BJ,QAAQ,YCS7C,ICAI4Y,GDAgC,kBCEzB,W,IAAE,sDACL,IAAMC,EAAWC,EAAKC,MAItB,OAAQH,GAAe,kCAAIE,EAAM,Y,IAAC,sDAG9B,IAAM5X,EAAS2X,EAAQ,aAAIG,GAE3B,MAAsB,mBAAX9X,GACA,KAAA+X,SAAQ/X,GAGZA,CACX,IACH,GAnBU,IACX0X,GCTW,SAASM,GAASnZ,EAAUoZ,GACvC,GAAIpZ,QACA,MAAMoZ,EAAeA,IAAiB,IAAI5Y,MAAM,qCAGpD,OAAOR,CACX,CCDe,SAASqZ,GAAoCC,GACxD,OAcJ,SAAuCA,EAAWC,GAC9C,IAAMC,EAAQna,OAAOoa,OAAOH,GAa5B,OAGJ,SAA6BA,EAAgBI,GAGzC,IAFA,IAAI/Z,EAAYN,OAAOsa,eAAeL,GAE/B3Z,GACH+Z,EAAS/Z,GAETA,EAAYN,OAAOsa,eAAeha,EAE1C,CAtBIia,CAAoBN,GAAQ,SAAA3Z,GACxBN,OAAOwa,oBAAoBla,GACtB4U,SAAQ,SAAAnU,GACQ,gBAATA,GAAiD,mBAAhBoZ,EAAMpZ,IAA2C,MAAnBA,EAAK0Z,OAAO,KAI/EN,EAAMpZ,GAxBS,SAACkZ,EAAQlZ,GAChC,kB,UAAC,kDAAmB,WAAA2Z,aAAW,EAAAT,EAAOlZ,IAAMP,KAAI,8BAACyZ,GAAWP,IAAxC,CAApB,CAuBsBQ,CAAKD,EAAiClZ,GACxD,GACR,IAEOoZ,CACX,CA7BWQ,CAAYV,EAGvB,CC4HA,SA/HmD,CAC/C,qBAAsB,CAClBW,SAAU,SACVC,OAAQ,eAEZ,iBAAkB,CACdD,SAAU,UACVC,OAAQ,UAEZ,iBAAkB,CACdD,SAAU,UACVC,OAAQ,UAEZ,eAAgB,CACZD,SAAU,UACVC,OAAQ,QAEZ,gBAAiB,CACbD,SAAU,UACVC,OAAQ,SAEZ,0BAA2B,CACvBD,SAAU,UACVC,OAAQ,mBAEZ,yBAA0B,CACtBD,SAAU,UACVC,OAAQ,kBAEZ,kBAAmB,CACfD,SAAU,UACVC,OAAQ,WAEZC,SAAU,CACNF,SAAU,WACVC,OAAQ,eAEZE,UAAW,CACPH,SAAU,YACVC,OAAQ,eAEZG,gBAAiB,CACbJ,SAAU,YACVC,OAAQ,UAEZI,aAAc,CACVL,SAAU,eACVC,OAAQ,eAEZK,OAAQ,CACJN,SAAU,SACVC,OAAQ,eAEZM,YAAa,CACTP,SAAU,cACVC,OAAQ,eAEZ,0BAA2B,CACvBD,SAAU,cACVC,OAAQ,eAEZ,mBAAoB,CAChBD,SAAU,cACVC,OAAQ,QAEZO,QAAS,CACLR,SAAU,UACVC,OAAQ,eAEZQ,OAAQ,CACJT,SAAU,SACVC,OAAQ,eAEZ,gBAAiB,CACbD,SAAU,WACVC,OAAQ,QAEZ,iBAAkB,CACdD,SAAU,YACVC,OAAQ,QAEZS,YAAa,CACTV,SAAU,cACVC,OAAQ,eAEZU,cAAe,CACXX,SAAU,gBACVC,OAAQ,eAEZW,SAAU,CACNZ,SAAU,WACVC,OAAQ,eAEZY,WAAY,CACRb,SAAU,aACVC,OAAQ,eAEZa,QAAS,CACLd,SAAU,UACVC,OAAQ,eAEZc,UAAW,CACPf,SAAU,YACVC,OAAQ,eAEZe,KAAM,CACFhB,SAAU,OACVC,OAAQ,eAEZ,0BAA2B,CACvBD,SAAU,cACVC,OAAQ,eAEZgB,aAAc,CACVjB,SAAU,eACVC,OAAQ,eAEZiB,QAAS,CACLlB,SAAU,UACVC,OAAQ,eAEZkB,SAAU,CACNnB,SAAU,WACVC,OAAQ,gBCzHhB,SAASmB,GAAUC,GACf,OAAO,IAAAtL,QAAO,CACVuL,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBC,QAASH,EAAQG,QACjBC,SAAUJ,EAAQI,SAClBC,SAAUL,EAAQK,SAClBC,KAAMN,EAAQM,KACdC,gBAAiBP,EAAQO,gBACzBC,YAAaR,EAAQQ,YACrBC,WAAYT,EAAQS,WACpBC,MAAOV,EAAQU,MACfC,aAAcX,EAAQW,cACvB,EAAAC,SACP,CCNO,IAAM,GAAkC,CAC3Clb,OAAQ,CAAC,EACTuE,SAAU,CAAC,GCUR,SAAS4W,KACZ,ICNMC,EAKAC,EAOAC,EAKAC,EAKAC,EAKAnJ,EAKAoJ,EAKAC,ECxCAC,EAKArP,EAaA9B,EAiBA+B,EAaAqP,EAWAC,EC5DAC,EAKAC,EAKAC,EAKAC,EAKAC,EClBAC,EAKAC,EAOAC,EAKAC,EAKAC,EAKAC,ECjCAC,ECEAC,EASAC,ECWAC,EASAC,EAWAC,EAWAC,EAyBAC,EAOAC,EAmBAC,EAOAC,EASAC,EAOAC,EASAC,EAOAC,EASAC,ECvJAC,EAKAC,EAKAC,ERGAC,GCNAxC,EAAoB,IACtB,SAAC1Y,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGN2W,EAA2B,GAC7BD,GACA,SAAAA,GAAqB,kBACjB,OAAOjD,GAAMiD,KAAqB,WAAM,WAAI,GAAiBvE,GAAqBE,sBAA1C,GAC5C,CAFqB,IAKnBuE,EAAiB,IACnB,SAAC5Y,GAA+B,OAAAA,EAAM1C,OAAOoS,WAAb,IAChC,SAAAhS,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPmb,EAA0B,IAC5B,SAAC7Y,GAA+B,OAAAA,EAAM1C,OAAO6d,oBAAb,IAChC,SAAAzd,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPob,EAAe,IACjB,SAAC9Y,GAA+B,OAAAA,EAAM1C,OAAO8d,SAAb,IAChC,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPiS,EAAa,IACf,SAAC3P,GAA+B,QAAEA,EAAM6B,SAAS8N,UAAjB,IAChC,SAAAvS,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGR2b,EAAsB,IACxB,SAAC/Y,GAA+B,QAAEA,EAAM6B,SAASkX,mBAAjB,IAChC,SAAA3b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGR4b,EAAY,IACd,SAAChZ,GAA+B,QAAEA,EAAM6B,SAASmX,SAAjB,IAChC,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,KAGP,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,GAEO,CACH0Y,kBAAmBA,EAAkB1Y,GACrC2Y,yBAA0BA,EAAyB3Y,GACnD4Y,eAAgBA,EAAe5Y,GAC/B6Y,wBAAyBA,EAAwB7Y,GACjD8Y,aAAcA,EAAa9Y,GAC3B2P,WAAYA,EAAW3P,GACvB+Y,oBAAqBA,EAAoB/Y,GACzCgZ,UAAWA,EAAUhZ,GAE7B,KDhDMsb,ESZH,WACH,IAAMC,EAAU,IACZ,SAACvb,GAAqB,OAAAA,EAAMgC,IAAN,IACtB,SAAAiD,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNuW,EAAiB,GACnBD,GACA,SAAAA,GAAW,kBACT,OAAO9F,GAAM8F,KAAW,WAAM,WAAI,GAAiBpH,GAAqBG,YAA1C,GAChC,CAFW,IAKTwE,EAAe,IACjB,SAAC9Y,GAAqB,OAAAA,EAAM1C,OAAO8d,SAAb,IACtB,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPsb,EAAY,IACd,SAAChZ,GAAqB,QAAEA,EAAM6B,SAASmX,SAAjB,IACtB,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,GAEO,CACHub,QAASA,EAAQvb,GACjBwb,eAAgBA,EAAexb,GAC/B8Y,aAAcA,EAAa9Y,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,CTrB+Byb,GACrBC,GEXAzC,EAAW,IACb,SAACjZ,GAA+B,OAAAA,CAAA,IAChC,SAAAA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP4J,EAAiB,IACnB,SAAC5J,GAA+B,OAAAA,EAAM6B,QAAN,IAChC,SAAAA,GAAY,YAAA2T,UAAQ,SAAC/P,GACjB,GAAIA,EAAU,CACV,IAAM+Q,EAAS3U,EAAS4D,GAExB,OAA6C,KAArC+Q,GAAUA,EAAO5M,e,CAG7B,OAAO,IAAA+R,MAAK9Z,EAAU,CAAE+H,gBAAgB,GAC5C,GARY,IAWV9B,EAAgB,IAClB,SAAC9H,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAAAA,GAAQ,YAAAwT,UAAQ,SAAC/P,EAAoCE,GACjD,IAAM6Q,EAASxU,EAAKyD,GAEpB,QAAK+Q,IAIA7Q,GAIgD,IAA9C6Q,EAAOpR,sBAAsBO,IAHzB,IAAAgW,MAAKnF,EAAOpR,uBAAuB,SAAA0C,GAAiB,OAAkB,IAAlBA,CAAA,IAInE,GAZQ,IAeN+B,EAAmB,IACrB,SAAC7J,GAA+B,OAAAA,EAAM6B,QAAN,IAChC,SAAAA,GAAY,YAAA2T,UAAQ,SAAC/P,GACjB,GAAIA,EAAU,CACV,IAAM+Q,EAAS3U,EAAS4D,GAExB,OAA+C,KAAvC+Q,GAAUA,EAAO3M,iB,CAG7B,OAAO,IAAA8R,MAAK9Z,EAAU,CAAEgI,kBAAkB,GAC9C,GARY,IAWVqP,EAAqB,IACvB,SAAClZ,GAA+B,OAAAA,EAAM1C,MAAN,IAChC,SAAAA,GAAU,YAAAkY,UAAQ,SAAC/P,GACf,IAAM+Q,EAAS/Q,EACXnI,EAAOmI,IACP,IAAAmW,OAAK,IAAAC,QAAOve,IAAS,SAAAkZ,GAAU,SAAGA,IAAUA,EAAOvO,gBAApB,IAEnC,OAAOuO,GAAUA,EAAOvO,eAC5B,GANU,IASRkR,EAAuB,IACzB,SAACnZ,GAA+B,OAAAA,EAAM1C,MAAN,IAChC,SAAAA,GAAU,YAAAkY,UAAQ,SAAC/P,GACf,IAAM+Q,EAAS/Q,EACXnI,EAAOmI,IACP,IAAAmW,OAAK,IAAAC,QAAOve,IAAS,SAAAkZ,GAAU,SAAGA,IAAUA,EAAOnO,kBAApB,IAEnC,OAAOmO,GAAUA,EAAOnO,iBAC5B,GANU,KASP,KAAAgT,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,GAEO,CACHiZ,SAAUA,EAASjZ,GACnB4J,eAAgBA,EAAe5J,GAC/B8H,cAAeA,EAAc9H,GAC7B6J,iBAAkBA,EAAiB7J,GACnCkZ,mBAAoBA,EAAmBlZ,GACvCmZ,qBAAsBA,EAAqBnZ,GAEnD,KFrEM8b,EUCH,WAEH,IAAMC,EAAY,IACd,SAAC/b,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNga,EAAmB,IACrB,SAAChc,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAAAA,GAAQ,gBAACia,GACL,GAAKja,EAAL,CAIQ,IAAAka,EAAkBla,EAAKma,QAAO,cAEtC,GAAKD,EAIL,YAAsBxa,IAAfua,EACHC,EAAcjb,QAAO,SAAC,G,IAAEtE,EAAI,OAAO,OAAAsf,IAAetf,CAAf,IACnCuf,C,CACR,CAdQ,IAiBNE,EAAiB,IACnB,SAACpc,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACqa,EAAgB,G,IAAEC,EAAS,YAAmC,OAAAA,GAAaA,EAAUta,IAAvB,IAC/D,SAACA,EAAMua,GAAe,kBAAM,OAAAva,GAAQua,GAAc,gCAC3Cva,EAAKwa,aAAW,CACnBD,WAAU,SACT7a,CAHuB,CAAN,IAMpB+a,EAAwB,GAC1BL,GACA,SAAAA,GAAkB,kBAChB,OAAO3G,GAAM2G,KAAkB,WAAM,WAAI,GAAiBjI,GAAqBO,sBAA1C,GACvC,CAFkB,IAKhBgI,EAAmB,IACrB,SAAC1c,GAAuB,OAAAA,EAAMgC,MAAQhC,EAAMgC,KAAKma,OAAzB,IACxB,SAAAna,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGN2a,EAAoB,IACtB,SAAC3c,GAAuB,OAAAA,EAAMwF,MAAQxF,EAAMwF,KAAKoX,cAAzB,IACxB,SAAA5a,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGN6a,EAAU,IACZ,SAAC7c,GAAkB,aAAe,QAAf,EAAKA,EAAMwF,YAAI,eAAEsX,IAAI,IACxC,SAAA9a,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGN+a,EAAY,IACd,SAAC/c,GAAkB,aAAe,QAAf,EAAKA,EAAMwF,YAAI,eAAEwX,MAAM,IAC1C,SAAAhb,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNib,EAAgC,IAClC,SAACjd,GAAuB,OAAAA,EAAMwF,MAAQxF,EAAMwF,KAAK0X,0BAAzB,IACxB,SAAAlb,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGN8W,EAAe,IACjB,SAAC9Y,GAAuB,OAAAA,EAAM1C,OAAO8d,SAAb,IACxB,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPsb,EAAY,IACd,SAAChZ,GAAuB,QAAEA,EAAM6B,SAASmX,SAAjB,IACxB,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,EACAsc,GAEA,YAHA,IAAAtc,IAAAA,EAAA,IAGO,CACH+b,UAAWA,EAAU/b,GACrBgc,iBAAkBA,EAAiBhc,GACnCoc,eAAgBA,EAAepc,EAAO,CAAEsc,UAAS,IACjDG,sBAAuBA,EAAsBzc,EAAO,CAAEsc,UAAS,IAC/DI,iBAAkBA,EAAiB1c,GACnC2c,kBAAmBA,EAAkB3c,GACrC6c,QAASA,EAAQ7c,GACjB+c,UAAWA,EAAU/c,GACrBid,8BAA+BA,EAA8Bjd,GAC7D8Y,aAAcA,EAAa9Y,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,CVhGiCmd,GACvBC,EWlBH,WACH,IAAMC,EAAe,IACjB,SAACrd,GAAwB,OAAAA,EAAMgC,IAAN,IACzB,SAAAsb,GAAa,kBAAM,OAAAA,CAAA,CAAN,IAGXxE,EAAe,IACjB,SAAC9Y,GAAwB,OAAAA,EAAM1C,OAAO8d,SAAb,IACzB,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPsb,EAAY,IACd,SAAChZ,GAAwB,QAAEA,EAAM6B,SAASmX,SAAjB,IACzB,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHqd,aAAcA,EAAard,GAC3B8Y,aAAcA,EAAa9Y,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,CXPkCud,GACxBC,IGfApE,EAAa,IACf,SAACpZ,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNqX,EAAiB,IACnB,SAACrZ,GAAuB,OAAAA,EAAM1C,OAAOmgB,iBAAb,IACxB,SAAA/f,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP4b,EAAgB,IAClB,SAACtZ,GAAuB,OAAAA,EAAM1C,OAAOogB,gBAAb,IACxB,SAAAhgB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP6b,EAAa,IACf,SAACvZ,GAAuB,QAAEA,EAAM6B,SAAS8b,gBAAjB,IACxB,SAAAvgB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGRoc,EAAa,IACf,SAACxZ,GAAuB,QAAEA,EAAM6B,SAAS+b,gBAAjB,IACxB,SAAAxgB,GAAU,kBAAM,OAAAA,CAAA,CAAN,KAGP,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHoZ,WAAYA,EAAWpZ,GACvBqZ,eAAgBA,EAAerZ,GAC/BsZ,cAAeA,EAActZ,GAC7BuZ,WAAYA,EAAWvZ,GACvBwZ,WAAYA,EAAWxZ,GAE/B,KHnBM6d,IIdApE,EAAc,IAChB,SAACzZ,GAAyB,OAAAA,EAAMgC,IAAN,IAC1B,SAAAoF,GAAY,kBAAM,OAAAA,CAAA,CAAN,IAGVsS,EAAqB,GACvBD,GACA,SAAAA,GAAe,kBACX,OAAOhE,GAAMgE,KAAe,WAAM,WAAI,GAAiBtF,GAAqBM,gBAA1C,GACtC,CAFe,IAKbkF,EAAwB,IAC1B,SAAC3Z,GAAyB,OAAAA,EAAM1C,OAAOoB,WAAb,IAC1B,SAAAhB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPkc,EAA4B,IAC9B,SAAC5Z,GAAyB,QAAEA,EAAM6B,SAASic,UAAjB,IAC1B,SAAA1gB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGRyc,EAAwB,IAC1B,SAAC7Z,GAAyB,OAAAA,EAAM1C,OAAOygB,kBAAb,IAC1B,SAAArgB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPoc,EAA4B,IAC9B,SAAC9Z,GAAyB,QAAEA,EAAM6B,SAASmc,iBAAjB,IAC1B,SAAA5gB,GAAU,kBAAM,OAAAA,CAAA,CAAN,KAGP,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHyZ,YAAaA,EAAYzZ,GACzB0Z,mBAAoBA,EAAmB1Z,GACvC2Z,sBAAuBA,EAAsB3Z,GAC7C4Z,0BAA2BA,EAA0B5Z,GACrD6Z,sBAAuBA,EAAsB7Z,GAC7C8Z,0BAA2BA,EAA0B9Z,GAE7D,KJ5BMie,GYdH,WACH,IAAMC,EAAiB,IACnB,SAACle,GAAiC,OAAAA,EAAM1C,OAAOqL,cAAb,IAClC,SAAC3I,GAAiC,OAAAA,EAAM1C,OAAOoL,WAAb,IAClC,SAACC,EAAgBD,GAAgB,gBAACjD,GAC9B,IAAIA,GAAYkD,IAAmBlD,EAInC,OAAOiD,CACX,CANiC,IAS/ByV,EAAkB,IACpB,SAACne,GAAiC,OAAAA,EAAM1C,OAAO0L,eAAb,IAClC,SAAChJ,GAAiC,OAAAA,EAAM1C,OAAOyL,YAAb,IAClC,SAACC,EAAiBD,GAAiB,gBAACtD,GAChC,IAAIA,GAAYuD,IAAoBvD,EAIpC,OAAOsD,CACX,CANmC,IASjCqV,EAAuC,IACzC,SAACpe,GAAiC,OAAAA,EAAM1C,OAAO+L,oCAAb,IAClC,SAACrJ,GAAiC,OAAAA,EAAM1C,OAAO8L,iCAAb,IAClC,SAACC,EAAsCD,GAAsC,gBAAC3D,GAC1E,IAAIA,GAAY4D,IAAyC5D,EAIzD,OAAO2D,CACX,CAN6E,IAS3E8P,EAAqB,IACvB,SAAClZ,GAAiC,OAAAA,EAAM1C,OAAO4K,kBAAb,IAClC,SAAClI,GAAiC,OAAAA,EAAM1C,OAAO2K,eAAb,IAClC,SAACC,EAAoBD,GAAoB,gBAACxC,GACtC,IAAIA,GAAYyC,IAAuBzC,EAIvC,OAAOwC,CACX,CANyC,IASvCoW,EAA4B,IAC9B,SAACre,GAAiC,OAAAA,EAAM1C,OAAOoM,yBAAb,IAClC,SAAC1J,GAAiC,OAAAA,EAAM1C,OAAOmM,sBAAb,IAClC,SAACC,EAA2BD,GAA2B,gBAAChE,GACpD,IAAIA,GAAYiE,IAA8BjE,EAI9C,OAAOgE,CACX,CANuD,IASrDK,EAAc,IAChB,SAAC9J,GAAiC,OAAAA,EAAM6B,SAAS8G,cAAf,IAClC,SAAC3I,GAAiC,OAAAA,EAAM6B,SAASiI,WAAf,IAClC,SAACnB,EAAgBmB,GAAgB,gBAACrE,GAC9B,QAAIA,GAAYkD,IAAmBlD,IAI1BqE,EACb,CANiC,IAS/BC,EAAe,IACjB,SAAC/J,GAAiC,OAAAA,EAAM6B,SAASmH,eAAf,IAClC,SAAChJ,GAAiC,OAAAA,EAAM6B,SAASkI,YAAf,IAClC,SAACf,EAAiBe,GAAiB,gBAACtE,GAChC,QAAIA,GAAYuD,IAAoBvD,IAI3BsE,EACb,CANmC,IASjCC,EAAmC,IACrC,SAAChK,GAAiC,OAAAA,EAAM6B,SAASwH,oCAAf,IAClC,SAACrJ,GAAiC,OAAAA,EAAM6B,SAASmI,gCAAf,IAClC,SAACX,EAAsCW,GAAqC,gBAACvE,GACzE,QAAIA,GAAY4D,IAAyC5D,IAIhDuE,EACb,CAN4E,IAS1EJ,EAAiB,IACnB,SAAC5J,GAAiC,OAAAA,EAAM6B,SAASqG,kBAAf,IAClC,SAAClI,GAAiC,OAAAA,EAAM6B,SAAS+H,cAAf,IAClC,SAAC1B,EAAoB0B,GAAmB,gBAACnE,GACrC,QAAIA,GAAYyC,IAAuBzC,IAI9BmE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAC9H,GAAiC,OAAAA,EAAMgC,IAAN,IAClC,SAAAA,GAAQ,gBAACyD,GACL,SACIzD,EAAKyD,KACLzD,EAAKyD,GAAUqC,cAEvB,CALQ,IAQNmC,EAAsB,IACxB,SAACjK,GAAiC,OAAAA,EAAM6B,SAAS6H,yBAAf,IAClC,SAAC1J,GAAiC,OAAAA,EAAM6B,SAASoI,mBAAf,IAClC,SAACP,EAA2BO,GAAwB,gBAACxE,GACjD,QAAIA,GAAYiE,IAA8BjE,IAIrCwE,EACb,CANoD,IASxD,OAAO,KAAAoR,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHke,eAAgBA,EAAele,GAC/Bme,gBAAiBA,EAAgBne,GACjCoe,qCAAsCA,EAAqCpe,GAC3EkZ,mBAAoBA,EAAmBlZ,GACvCqe,0BAA2BA,EAA0Bre,GACrD8J,YAAaA,EAAY9J,GACzB+J,aAAcA,EAAa/J,GAC3BgK,iCAAkCA,EAAiChK,GACnE4J,eAAgBA,EAAe5J,GAC/B8H,cAAeA,EAAc9H,GAC7BiK,oBAAqBA,EAAoBjK,GAEjD,GACJ,CZtI2Cse,GACjCC,GalBH,WACH,IAAMC,EAAsB,IACxB,SAACxe,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNqX,EAAiB,IACnB,SAACrZ,GAAgC,OAAAA,EAAM1C,OAAOmhB,0BAAb,IACjC,SAAA/gB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP4b,EAAgB,IAClB,SAACtZ,GAAgC,OAAAA,EAAM1C,OAAOohB,yBAAb,IACjC,SAAAhhB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP6b,EAAa,IACf,SAACvZ,GAAgC,QAAEA,EAAM6B,SAAS8c,yBAAjB,IACjC,SAAAvhB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGRoc,EAAa,IACf,SAACxZ,GAAgC,QAAEA,EAAM6B,SAAS+c,yBAAjB,IACjC,SAAAxhB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHwe,oBAAqBA,EAAoBxe,GACzCqZ,eAAgBA,EAAerZ,GAC/BsZ,cAAeA,EAActZ,GAC7BuZ,WAAYA,EAAWvZ,GACvBwZ,WAAYA,EAAWxZ,GAE/B,GACJ,CbnB0C6e,GAChCC,GcZH,WACH,IAAMC,EAAgC,IAClC,SAAC/e,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAAgd,GAAe,gBAACC,GACZ,GAAKD,EAAL,CAIA,IAAME,EAAmBD,EAAcvS,QAAauS,EAAcvS,QAAO,IAAIuS,EAAcxb,GAAOwb,EAAcxb,GAE1G0b,EAAgB,GAAqBD,GAE3C,OAAKC,GAIE,IAAAle,QAA0B+d,EAAaG,GAHnC,E,CAIf,CAde,IAiBbC,EAAoB,IACtB,SAACpf,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACgd,GAAqB,YAArB,IAAAA,IAAAA,EAAA,IAAqB,SAAClQ,GACnB,IAAMuQ,GAAQ,IAAAxD,QAAO,IAErB,OAAOmD,aAAW,EAAXA,EAAapD,MAAK,SAAC0D,GACtB,OAAAA,EAAWC,cAAgBzQ,GACP,SAApBwQ,EAAW3iB,MACX0iB,EAAM1D,MAAK,SAAA6D,GAAQ,WAAAC,SAAQH,EAAYE,EAApB,GAFnB,GAIR,CARsB,IAWpBE,EAA2B,GAC7BN,GACA,SAAAA,GAAqB,gBAACtQ,GAClB,OAAO2G,GAAM2J,EAAkBtQ,IAAe,WAAM,WAAI,GAAiBqF,GAAqBwL,yBAA1C,GACxD,CAFqB,IAKnBC,EAAiB,IACnB,SAAC5f,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAAgd,GAAe,kBACX,GAAKA,EAUL,OANgC,IAAAa,SAAQ,IAAsB,SAAAC,GAC1D,WAAA7e,QAAO+d,GAAa,SAACM,GACjB,OAAO,IAAAG,SAAQH,EAAYQ,EAC/B,GAFA,GAMR,CAZe,IAebC,EAAqB,IACvB,SAAC/f,GAA2B,OAAAA,EAAMwF,IAAN,IAC5B,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNsT,EAAe,IACjB,SAAC9Y,GAA2B,OAAAA,EAAM1C,OAAO8d,SAAb,IAC5B,SAAAA,GAAa,kBAAM,OAAAA,CAAA,CAAN,IAGX4E,EAAiB,IACnB,SAAChgB,GAA2B,OAAAA,EAAM1C,OAAOqR,gBAAb,IAC5B,SAAC3O,GAA2B,OAAAA,EAAM1C,OAAOoR,WAAb,IAC5B,SAACC,EAAkBD,GAAgB,gBAACI,GAChC,IAAIA,GAAgBH,IAAqBG,EAIzC,OAAOJ,CACX,CANmC,IASjCsK,EAAY,IACd,SAAChZ,GAA2B,OAAAA,EAAM6B,SAASmX,SAAf,IAC5B,SAAAA,GAAa,kBAAM,QAAEA,CAAF,CAAN,IAGXjK,EAAa,IACf,SAAC/O,GAA2B,OAAAA,EAAM6B,SAASmN,kBAAf,IAC5B,SAAChP,GAA2B,OAAAA,EAAM6B,SAASkN,UAAf,IAC5B,SAACC,EAAoBD,GAAe,gBAACD,GACjC,QAAIA,GAAgBE,IAAuBF,IAIlCC,EACb,CANoC,IASxC,OAAO,KAAAsM,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHof,kBAAmBA,EAAkBpf,GACrC0f,yBAA0BA,EAAyB1f,GACnD4f,eAAgBA,EAAe5f,GAC/B+e,8BAA+BA,EAA8B/e,GAC7D+f,mBAAoBA,EAAmB/f,GACvC8Y,aAAcA,EAAa9Y,GAC3BggB,eAAgBA,EAAehgB,GAC/BgZ,UAAWA,EAAUhZ,GACrB+O,WAAYA,EAAW/O,GAE/B,GACJ,CdnGqCigB,GAC3BC,GepBH,WACH,IAAMC,EAA2B,IAC7B,SAACngB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAAua,GAAc,gBAACe,EAA2BlF,QAA3B,IAAAkF,IAAAA,EAAA,IACX,IAAM8C,GAAkB,IAAAxE,MAAK0B,EAAW,CAAEjf,KAAM+Z,IAGhD,OAFemE,EAAaA,EAAW8D,gBAAkB,IAE3CjiB,KAAI,SAACkiB,GAAe,OAAAC,EAAaD,EAAOhD,EAAW8C,EAA/B,GACtC,CALc,IAQZI,EAA0B,IAC5B,SAACxgB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAAua,GAAc,gBAACe,EAA2BlF,QAA3B,IAAAkF,IAAAA,EAAA,IACX,IAAM8C,GAAkB,IAAAxE,MAAK0B,EAAW,CAAEjf,KAAM+Z,IAGhD,OAFemE,EAAaA,EAAW7Z,eAAiB,IAE1CtE,KAAI,SAACkiB,GAAe,OAAAC,EAAaD,EAAOhD,EAAW8C,EAA/B,GACtC,CALc,IAQZK,EAA2B,IAC7B,SAACzgB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAAua,GAAc,kBAAM,OAAAA,EAAaA,EAAWmE,gBAAkB,EAA1C,CAAN,IAGZ5H,EAAe,IACjB,SAAC9Y,GAA2B,OAAAA,EAAM1C,OAAO8d,SAAb,IAC5B,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPsb,EAAY,IACd,SAAChZ,GAA2B,QAAEA,EAAM6B,SAASmX,SAAjB,IAC5B,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,SAASmjB,EAAaD,EAAkBhD,EAAsB8C,GAC1D,MAAmB,gBAAfE,EAAM5jB,KAed,SAAwB4jB,EAAkBhD,EAA2BqD,GACjE,QADsC,IAAArD,IAAAA,EAAA,KACjCA,EAAUnf,OACX,OAAOmiB,EAGH,OAAcK,GAAW,CAAC,GAAC,KAA3BtiB,OAAI,IAAG,KAAE,EACXuiB,EAAQtD,EAAUlf,KAAI,SAAC,GAAwB,OACjD9B,MAD+B,OAE/BukB,MAFqC,OAAY,IAKrD,OAAO,gCACAP,GAAK,CACR9f,QAAS,CAAEogB,MAAK,GAChBhiB,QAASP,EACT1B,KAAM,QACNmkB,UAAW,WACXC,SAAU,UAElB,CAjCeC,CAAeV,EAAOhD,EAAW8C,GAGzB,oBAAfE,EAAM5jB,KAgCd,SAAyB4jB,EAAkBK,GACjC,MAAuCA,GAAW,CAAC,EAAjD,IAAAM,aAAAA,OAAY,IAAG,KAAE,EAAEC,EAAa,gBAExC,IAAKD,EAAa9iB,OACd,OAAO,gCACAmiB,GAAK,CACRa,SAA2B,MAAjBD,GAAgCA,IAIlD,IAAMN,EAAQK,EAAa7iB,KAAI,SAAC,GAAwB,OACpD9B,MADkC,OAElCukB,MAFwC,OAAY,IAKxD,OAAO,gCACAP,GAAK,CACR5jB,KAAM,sBACN8D,QAAS,CAAEogB,MAAK,GAChBO,SAA2B,MAAjBD,GAA+BA,EACzCvkB,KAAM,QACNmkB,UAAW,WACXC,SAAU,UAElB,CAvDeK,CAAgBd,EAAOF,GAGf,eAAfE,EAAM5jB,KAsDd,SAA0B4jB,EAAkBK,GAChC,OAAwBA,GAAW,CAAC,GAAC,eAArCU,OAAc,IAAG,KAAE,EAE3B,YAAuB3f,IAAnB2f,EACOf,GAGJ,gCAAKA,GAAK,CAAEa,SAAUG,QAAQD,IACzC,CA7DeE,CAAiBjB,EAAOF,GAG5BE,CACX,CA2DA,OAAO,KAAAjF,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHmgB,yBAA0BA,EAAyBngB,GACnDwgB,wBAAyBA,EAAwBxgB,GACjDygB,yBAA0BA,EAAyBzgB,GACnD8Y,aAAcA,EAAa9Y,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,CfpG+BwhB,GACrBC,GgBhBH,WACH,IAAMC,EAAoB,IACtB,SAAC1hB,GAA8B,OAAAA,EAAMgC,IAAN,IAC/B,SAAA2f,GAAkB,kBAAM,OAAAA,CAAA,CAAN,IAGhBC,EAAwB,IAC1B,SAAC5hB,GAA8B,OAAAA,EAAMwF,IAAN,IAC/B,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNqc,EAAmB,IACrB,SAAC7hB,GAA8B,OAAAA,EAAMgC,IAAN,IAC/B,SAAA2f,GAAkB,gBAAClc,EAAkBqc,GACjC,OAAOA,GACH,IAAAlG,MAAK+F,EAAgB,CAAEle,GAAIgC,EAAUiH,QAASoV,KAC9C,IAAAlG,MAAK+F,EAAgB,CAAEle,GAAIgC,GACnC,CAJkB,IAOhBsc,EAA0B,GAC5BF,GACA,SAAAA,GAAoB,gBAACpc,EAAkBqc,GACnC,OAAOrM,GAAMoM,EAAiBpc,EAAUqc,IAAY,WAAM,WAAI,GAAiB3N,GAAqBa,qBAA1C,GAC9D,CAFoB,IAKlB8D,EAAe,IACjB,SAAC9Y,GAA8B,OAAAA,EAAM1C,OAAO8d,SAAb,IAC/B,SAAAA,GAAa,kBAAM,OAAAA,CAAA,CAAN,IAGX4G,EAAqB,IACvB,SAAChiB,GAA8B,OAAAA,EAAM1C,OAAO2P,YAAb,IAC/B,SAACjN,GAA8B,OAAAA,EAAM1C,OAAO4P,eAAb,IAC/B,SAACD,EAAcC,GAAoB,gBAACzH,GAChC,IAAIA,GAAYwH,IAAiBxH,EAIjC,OAAOyH,CACX,CANmC,IASjC8L,EAAY,IACd,SAAChZ,GAA8B,OAAAA,EAAM6B,SAASmX,SAAf,IAC/B,SAAAA,GAAa,kBAAM,QAAEA,CAAF,CAAN,IAGX5L,EAAkB,IACpB,SAACpN,GAA8B,OAAAA,EAAM6B,SAASoL,YAAf,IAC/B,SAACjN,GAA8B,OAAAA,EAAM6B,SAASuL,eAAf,IAC/B,SAACH,EAAcG,GAAoB,gBAAC3H,GAChC,QAAIA,GAAYwH,IAAiBxH,IAIxB2H,EACb,CANmC,IASvC,OAAO,KAAAiO,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACH0hB,kBAAmBA,EAAkB1hB,GACrC4hB,sBAAuBA,EAAsB5hB,GAC7C6hB,iBAAkBA,EAAiB7hB,GACnC+hB,wBAAyBA,EAAwB/hB,GACjD8Y,aAAcA,EAAa9Y,GAC3BgiB,mBAAoBA,EAAmBhiB,GACvCgZ,UAAWA,EAAUhZ,GACrBoN,gBAAiBA,EAAgBpN,GAEzC,GACJ,ChB3DwCiiB,GAC9BC,GiBrBH,WACH,IAAMhJ,EAAqB,IACvB,SAAClZ,GAAgC,OAAAA,EAAM1C,OAAO4K,kBAAb,IACjC,SAAClI,GAAgC,OAAAA,EAAM1C,OAAO2K,eAAb,IACjC,SAACC,EAAoBD,GAAoB,gBAACxC,GACtC,IAAIA,GAAYyC,IAAuBzC,EAIvC,OAAOwC,CACX,CANyC,IASvCka,EAAkB,IACpB,SAACniB,GAAgC,OAAAA,EAAM1C,OAAOoQ,eAAb,IACjC,SAAC1N,GAAgC,OAAAA,EAAM1C,OAAOmQ,YAAb,IACjC,SAACC,EAAiBD,GAAiB,gBAAChI,GAChC,IAAIA,GAAYiI,IAAoBjI,EAIpC,OAAOgI,CACX,CANmC,IASjC2U,EAAmB,IACrB,SAACpiB,GAAgC,OAAAA,EAAM1C,OAAOyQ,gBAAb,IACjC,SAAC/N,GAAgC,OAAAA,EAAM1C,OAAOwQ,aAAb,IACjC,SAACC,EAAkBD,GAAkB,gBAACrI,GAClC,IAAIA,GAAYsI,IAAqBtI,EAIrC,OAAOqI,CACX,CANqC,IASnCuU,EAA4B,IAC9B,SAACriB,GAAgC,OAAAA,EAAM1C,OAAOoM,yBAAb,IACjC,SAAC1J,GAAgC,OAAAA,EAAM1C,OAAOmM,sBAAb,IACjC,SAACC,EAA2BD,GAA2B,gBAAChE,GACpD,IAAIA,GAAYiE,IAA8BjE,EAI9C,OAAOgE,CACX,CANuD,IASrDG,EAAiB,IACnB,SAAC5J,GAAgC,OAAAA,EAAM6B,SAASqG,kBAAf,IACjC,SAAClI,GAAgC,OAAAA,EAAM6B,SAAS+H,cAAf,IACjC,SAAC1B,EAAoB0B,GAAmB,gBAACnE,GACrC,QAAIA,GAAYyC,IAAuBzC,IAI9BmE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAC9H,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAAAA,GAAQ,gBAACyD,GACL,SACIzD,EAAKyD,KACLzD,EAAKyD,GAAUqC,cAEvB,CALQ,IAQNmG,EAAc,IAChB,SAACjO,GAAgC,OAAAA,EAAM6B,SAAS6L,eAAf,IACjC,SAAC1N,GAAgC,OAAAA,EAAM6B,SAASoM,WAAf,IACjC,SAACP,EAAiBO,GAAgB,gBAACxI,GAC/B,QAAIA,GAAYiI,IAAoBjI,IAI3BwI,EACb,CANkC,IAShCC,EAAe,IACjB,SAAClO,GAAgC,OAAAA,EAAM6B,SAASkM,gBAAf,IACjC,SAAC/N,GAAgC,OAAAA,EAAM6B,SAASqM,YAAf,IACjC,SAACH,EAAkBG,GAAiB,gBAACzI,GACjC,QAAIA,GAAYsI,IAAqBtI,IAI5ByI,EACb,CANoC,IASlCjE,EAAsB,IACxB,SAACjK,GAAgC,OAAAA,EAAM6B,SAAS6H,yBAAf,IACjC,SAAC1J,GAAgC,OAAAA,EAAM6B,SAASoI,mBAAf,IACjC,SAACP,EAA2BO,GAAwB,gBAACxE,GACjD,QAAIA,GAAYiE,IAA8BjE,IAIrCwE,EACb,CANoD,IASxD,OAAO,KAAAoR,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHkZ,mBAAoBA,EAAmBlZ,GACvCmiB,gBAAiBA,EAAgBniB,GACjCoiB,iBAAkBA,EAAiBpiB,GACnCqiB,0BAA2BA,EAA0BriB,GACrD4J,eAAgBA,EAAe5J,GAC/B8H,cAAeA,EAAc9H,GAC7BiO,YAAaA,EAAYjO,GACzBkO,aAAcA,EAAalO,GAC3BiK,oBAAqBA,EAAoBjK,GAEjD,GACJ,CjBrG0CsiB,GAChCC,GkB1BH,WACH,IAAMC,EAAmB,IACrB,SAACxiB,GAA6B,OAAAA,EAAMgC,IAAN,IAC9B,SAAAygB,GAAiB,gBAACjR,EAAuBC,GACrC,GAAKgR,EAAL,CAGA,IACMC,EAAwB1R,GADNN,GAAc,CAAEc,cAAa,EAAEC,WAAU,KAE3DX,EAAYY,KAAK,GAAGC,KAAKC,UAAU8Q,IAEzC,OAAOD,EAAc3R,E,CACzB,CATiB,IAYfgI,EAAe,IACjB,SAAC9Y,GAA6B,OAAAA,EAAM1C,OAAO8d,SAAb,IAC9B,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPsb,EAAY,IACd,SAAChZ,GAA6B,QAAEA,EAAM6B,SAASmX,SAAjB,IAC9B,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHwiB,iBAAkBA,EAAiBxiB,GACnC8Y,aAAcA,EAAa9Y,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,ClBRuC2iB,GAC7BC,IK5BA7I,EAAc,IAChB,SAAC/Z,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAAAA,GAAQ,gBAAkDyD,GACtD,OAAOzD,EAAKyD,EAChB,CAFQ,KAKL,KAAA4V,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACH+Z,YAAaA,EAAY/Z,GAEjC,KLgBM6iB,IM3BA7I,EAAqB,IACvB,SAACha,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAA8N,GAAgB,kBACZ,IAAMgT,EAAsBhT,aAAY,EAAZA,EAAc8L,MAAK,SAAAmH,GAAe,OAACA,EAAYC,oBAAb,IAE9D,OAAOF,aAAmB,EAAnBA,EAAqBzC,eAChC,CAJgB,IAOdpG,EAA4B,GAC9BD,GACA,SAAAA,GAAsB,kBAClB,OAAOvE,GAAMuE,KAAsB,WAAM,WAAI,GAAiB7F,GAAqBc,uBAA1C,GAC7C,CAFsB,KAKnB,KAAAoG,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHga,mBAAoBA,EAAmBha,GACvCia,0BAA2BA,EAA0Bja,GAE7D,KNKMijB,GmB9BH,WACH,IAAMC,EAAuB,IACzB,SAACljB,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGN8W,EAAe,IACjB,SAAC9Y,GAAgC,OAAAA,EAAM1C,OAAO8d,SAAb,IACjC,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPsb,EAAY,IACd,SAAChZ,GAAgC,OAAAA,EAAM6B,SAASmX,SAAf,IACjC,SAAA5b,GAAU,kBAAM,QAAEA,CAAF,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHkjB,qBAAsBA,EAAqBljB,GAC3C8Y,aAAcA,EAAa9Y,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,CnBK0CmjB,GAChCC,GoB1BH,WACH,IAAMC,EAAwB,IAC1B,SAACrjB,GAAiC,OAAAA,EAAM1C,OAAOmV,qBAAb,IAClC,SAACzS,GAAiC,OAAAA,EAAM1C,OAAOkV,kBAAb,IAClC,SAACC,EAAuBD,GAAuB,gBAAC/M,GAC5C,IAAIA,GAAYgN,IAA0BhN,EAI1C,OAAO+M,CACX,CAN+C,IAS7C8Q,EAAuB,IACzB,SAACtjB,GAAiC,OAAAA,EAAM1C,OAAOwV,oBAAb,IAClC,SAAC9S,GAAiC,OAAAA,EAAM1C,OAAOuV,iBAAb,IAClC,SAACC,EAAsBD,GAAsB,gBAACpN,GAC1C,IAAIA,GAAYqN,IAAyBrN,EAIzC,OAAOoN,CACX,CAN6C,IAS3CqG,EAAqB,IACvB,SAAClZ,GAAiC,OAAAA,EAAM1C,OAAO4K,kBAAb,IAClC,SAAClI,GAAiC,OAAAA,EAAM1C,OAAO2K,eAAb,IAClC,SAACC,EAAoBD,GAAoB,gBAACxC,GACtC,IAAIA,GAAYyC,IAAuBzC,EAIvC,OAAOwC,CACX,CANyC,IASvCoW,EAA4B,IAC9B,SAACre,GAAiC,OAAAA,EAAM1C,OAAOoM,yBAAb,IAClC,SAAC1J,GAAiC,OAAAA,EAAM1C,OAAOmM,sBAAb,IAClC,SAACC,EAA2BD,GAA2B,gBAAChE,GACpD,IAAIA,GAAYiE,IAA8BjE,EAI9C,OAAOgE,CACX,CANuD,IASrDuJ,EAAoB,IACtB,SAAChT,GAAiC,OAAAA,EAAM6B,SAAS4Q,qBAAf,IAClC,SAACzS,GAAiC,OAAAA,EAAM6B,SAASmR,iBAAf,IAClC,SAACP,EAAuBO,GAAsB,gBAACvN,GAC3C,QAAIA,GAAYgN,IAA0BhN,IAIjCuN,EACb,CAN8C,IAS5CC,EAAoB,IACtB,SAACjT,GAAiC,OAAAA,EAAM6B,SAASiR,oBAAf,IAClC,SAAC9S,GAAiC,OAAAA,EAAM6B,SAASoR,iBAAf,IAClC,SAACH,EAAsBG,GAAsB,gBAACxN,GAC1C,QAAIA,GAAYqN,IAAyBrN,IAIhCwN,EACb,CAN6C,IAS3CrJ,EAAiB,IACnB,SAAC5J,GAAiC,OAAAA,EAAM6B,SAASqG,kBAAf,IAClC,SAAClI,GAAiC,OAAAA,EAAM6B,SAAS+H,cAAf,IAClC,SAAC1B,EAAoB0B,GAAmB,gBAACnE,GACrC,QAAIA,GAAYyC,IAAuBzC,IAI9BmE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAC9H,GAAiC,OAAAA,EAAMgC,IAAN,IAClC,SAAAA,GAAQ,gBAACyD,GACL,SACIzD,EAAKyD,KACLzD,EAAKyD,GAAUqC,cAEvB,CALQ,IAQNmC,EAAsB,IACxB,SAACjK,GAAiC,OAAAA,EAAM6B,SAAS6H,yBAAf,IAClC,SAAC1J,GAAiC,OAAAA,EAAM6B,SAASoI,mBAAf,IAClC,SAACP,EAA2BO,GAAwB,gBAACxE,GACjD,QAAIA,GAAYiE,IAA8BjE,IAIrCwE,EACb,CANoD,IASxD,OAAO,KAAAoR,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHqjB,sBAAuBA,EAAsBrjB,GAC7CsjB,qBAAsBA,EAAqBtjB,GAC3CkZ,mBAAoBA,EAAmBlZ,GACvCqe,0BAA2BA,EAA0Bre,GACrDgT,kBAAmBA,EAAkBhT,GACrCiT,kBAAmBA,EAAkBjT,GACrC4J,eAAgBA,EAAe5J,GAC/B8H,cAAeA,EAAc9H,GAC7BiK,oBAAqBA,EAAoBjK,GAEjD,GACJ,CpBhG2CujB,GACjCC,GqBFH,WACH,IAAMC,EAAkB,IACpB,SAACzjB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAA8N,GAAgB,kBAAM,OAAAA,CAAA,CAAN,IAGd4T,EAAyB,GAC3BD,GACA,SAAAA,GAAmB,kBACf,OAAOhO,GAAMgO,KAAmB,WAAM,WAAI,GAAiBtP,GAAqBI,oBAA1C,GAC1C,CAFmB,IAKjBoP,EAAqB,IACvB,SAAC3jB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAA8N,GAAgB,gBAACrM,GACb,GAAKqM,GAAiBA,EAAa3R,OAInC,OAAO,IAAAyd,MAAK9L,EAAc,CAAErM,GAAE,GAClC,CANgB,IASdmgB,EAA0B,IAC5B,SAAC5jB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAA8N,GAAgB,gBAAC8H,GACb,GAAK9H,GAAiBA,EAAa3R,OAInC,OAAO,IAAAyd,MAAK9L,GAAc,SAAAiT,GACtB,OvBzEuBc,EuByERd,EAAY1C,gBvBzEwByD,EuByEPlM,GvBxEjD,IAAAvX,SAAQsX,GAAUkM,GAAWlM,GAAUmM,IADnC,IAAwBD,EAA4BC,CuByEnD,GAER,CARgB,IAWdC,EAAoB,IACtB,SAAC/jB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAA8N,GAAgB,kBACZ,GAAIA,GAAgBA,EAAa3R,OAC7B,OAAO2R,EAAa,GAAGkU,sBAE/B,CAJgB,IAOdlL,EAAe,IACjB,SAAC9Y,GAA4B,OAAAA,EAAM1C,OAAO8d,SAAb,IAC7B,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPumB,EAAiB,IACnB,SAACjkB,GAA4B,OAAAA,EAAM1C,OAAOoB,WAAb,IAC7B,SAAAhB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPwmB,EAA8B,IAChC,SAAClkB,GAA4B,OAAAA,EAAM1C,OAAO6mB,wBAAb,IAC7B,SAAAzmB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP0mB,EAAqB,GACvBX,GACA,SAACpH,EAAqB,GAA8C,OAAxC,OAA6Cd,OAAL,IACpE,SAACkI,EAAiBlI,GAAY,kBAC1B,IAAMtW,EAAOsW,IAEb,IAAKtW,EACD,MAAO,GAGX,IAAMof,GAAuBZ,KAAqB,IAAIjmB,QAClD,SAAC8mB,EAASvB,GAAgB,OAAAuB,EAAQC,OAAOxB,EAAYyB,YAA3B,GAC1B,IAGJ,OAAQvf,EAAKwf,UAAUC,eAAiB,IAAIzjB,QACxC,SAAAiL,GAAQ,OAAAmY,EAAoBM,QAAQzY,EAAKzI,IAAgB,CAAjD,GAEhB,CAf8B,IAkB5BmV,EAAiB,IACnB,SAAC5Y,GAA4B,OAAAA,EAAM1C,OAAOoS,WAAb,IAC7B,SAAAA,GAAe,gBAAC8B,GACZ,OAAIA,EACO9B,EAAY8B,IAGhB,IAAAoK,MAAKlM,EAChB,CANe,IASbsQ,EAAiB,IACnB,SAAChgB,GAA4B,OAAAA,EAAM1C,OAAOoR,WAAb,IAC7B,SAAAA,GAAe,gBAAC8C,GACZ,OAAIA,EACO9C,EAAY8C,IAGhB,IAAAoK,MAAKlN,EAChB,CANe,IASbkW,EAAyB,GAC3BhB,EACAhL,EACAqL,GACA,SAACL,EAAyBhL,EAAgBqL,GAAmB,gBAACrM,GAC1D,IAAMmL,EAAca,EAAwBhM,GAE5C,OAAOmL,EAAcnK,EAAemK,EAAYtf,IAAMwgB,GAC1D,CAJ6D,IAO3DY,EAA+B,IACjC,SAAC7kB,GAA4B,OAAAA,EAAM1C,OAAOmS,yBAAb,IAC7B,SAAAA,GAA6B,gBAAC+B,GAC1B,OAAIA,EACO/B,EAA0B+B,IAG9B,IAAAoK,MAAKnM,EAChB,CAN6B,IAS3BuJ,EAAY,IACd,SAAChZ,GAA4B,OAAAA,EAAM6B,SAASmX,SAAf,IAC7B,SAAAA,GAAa,kBAAM,OAAc,IAAdA,CAAA,CAAN,IAGX8L,EAA2B,IAC7B,SAAC9kB,GAA4B,OAAAA,EAAM6B,SAASijB,wBAAf,IAC7B,SAAAA,GAA4B,kBAAM,OAA6B,IAA7BA,CAAA,CAAN,IAG1BhH,EAAa,IACf,SAAC9d,GAA4B,OAAAA,EAAM6B,SAASic,UAAf,IAC7B,SAAAA,GAAc,kBAAM,OAAe,IAAfA,CAAA,CAAN,IAGZnO,EAAa,IACf,SAAC3P,GAA4B,OAAAA,EAAM6B,SAAS8N,UAAf,IAC7B,SAAAA,GAAc,gBAAC6B,GACX,OAAIA,GACqC,IAA9B7B,EAAW6B,IAGM,KAArB,IAAAoK,MAAKjM,EAChB,CANc,IASZZ,EAAa,IACf,SAAC/O,GAA4B,OAAAA,EAAM6B,SAASkN,UAAf,IAC7B,SAAAA,GAAc,gBAACyC,GACX,OAAIA,GACqC,IAA9BzC,EAAWyC,IAGM,KAArB,IAAAoK,MAAK7M,EAChB,CANc,IASZgW,EAAmB,GACrBnB,EACAjU,EACAmO,GACA,SAAC8F,EAAyBjU,EAAYmO,GAAe,gBAAClG,GAClD,IAAMmL,EAAca,EAAwBhM,GAE5C,OAAOmL,EAAcpT,EAAWoT,EAAYtf,IAAMqa,GACtD,CAJqD,IAOnDlO,EAA2B,IAC7B,SAAC5P,GAA4B,OAAAA,EAAM6B,SAAS+N,wBAAf,IAC7B,SAAAA,GAA4B,gBAAC4B,GACzB,OAAIA,GACmD,IAA5C5B,EAAyB4B,IAGM,KAAnC,IAAAoK,MAAKhM,EAChB,CAN4B,IAShC,OAAO,KAAAyL,aAAW,SACdrb,EACAiF,GAEA,YAHA,IAAAjF,IAAAA,EAAA,IAGO,CACHyjB,gBAAiBA,EAAgBzjB,GACjC0jB,uBAAwBA,EAAuB1jB,GAC/C2jB,mBAAoBA,EAAmB3jB,GACvC4jB,wBAAyBA,EAAwB5jB,GACjD+jB,kBAAmBA,EAAkB/jB,GACrC8Y,aAAcA,EAAa9Y,GAC3BikB,eAAgBA,EAAejkB,GAC/BkkB,4BAA6BA,EAA4BlkB,GACzDokB,mBAAoBA,EAAmBpkB,EAAO,CAAEiF,KAAI,IACpD2T,eAAgBA,EAAe5Y,GAC/BggB,eAAgBA,EAAehgB,GAC/B4kB,uBAAwBA,EAAuB5kB,GAC/C6kB,6BAA8BA,EAA6B7kB,GAC3DgZ,UAAWA,EAAUhZ,GACrB8kB,yBAA0BA,EAAyB9kB,GACnD8d,WAAYA,EAAW9d,GACvB2P,WAAYA,EAAW3P,GACvB+O,WAAYA,EAAW/O,GACvB+kB,iBAAkBA,EAAiB/kB,GACnC4P,yBAA0BA,EAAyB5P,GAE3D,GACJ,CrBlNsCglB,GAC5BC,GsBJH,WACH,IAAMlL,EAAc,IAChB,SAAC/Z,GAAyB,OAAAA,EAAMgC,IAAN,IAC1B,SAACqa,EAAkB,GAAqD,OAArC,iBAAoD3D,iBAAf,IACxE,SAAC2D,EAAkB,GAA2C,OAArC,OAA0Cd,OAAL,IAC9D,SAACc,EAAkB,GAA+C,OAArC,WAA8C5C,WAAT,IAClE,SAAC4C,EAAkB,GAAmD,OAArC,eAAkDoH,eAAb,IACtE,SAACpH,EAAkB,GAA8C,OAArC,UAA6CjD,UAAR,IACjE,SAACiD,EAAkB,GAAuD,OAArC,mBAAsDmC,mBAAjB,IAC1E,SAACxc,EAAM0W,EAAmB6C,EAAS9B,EAAagK,EAAiBrK,EAAYoF,GAAwB,kBACjG,IAAM9b,EAAiBgW,IACjBzT,EAAOsW,IACPnU,EAAWqS,IACX3J,EAAe2T,KAAqB,GACpCnd,EAAU8S,KAAgB,GAC1BvS,EAAmB2X,KAAyB,GAElD,GAAKxc,GAASiD,GAASmC,EAIvB,OAAO,gCACApF,GAAI,CACPU,eAAc,EACduC,KAAI,EACJmC,SAAQ,EACR0I,aAAY,EACZxJ,QAAO,EACPO,iBAAgB,GAExB,CArBqG,IAwBnGqe,EAAqB,GACvBnL,GACA,SAAAA,GAAe,kBACX,OAAOtE,GAAMsE,KAAe,WAAM,WAAI,GAAiB5F,GAAqBK,gBAA1C,GACtC,CAFe,IAKb2Q,EAAwB,GAC1BpL,GACA,SAAAA,GAAe,gBAACqL,GACZ,IAAMC,EAAWtL,IAEjB,GAAKsL,EAAL,CAIA,IAAMC,EAAaD,EAASC,YAAc,EACpCC,EAAcF,EAASje,SAASme,aAAe,EAErD,OAAOH,EAAiBI,KAAKC,IAAIH,EAAaC,EAAa,GAAKF,EAASK,kB,CAC7E,CAXe,IAcb5M,EAAe,IACjB,SAAC9Y,GAAyB,OAAAA,EAAM1C,OAAO8d,SAAb,IAC1B,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPkb,EAAiB,IACnB,SAAC5Y,GAAyB,OAAAA,EAAM1C,OAAOoS,WAAb,IAC1B,SAAAhS,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPioB,EAAuB,IACzB,SAAC3lB,GAAyB,OAAAA,EAAM6B,SAAS8jB,oBAAf,IAC1B,SAAAA,GAAwB,kBAAM,OAAyB,IAAzBA,CAAA,CAAN,IAGtB3M,EAAY,IACd,SAAChZ,GAAyB,OAAAA,EAAM6B,SAASmX,SAAf,IAC1B,SAAAA,GAAa,kBAAM,OAAc,IAAdA,CAAA,CAAN,IAGXrJ,EAAa,IACf,SAAC3P,GAAyB,OAAAA,EAAM6B,SAAS8N,UAAf,IAC1B,SAAAA,GAAc,kBAAM,OAAe,IAAfA,CAAA,CAAN,IAGlB,OAAO,KAAA0L,aAAW,SACdrb,EACA0C,EACAuC,EACA6K,EACAxJ,EACAc,EACAP,GAEA,YARA,IAAA7G,IAAAA,EAAA,IAQO,CACH+Z,YAAaA,EAAY/Z,EAAO,CAC5B0C,eAAc,EACduC,KAAI,EACJ6K,aAAY,EACZxJ,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpBqe,mBAAoBA,EAAmBllB,EAAO,CAC1C0C,eAAc,EACduC,KAAI,EACJ6K,aAAY,EACZxJ,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpBse,sBAAuBA,EAAsBnlB,EAAO,CAChD0C,eAAc,EACduC,KAAI,EACJ6K,aAAY,EACZxJ,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpBiS,aAAcA,EAAa9Y,GAC3B4Y,eAAgBA,EAAe5Y,GAC/B2lB,qBAAsBA,EAAqB3lB,GAC3CgZ,UAAWA,EAAUhZ,GACrB2P,WAAYA,EAAW3P,GAE/B,GACJ,CtBtHmC4lB,GACzBC,GuBlBH,WACH,IAAMC,EAAW,IACb,SAAC9lB,GAAsB,OAAAA,EAAMgC,IAAN,IACvB,SAACqa,EAAe,GAAkD,OAAlC,iBAAiD3D,mBAAf,IAClE,SAAC2D,EAAe,GAA2C,OAAlC,UAA0CjD,YAAR,IAC3D,SAACpX,EAAMU,EAAgB4D,GAAiB,YAAjB,IAAAA,IAAAA,EAAA,IAAiB,WACpC,GAAKtE,GAASU,EAId,OAAO,gCACAV,GAAI,CACPU,eAAc,EACd4D,QAAO,GAEf,CAVwC,IAatCyf,EAAkB,GACpBD,GACA,SAAAA,GAAY,kBACR,OAAOrQ,GAAMqQ,KAAY,WAAM,WAAI,GAAiB3R,GAAqBS,aAA1C,GACnC,CAFY,IAKVoR,EAAe,IACjB,SAAChmB,GAAsB,OAAAA,EAAMwF,IAAN,IACvB,SAAAA,GAAQ,kBAAM,OAAAA,CAAA,CAAN,IAGNsT,EAAe,IACjB,SAAC9Y,GAAsB,OAAAA,EAAM1C,OAAO8d,SAAb,IACvB,SAAA1d,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP2c,EAAe,IACjB,SAACra,GAAiB,aAAe,QAAf,EAAKA,EAAMgC,YAAI,eAAEikB,QAAQ,IAC3C,SAACA,GAAkB,YAAlB,IAAAA,IAAAA,EAAA,IAAkB,SAACxgB,GAChB,IAAMygB,EAAiBD,EAASrK,MAAK,SAAC,GAAmB,OAAP,eAAsBnW,CAAf,IAEzD,OAAOygB,aAAc,EAAdA,EAAgBC,SAC3B,CAJmB,IAOjBnN,EAAY,IACd,SAAChZ,GAAsB,QAAEA,EAAM6B,SAASmX,SAAjB,IACvB,SAAA5b,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,EACA0C,EACA4D,GAEA,YAJA,IAAAtG,IAAAA,EAAA,IAIO,CACH8lB,SAAUA,EAAS9lB,EAAO,CAAE0C,eAAc,EAAE4D,QAAO,IACnDyf,gBAAiBA,EAAgB/lB,EAAO,CAAE0C,eAAc,EAAE4D,QAAO,IACjE0f,aAAcA,EAAahmB,GAC3B8Y,aAAcA,EAAa9Y,GAC3Bqa,aAAcA,EAAara,GAC3BgZ,UAAWA,EAAUhZ,GAE7B,GACJ,CvB7CgComB,GACtBC,IObAnM,EAAqB,IACvB,SAAC,GAA2C,OAApC,QAA0C8L,YAAN,IAC5C,SAAAA,GAAgB,kBACZ,IAAMxgB,EAAOwgB,IAEb,OAAOxgB,GAAQA,EAAK+F,OACxB,CAJgB,IAOd4O,EAAoB,IACtB,SAAC,GAA2C,OAApC,QAA0C2L,QAAN,IAC5C,SAAAA,GAAY,kBACR,IAAM1a,EAAQ0a,IAEd,OAAO,IAAAlK,MAAKxQ,GAASA,EAAM6a,UAAU,SAAC,G,IAAEK,EAAU,aAC9C,MAAe,oBAAfA,GAAmD,gBAAfA,CAApC,GAER,CANY,IASVlM,EAAmB,IACrB,SAAC,GAA8C,OAApC,WAA6CL,WAAT,IAC/C,SAAAA,GAAe,kBACX,IAAMsL,EAAWtL,IAEjB,OAAO,IAAA6B,MAAKyJ,GAAYA,EAASY,UAAU,SAAC,GACxC,MiB/DM,wBjB8DgD,cACtD,GAER,CANe,IASb5L,EAAe,GACjBH,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMoM,EAAkBrM,IAExB,GAAIqM,GAAmBA,EAAgB9iB,GACnC,MAAO,CACH6iB,WAAYC,EAAgB9iB,GAC5Bqe,UAAWyE,EAAgB7Z,SAInC,IAAMnB,EAAU6O,KAAsBD,IAEtC,OAAI5O,GAAWA,EAAQ+a,WACZ,CACHA,WAAY/a,EAAQ+a,WACpBxE,UAAWvW,EAAQuW,gBAH3B,CAMJ,CAlB6D,IAqB3DxH,EAAsB,GACxBD,GACA,SAAAA,GAAgB,kBACZ,OAAO5E,GAAM4E,KAAgB,WAAM,WAAI,GAAiBlG,GAAqBqS,iBAA1C,GACvC,CAFgB,IAKdjM,EAAmB,GACrBL,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMoM,EAAkBrM,IAExB,GAAIqM,GAAmBA,EAAgBnpB,OACnC,OAAOmpB,EAAgBnpB,OAAOmE,QAAQ,kBAAmB,IAG7D,IAAMgK,EAAU6O,KAAsBD,IAEtC,OAAI5O,EACOA,EAAQtN,OAAOwoB,UAD1B,CAGJ,CAZ6D,IAe3DjM,EAA0B,GAC5BD,GACA,SAAAA,GAAoB,kBAChB,OAAO9E,GAAM8E,KAAoB,WAAM,WAAI,GAAiBpG,GAAqBuS,qBAA1C,GAC3C,CAFoB,IAKlBjM,EAAkB,IACpB,SAAC,GAA2C,OAApC,QAA0CuL,YAAN,IAC5C,SAAAA,GAAgB,kBACZ,IAAMxgB,EAAOwgB,IAEb,OAAOxgB,GAAQA,EAAK8F,KACxB,CAJgB,IAOdoP,EAAyB,GAC3BD,GACA,SAAAA,GAAmB,kBACf,OAAOhF,GAAMgF,KAAmB,WAAM,WAAI,GAAiBtG,GAAqBY,oBAA1C,GAC1C,CAFmB,IAKjB4F,EAAwB,GAC1BT,GACA,SAAAA,GAAsB,kBAClB,IAAM3O,EAAU2O,IAEhB,OAAO3O,GAAWA,EAAQob,WAC9B,CAJsB,IAOpB/L,EAA+B,GACjCD,GACA,SAAAA,GAAyB,kBACrB,OAAOlF,GAAMkF,KAAyB,WAAM,WAAI,GAAiBxG,GAAqByS,0BAA1C,GAChD,CAFyB,IAKvB/L,EAAwB,IAC1B,SAAC,GAA8C,OAApC,WAA6CsK,qBAAT,IAC/C,SAAAA,GAAyB,gBAACC,QAAA,IAAAA,IAAAA,GAAA,GACtB,IAAME,EAAaH,EAAsBC,GAEzC,QAAOE,GAAaA,EAAa,CACrC,CAJyB,IAOvBxK,EAAyB,GAC3BP,GACA,SAAAA,GAAoB,gBAAC0E,GACjB,SAAIA,IAAiBA,EAAc4H,QkB1KpB,gBlB8KRtM,KkB7KK,alB6KiCA,GACjD,CANoB,KASjB,KAAAc,aAAW,SACdgK,EACAja,GAEA,MAAO,CACHiP,aAAcA,EAAa,CAAEgL,SAAQ,EAAEja,MAAK,IAC5CkP,oBAAqBA,EAAoB,CAAE+K,SAAQ,EAAEja,MAAK,IAC1DmP,iBAAkBA,EAAiB,CAAE8K,SAAQ,EAAEja,MAAK,IACpDoP,wBAAyBA,EAAwB,CAAE6K,SAAQ,EAAEja,MAAK,IAClEqP,gBAAiBA,EAAgB,CAAE4K,SAAQ,EAAEja,MAAK,IAClDsP,uBAAwBA,EAAuB,CAAE2K,SAAQ,EAAEja,MAAK,IAChEuP,sBAAuBA,EAAsB,CAAE0K,SAAQ,EAAEja,MAAK,IAC9DwP,6BAA8BA,EAA6B,CAAEyK,SAAQ,EAAEja,MAAK,IAC5EyP,sBAAuBA,EAAsB,CAAEwK,SAAQ,EAAEja,MAAK,IAC9D0P,uBAAwBA,EAAuB,CAAEuK,SAAQ,EAAEja,MAAK,IAExE,KP/IM0b,G0BrCH,WACH,IAAMxN,EAAgB,IAClB,SAACtZ,GAA4B,OAAAA,EAAM1C,OAAOypB,UAAb,IAC7B,SAAArpB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGP6b,EAAa,IACf,SAACvZ,GAA4B,QAAEA,EAAM6B,SAAS0X,UAAjB,IAC7B,SAAAnc,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACHsZ,cAAeA,EAActZ,GAC7BuZ,WAAYA,EAAWvZ,GAE/B,GACJ,C1BkBsCgnB,GAC5BC,G2BvCH,WACH,IAAMrO,EAAiB,IACnB,SAAC5Y,GAA8B,OAAAA,EAAM1C,OAAOoS,WAAb,IAC/B,SAAAhS,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPiS,EAAa,IACf,SAAC3P,GAA8B,QAAEA,EAAM6B,SAAS8N,UAAjB,IAC/B,SAAAvS,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGd,OAAO,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACH4Y,eAAgBA,EAAe5Y,GAC/B2P,WAAYA,EAAW3P,GAE/B,GACJ,C3BoBwCknB,GAC9BC,IQrCApM,EAAW,IACb,SAAC/a,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAAolB,GAAe,kBAAM,OAAAA,CAAA,CAAN,IAGbpM,EAAe,IACjB,SAAChb,GAA4B,OAAAA,EAAM1C,OAAO+pB,SAAb,IAC7B,SAAA3pB,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGPud,EAAY,IACd,SAACjb,GAA4B,QAAEA,EAAM6B,SAASoZ,SAAjB,IAC7B,SAAA7d,GAAU,kBAAM,OAAAA,CAAA,CAAN,KAGP,KAAAie,aAAW,SACdrb,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO,CACH+a,SAAUA,EAAS/a,GACnBgb,aAAcA,EAAahb,GAC3Bib,UAAWA,EAAUjb,GAE7B,KRgBA,OAAO,SAACA,EAAOQ,QAAA,IAAAA,IAAAA,EAAA,IACX,IJ7CiFpC,EI6C3EsE,EAAiBwY,EAA6Blb,EAAM0C,gBACpDuC,EAAOqW,EAAmBtb,EAAMiF,MAChCqiB,EAAiB5L,EAA6B1b,EAAMsnB,gBACpDhK,EAAYF,EAAsBpd,EAAMsd,WACxChX,EAAUkX,GAAqBxd,EAAMsG,SACrCc,EAAWyW,GAAuB7d,EAAMoH,UACxCmgB,EAAqBtJ,GAA+Bje,EAAMunB,oBAC1DC,EAAOtH,GAAmBlgB,EAAMuc,YAChC1V,EAAmB0X,GAA8Bve,EAAM6G,kBACvDmY,EAAcF,GAAyB9e,EAAMgf,aAC7C2C,EAAiBF,GAA4BzhB,EAAM2hB,gBACnD8F,EAAoBvF,GAA8BliB,EAAMynB,mBACxDhF,EAAgBF,GAA2BviB,EAAMyiB,eACjDiF,EAAiB9E,GAA6B5iB,EAAM0nB,gBACpDrH,EAAkBwC,GAA8B7iB,EAAM8P,cACtD6X,EAAoB1E,GAA8BjjB,EAAM2nB,mBACxDC,EAAqBxE,GAA+BpjB,EAAM4nB,oBAC1DC,EAAgBZ,GAA4BjnB,EAAM6nB,eAClDtC,EAAcuB,GAA0B9mB,EAAMulB,aAC9C6B,EAAcD,GAA0BnnB,EAAMonB,aAG9CtX,EAAe0T,GAA0BxjB,EAAM8P,aAAc7K,GAC7DogB,EAAWJ,GAAuBjlB,EAAMqlB,SAAU3iB,EAAgBuC,EAAM6K,EAAcxJ,EAASc,EAAUP,GACzGuE,EAAQya,GAAoB7lB,EAAMoL,MAAO1I,EAAgB4D,GACzDiF,EAAU8a,GAAsBhB,EAAUja,GAG1C0c,EAAY,CACdplB,eAAc,EACduC,KAAI,EACJogB,SAAQ,EACRiC,eAAc,EACdS,OAPWjM,EAAqB9b,EAAM+nB,OAAQ/nB,EAAMuc,YAQpDzM,aAAY,EACZwN,UAAS,EACThX,QAAO,EACPc,SAAQ,EACRmgB,mBAAkB,EAClBC,KAAI,EACJ3gB,iBAAgB,EAChBmY,YAAW,EACX5T,MAAK,EACLG,QAAO,EACPoW,eAAc,EACd8F,kBAAiB,EACjBhF,cAAa,EACbiF,eAAc,EACdrH,gBAAe,EACfsH,kBAAiB,EACjBC,mBAAkB,EAClBR,YAAW,EACXS,cAAa,EACbtC,YAAW,GAGf,OAAO/kB,EAAQwnB,oBJrGkE5pB,EIqGzB0pB,EJpGrDnsB,OAAOyF,KAAKhD,GACdZ,QAAO,SAACC,EAAQhC,GAGb,OAFAgC,EAAOhC,GAAOka,GAAkBvX,EAAI3C,IAE7BgC,CACX,GAAG,CAAC,II+FiEqqB,CACzE,CACJ,C4BxGe,SAASG,GACpBC,EACA1nB,QADA,IAAA0nB,IAAAA,EAAA,IAGA,ICRMC,ECCNC,EFOMC,GCRAF,EAAU,IAAI,EAEY,CAC5B,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoBtX,SAAQ,SAAAlU,GAC5BwrB,EAAQnqB,SAASrB,GAAM,SAACU,EAAUb,GAAY,WAAI,EAAmBa,EAAUb,EAAjC,GAClD,IAEA2rB,EAAQnqB,SAAS,4BAA4B,SAAAX,GAAY,WAAI,EAA0BA,EAA9B,IACzD8qB,EAAQnqB,SAAS,4BAA4B,SAAAX,GAAY,WAAI,EAA0BA,EAA9B,ICtBzD+qB,EDwBOD,ECtBA,SAAAG,GAAW,WAAAC,MAAKD,GAASE,MAAK,IAAAC,aAA0B,SAAAxoB,GAC3D,GAAIA,aAAkBnD,OAASmD,EAAOG,mBAAmBtD,MACrD,MAAMmD,EAGV,IAUYxD,EAVGwD,EAAOG,UAWO,iBAAX3D,GAIf,CAAC,OAAQ,UAAW,SAAU,cAAcisB,OAAM,SAAAjtB,GACrD,OAAAE,OAAOM,UAAUC,eAAeC,KAAKM,EAAQhB,EAA7C,IAhBgC,CAC5B,IAAMe,EAAUyD,EAAOG,QAAQlD,MAAQ+C,EAAOG,QAAQlD,KAAKe,OAE3D,MAAM,gCAAKgC,GAAM,CAAEG,QAASgoB,EAAoB1pB,YAAYuB,EAAOG,QAAS5D,I,CAOxF,IAAoBC,EAJZ,MAAMwD,CACV,IAZkB,GFMZ0oB,EAAkClQ,KAGxC,OAAO,IAAAmQ,kBGKA,IAAA7mB,iBAAgB,CACnBW,eAAgBZ,EAChBmD,KAAMV,EACN8gB,SAAUxR,GACVyT,eAAgB/hB,EAChBwiB,OAAQ9hB,GACR6J,aAAcD,GACdyN,UAAW/S,GACXjE,QAASD,GACTe,SAAUD,GACVogB,mBAAoB3f,GACpB2U,WAAYpS,GACZtD,iBAAkBD,GAClBoY,YAAa5Q,GACbhD,MAAOP,GACPU,QAASK,GACT+V,eAAgB5V,GAChB0b,kBAAmBna,GACnBmV,cAAepR,GACfqW,eAAgBzY,GAChB0Y,kBAAmB3V,GACnB4V,mBAAoBvV,GACpB+U,YAAajU,GACb0U,cAAejU,GACf2R,YAAahS,KH3Bb2U,GAAY,eACVG,kBAAiB,EAAEQ,iBALA,SAAC7oB,GAA8B,OAAA2oB,EAAgC3oB,EAAhC,GAKVQ,GAElD,CIvBA,MAAM,GAA+BjE,QAAQ,8BCM9B,SAASusB,GAAoBC,GACxC,IAAMC,GAAgB,qBAatB,OAXAD,EAAME,WACF,SAAAjpB,GACI,IAAM+nB,EAAS/nB,EAAM+nB,OAAO3L,iBAExB2L,GACAiB,EAAcE,QAAQnB,EAAOoB,gBAAgBC,cAErD,IACA,SAAAppB,GAAS,OAAAA,EAAM+nB,OAAO3L,gBAAb,IAGN4M,CACX,CChBe,SAASK,GACpBC,GAgBA,OAAO,KAAA9T,UAdP,W,IAAgC,sDAC5B,IAAMvV,EAASqpB,EAAGntB,KAAI,MAAPmtB,GAAE,qBAAMvrB,MAASsX,IAEhC,OAAIpV,aAAkB,EAAAspB,YACX,IAAAhB,MAAKtoB,GAAQuoB,MAAK,IAAAgB,gBAGP,mBAAXvpB,GACA,KAAAuV,UAAQ,SAAAuT,GAAS,WAAAR,MAAKtoB,EAAO8oB,IAAQP,MAAK,IAAAgB,eAAzB,IAGrBvpB,CACX,GAGJ,CCrBe,SAASwpB,GAAgBC,GACpC,OAAOA,GAAmC,kBAAnBA,EAAMC,QACjC,CCDe,SAASC,GACpBvN,EACA5gB,EACAouB,GAEA,IAAMC,EAAkB,IAAIC,QAE5B,SAASC,EAA6BxT,GAAtC,WACI,OAAO,W,UAAE,kDACL,IAAMyT,EAAU5U,EAAKA,EAAKlX,OAAS,GAC3BwrB,GAAaF,GAAgBQ,GAAWA,EAAU,CAAEN,UAAU,IAAO,SAE7E,IAAKA,EACD,OAAOnT,EAAOra,KAAI,MAAXqa,GAAM,qBAAM,GAASnB,IAGhC,IAAM6U,EAAkBJ,EAAgBhuB,IAAI,IAAS,CAAC,EAUtD,OARKguB,EAAgBhuB,IAAI,IACrBguB,EAAgBK,IAAI,EAAMD,GAGzBA,EAAgBzuB,KACjByuB,EAAgBzuB,GAAO4tB,GAAY7S,KAGhC,EAAA0T,EAAgBzuB,IAAKU,KAAI,8BAAC,GAASkZ,GAC7C,CACL,CAEA,MAAO,CACHvZ,IAAG,WACC,GAAgC,mBAArB+tB,EAAWvtB,MAClB,MAAM,IAAIQ,MAAM,yCAGpB,IAAMR,EAAQ0tB,EAAe7tB,KAAK4B,KAAM8rB,EAAWvtB,OAInD,OAFAX,OAAOC,eAAemC,KAAMtC,GAAK,gCAAKouB,GAAU,CAAEvtB,MAAK,KAEhDA,CACX,EAER,CC1Ce,SAAS8tB,GAAiBC,GACrC,MAAO,oBAAqBA,CAChC,CAEO,SAASC,GAAqBD,GACjC,IAAKD,GAAiBC,GAClB,MAAM,IAAIvtB,MAAM,6BAExB,C,SCGA,WACI,WACYytB,GAAA,KAAAA,eAAAA,CACT,CAyDP,OAvDI,YAAAC,mBAAA,SAAmBhqB,GAAnB,WACI,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IACMxlB,EADQ8jB,EAAM9P,WACDhU,KAAKuW,iBAExBiP,EAASC,MAAK,IAAAC,cAAa/f,GAAwBkC,8BAEnD,EAAKyd,eAAeC,oBAAmB,gCAAKhqB,GAAO,CAAEoqB,QAAQ,gCAAKpqB,aAAO,EAAPA,EAASoqB,QAAM,CAAEC,OAAQ5lB,EAAKxB,QAC3FqnB,MAAK,SAAAztB,GACF,IAAMmI,EAAO,CACTulB,gBAAiB1tB,EAASF,QAAQ,uBAClC6tB,YAAa3tB,EAASF,QAAQ,mBAE5B8tB,EAAU5tB,EAASH,KACnBguB,EAAkBttB,MAAMC,QAAQotB,GAAW,EAAKE,gBAAgBF,GAAWA,EAEjFR,EAASC,MAAK,IAAAC,cAAa/f,GAAwB+B,4BAA6Bue,EAAiB1lB,IACjGilB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkB1gB,GAAwBmC,yBAA0B1P,GACvF,GACR,GArBgB,CAsBpB,EAGA,YAAAkuB,kBAAA,SAAkB9lB,EAAkBjF,GADpC,WAEI,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,G,MAEzBI,EAA6B,QAAvB,EADE9B,EAAM9P,WACChU,KAAKsW,iBAAS,eAAE9X,GAC/BmnB,EAASC,GAAS,gCAAKrqB,aAAO,EAAPA,EAASoqB,QAAM,CAAEC,OAAM,KAAK,iBAAKrqB,aAAO,EAAPA,EAASoqB,QAEvEH,EAASC,MAAK,IAAAC,cAAa/f,GAAwBoC,gCAA4BtL,EAAW,CAAE+D,SAAQ,KAEpG,EAAK8kB,eAAegB,kBAAkB9lB,GAAU,gCAAKjF,GAAO,CAAEoqB,OAAM,KAC/DE,MAAK,SAAAztB,GACFotB,EAASC,MAAK,IAAAC,cAAa/f,GAAwBoB,2BAA4B3O,EAASH,KAAM,CAAEuI,SAAQ,KACxGglB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkB1gB,GAAwBuC,wBAAyB9P,EAAU,CAAEoI,SAAQ,IAC1G,GACR,GAfgB,CAgBpB,EAEQ,YAAA0lB,gBAAR,SAAwBF,GAEpB,OAAO,IAAAhqB,QAAOgqB,GAAS,SAAAzU,GACnB,QAvDO,aAuDHA,EAAO/S,KAAsB2mB,GAAiBC,QAKtD,GACJ,GA5BA,iBADC,I,sCA8BL,C,CA5DA,GCfA,IAAKmB,IAAL,SAAKA,GACD,0BACA,qCACH,CAHD,CAAKA,KAAAA,GAAW,KAKhB,YCLO,IAAMC,GAAoB,0ECApBC,GAAsB,CAAE,yBAA0B,W,SCM/D,WACI,WACYnB,GAAA,KAAAA,eAAAA,CACT,CA6BP,OA3BI,YAAAC,mBAAA,SAAmB,G,IAAA,aAAsC,CAAC,EAAC,EAAtCmB,EAAO,UAAEf,EAAM,SAGhC,OAAO7sB,KAAKwsB,eAAezuB,IAFf,2BAEwB,CAChC6vB,QAAO,EACPxuB,SAAS,eACLyuB,OAAQ,UACR,iBAAkBH,IACfC,IAEPd,OAAM,GAEd,EAEA,YAAAW,kBAAA,SAAkB9lB,EAAkB,G,IAAA,aAAsC,CAAC,EAAC,EAAtCkmB,EAAO,UAAEf,EAAM,SAC3CiB,EAAM,4BAA4BpmB,EAExC,OAAO1H,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAChCF,QAAO,EACPxuB,SAAS,eACLyuB,OAAQ,UACR,iBAAkBH,IACfC,IAEPd,OAAM,GAEd,EACJ,EAhCA,GCNM,GAA+BruB,QAAQ,8BCG9B,SAASuvB,GACpBnvB,EACAe,EACA8H,GAEA,OAOmBvF,EAPDvC,IAQDuC,EAAOtD,MAAQsD,EAAOvC,OAP5B,IAAA6mB,SAAO,IAAAwH,IAAGruB,IAAQ,IAAAsuB,aAAW,IAAAV,mBAAkB3uB,EAAMe,EAAM0C,QAASoF,MAGxE,IAAAwmB,aAAW,IAAAV,mBAAkB3uB,EAAMe,EAAO8H,IAGrD,IAAuBvF,CAFvB,C,SCPA,YACI,WAAYzD,GAAZ,MACI,YAAMA,GAAW,6EAA2E,K,OAE5F,EAAKE,KAAO,+BACZ,EAAKC,KAAO,8B,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,G,GCW1D,WACI,WACY4tB,EACA0B,GADA,KAAA1B,eAAAA,EACA,KAAA0B,2BAAAA,CACT,CA+HP,OA7HI,YAAAC,gBAAA,SACIC,EACA3rB,GAFJ,WAII,OAAO,SAAAuoB,GACH,IAAM/oB,EAAQ+oB,EAAM9P,WACdoM,EAAWrlB,EAAMqlB,SAAStL,cAEhC,IAAKsL,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpD,IAAMpN,EAAWpH,EAAMoH,SAASqS,cAEhC,GAAIrS,IAAaA,EAASglB,QACtB,MAAM,IAAI,GAGd,IAEIC,EAFE3pB,EAAiB1C,EAAM0C,eAAegW,oBAI5C,GAAKhW,EAEE,CACuDA,EAAc,QAAhE,IAAY4pB,GAAiC,YAAK5pB,EAApD,aAEN2pB,GAA4B,gCACrBC,GACAH,E,MANPE,EAA4BF,EAUhC,OAAO,IAAAI,QACH,IAAAhI,SACI,IAAAwH,KAAG,IAAApB,cAAalrB,EAAyBwD,4BACzC,IAAAupB,QAAM,6D,uEACe,SAAMzuB,KAAK0uB,8BACxBpH,EAAS5hB,GACT4oB,EACA7rB,I,OAGJ,OANQtD,EAAS,SAIhB,KAEM,CAAP,GAAO,IAAAytB,cAAalrB,EAAyB8C,yBAA0BrF,I,WAE7EsrB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBrsB,EAAyB0D,sBAAuBzF,EAAjE,KAExB,EAAKgvB,uBAAuBP,EAAa3rB,GAEjD,CACJ,EAEA,YAAAmsB,cAAA,SACI/U,EACApX,GAFJ,WAII,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMzqB,EAAQ+oB,EAAM9P,WACdoM,EAAWrlB,EAAMqlB,SAAStL,cAEhC,IAAKsL,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpDiW,EAASC,MAAK,IAAAC,cAAalrB,EAAyBoD,gCAEpD,IAAMH,EAAiB1C,EAAM0C,eAAegW,oBAOtC2T,GAA4B,gCAC3BzU,GAAO,CACVgV,WAAgC,IAAlBhV,EAAQgV,OAAyBlqB,EAAiBA,EAAekqB,MAAQhV,EAAQgV,QAG/FlqB,GAAkBA,EAAee,KACjC4oB,EAA0B5oB,GAAKf,EAAee,IAGlD,EAAKgpB,8BAA8BpH,EAAS5hB,GAAI4oB,EAA2B7rB,GACtEsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAalrB,EAAyB6C,8BAA+BpF,IACnFutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkB7rB,EAAyBqD,2BAA4BzF,GAC1F,GACR,GAlCgB,CAmCpB,EAEQ,YAAAqvB,uBAAR,SACI,EAKAlsB,G,IAJIosB,EAAK,QACLC,EAA0B,6BAC1BC,EAA0B,6BAI9B,OAAI,MAACD,GACD,MAACC,GACM,IAAAC,SAGJhvB,KAAKkuB,2BAA2Be,oBAAoB,CACvDJ,MAAK,EACLE,2BAA4BA,IAA8B,EAC1DD,2BAA4BA,IAA8B,GAC3DrsB,EACP,EAEQ,YAAAisB,8BAAR,SACIQ,EACArV,EACApX,GAEA,OAAKoX,EAAQnU,GAIN1F,KAAKwsB,eAAeoC,cAAcM,EAAYrV,EAASpX,GAHnDzC,KAAKwsB,eAAe2C,cAAcD,EAAYrV,EAASpX,EAItE,EACJ,EAnIA,GCTA,IAAM2sB,GAAiB,CACnBC,QAAS,CACL,uCACA,sCACA,WACA,sBACFzvB,KAAK,M,SAGX,WACI,WACY4sB,GAAA,KAAAA,eAAAA,CACT,CAsBP,OApBI,YAAA2C,cAAA,SAAcD,EAAoBrV,EAAsC,G,IAAE+T,QAAF,MAA8B,CAAC,EAAC,GAAvB,QACvEE,EAAM,6BAA6BoB,EAAU,mBAC7C9vB,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAe8C,KAAKxB,EAAK,CAAE3uB,KAAM0a,EAASgT,OAAQuC,GAAgBhwB,QAAO,EAAEwuB,QAAO,GAClG,EAEA,YAAAgB,cAAA,SAAcM,EAAoBrV,EAAmD,G,IAAE+T,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAClFloB,EAAgBmU,EAAO,GAAhB1a,GAAI,YAAK0a,EAAlB,QACAiU,EAAM,6BAA6BoB,EAAU,oBAAoBxpB,EACjEtG,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAe+C,IAAIzB,EAAK,CAAEjB,OAAQuC,GAAgBjwB,KAAI,EAAEC,QAAO,EAAEwuB,QAAO,GACxF,EACJ,EAzBA,G,GCFA,WACI,WACY4B,EACAC,EACAC,GAFA,KAAAF,uBAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,yBAAAA,CACT,CA6EP,OA3EI,YAAAC,aAAA,SAAajqB,EAAYjD,GAAzB,WACI,OAAO,IAAA+jB,SACH,IAAAwH,KAAG,IAAApB,cAAatrB,EAAmBsD,yBACnC,IAAA4pB,OACIxuB,KAAKyvB,qBAAqBG,YAAW,gCAAKntB,GAAO,CAAEmpB,UAAU,EAAMiB,QAAQ,gCAAIpqB,aAAO,EAAPA,EAASoqB,QAAM,CAAEqC,WAAYxpB,OAC5G1F,KAAK0vB,yBAAyBG,gBAAe,gCAAKptB,GAAO,CAAEmpB,UAAU,MACrE,IAAA6C,QAAM,WAAM,SAAKe,uBAAuBG,aAAajqB,EAAIjD,GACpDsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OAAO,WAAAytB,cAAatrB,EAAmBmD,sBAAuBtF,EAAvD,GADZ,MAGlBsrB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBzsB,EAAmBuD,mBAAoBlF,EAAxD,IAE5B,EAEA,YAAAmwB,oBAAA,SAAoBrtB,GAApB,WACI,OAAO,SAAAuoB,GAAS,WAAAxE,SACZ,IAAAwH,KAAG,IAAApB,cAAatrB,EAAmBsD,yBACnC,IAAA4pB,OACI,EAAKiB,qBAAqBG,aAC1B,EAAKF,yBAAyBG,gBAAe,gCAAKptB,GAAO,CAAEmpB,UAAU,OAEzE,IAAA6C,QAAM,6D,2EAIF,GAHMxsB,EAAQ+oB,EAAM9P,aACdkD,EAAUnc,EAAM+nB,OAAOrL,sBAEZP,EAAQ8Q,WACrB,MAAM,IAAI,GAAiB9Y,GAAqBO,uBAGnC,SAAM3W,KAAKwvB,uBAAuBG,aAAavR,EAAQ8Q,WAAYzsB,I,OAEpF,OAFQtD,EAAS,SAA2E,KAErF,CAAP,GAAO,IAAAytB,cAAatrB,EAAmBmD,sBAAuBtF,I,WAEpEsrB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBzsB,EAAmBuD,mBAAoBlF,EAAxD,IAnBR,CAqBpB,EAEA,YAAAowB,eAAA,SACI5wB,EACAsD,GAFJ,WAII,OAAO,SAAAuoB,GAAS,WAAI,EAAAQ,YAAW,SAAAkB,GAC3B,IACMpF,EADQ0D,EAAM9P,WACGoM,SAAStL,cAEhC,IAAKsL,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpDiW,EAASC,MAAK,IAAAC,cAAatrB,EAAmB4U,0BAE9C,EAAKsZ,uBAAuBO,eAAezI,EAAS5hB,GAAIvG,EAAMsD,GACzDsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAatrB,EAAmByU,wBAAyB5W,IACvEutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBjsB,EAAmB6U,qBAAsB7W,GAC9E,GACR,GAlBgB,CAmBpB,EAEA,YAAA0wB,oBAAA,SAAoBvtB,GAApB,WACI,OAAO,SAAAuoB,GACH,IACM1D,EADQ0D,EAAM9P,WACGoM,SAAStL,cAEhC,IAAKsL,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpD,OAAO,EAAKkZ,aAAarI,EAAS5hB,GAAIjD,EAC1C,CACJ,EACJ,EAlFA,GCbe,SAASwtB,GAAgBC,GACpC,OAAO,IAAAC,MAAKD,GAAUtwB,KAAK,IAC/B,CCEe,SAASwwB,GACpBC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOzwB,MAAMC,QAAQwwB,GACjBL,IAAa,oBACNI,EACAC,ICLA,SACXD,EACAE,GAEA,IAAMC,GAAY,IAAAntB,OAAK,IAAAkL,QAAOgiB,GAAoB,SAAAE,GAAM,OAACA,CAAD,KAClDC,GAAY,IAAArtB,OAAK,IAAAH,QAAOqtB,IAE9B,OAAON,IAAa,qBACT,IAAAU,YAAWN,EAAcG,GACzBE,GAEf,CDJQE,CAAcP,EAAcC,EACpC,CEPA,SATkC,CAC9B,uCACA,sCACA,WACA,yBACA,WACA,sB,GCIJ,YACI,WAAYhxB,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAASa,EAASH,KAAKgB,SAAQ,K,OAEjD,EAAKxB,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPuD,oBAOvD,EAPA,CAAuD,G,GCDvD,WACI,WACY4tB,GAAA,KAAAA,eAAAA,CACT,CAwCP,OAtCI,YAAAmD,aAAA,SAAajqB,EAAY,G,IAAA,aAAwE,CAAC,EAAC,EAAxE,IAAAmnB,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAASzB,EAAO,UAClDE,EAAM,4BAA4BpoB,EAClCtG,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAezuB,IAAc+vB,EAAK,CAC1CjB,OAAQ,CACJwC,QAASe,GAAoB,GAA2Bf,IAE5DjwB,QAAO,EACPwuB,QAAO,IACRN,OAAM,SAAA3tB,GACL,GAAIA,EAAMN,QAAU,KAAOM,EAAMN,OAAS,IACtC,MAAM,IAAI,GAA0BM,GAGxC,MAAMA,CACV,GACJ,EAEA,YAAAowB,eAAA,SAAerqB,EAAYvG,EAA2B,G,IAAA,aAAwE,CAAC,EAAC,EAAxE,IAAA0tB,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAASzB,EAAO,UAC/EE,EAAM,4BAA4BpoB,EAClCtG,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAe+C,IAAIzB,EAAK,CAChCjB,OAAQ,CACJwC,QAASe,GAAoB,GAA2Bf,IAE5DlwB,KAAI,EACJC,QAAO,EACPwuB,QAAO,GAEf,EACJ,EA3CA,G,GCHA,wBA+CA,QA9CI,YAAAtrB,QAAA,SAAQuuB,EAAaC,GACjB,OAAO,IAAAxuB,SACHtC,KAAK+wB,WAAWF,GAChB7wB,KAAK+wB,WAAWD,GAExB,EAEQ,YAAAC,WAAR,SAAmB7pB,GACf,MAAO,CACH8pB,WAAY9pB,EAAK8pB,WACjBC,SAAU/pB,EAAK+pB,SACfvrB,GAAIwB,EAAKxB,GACTghB,UAAW,CACPwK,aAAchqB,EAAKwf,UAAUwK,aACxBC,QACAje,MAAK,SAACke,EAAOC,GACV,UAAGD,EAAME,UAAYF,EAAMG,WAAYC,cAAc,GAAGH,EAAMC,UAAYD,EAAME,UAAhF,IAEHlxB,KAAI,SAAA8N,GAAQ,OACTsjB,kBAAmBtjB,EAAKsjB,kBACxBH,UAAWnjB,EAAKmjB,UAChBI,SAAUvjB,EAAKujB,SACfH,UAAWpjB,EAAKojB,UAJP,IAMjBzoB,iBAAkB5B,EAAKwf,UAAU5d,iBAC5BqoB,QACAje,MAAK,SAACke,EAAOC,GAAU,UAAGD,EAAM1rB,IAAK8rB,cAAc,GAAGH,EAAM3rB,GAArC,IACvBrF,KAAI,SAAA8N,GAAQ,OACTwjB,OAAQxjB,EAAKwjB,OACbC,UAAWzjB,EAAKyjB,UAFP,IAIjBjL,cAAezf,EAAKwf,UAAUC,cACzBwK,QACAje,MAAK,SAACke,EAAOC,GACV,UAAGD,EAAME,UAAYF,EAAMG,WAAYC,cAAc,GAAGH,EAAMC,UAAYD,EAAME,UAAhF,IAEHlxB,KAAI,SAAA8N,GAAQ,OACTsjB,kBAAmBtjB,EAAKsjB,kBACxBH,UAAWnjB,EAAKmjB,UAChBI,SAAUvjB,EAAKujB,SACfH,UAAWpjB,EAAKojB,UAChBM,aAAc1jB,EAAK0jB,aALV,KAS7B,EACJ,EA/CA,G,GCHA,YASI,WACI1e,EACA2e,GAFJ,MAII,YAAM,2GAAyG,K,OAE/G,EAAKnzB,KAAO,mBACZ,EAAKC,KAAO,eACZ,EAAKqF,KAAO,CACRkP,SAAQ,EACR2e,QAAO,G,CAEf,CACJ,OAtB8C,oBAsB9C,EAtBA,CAA8C,G,GCY9C,WACI,WACYtC,GAAA,KAAAA,uBAAAA,CACT,CAkDP,OAhDI,YAAAuC,SAAA,SAASzK,EAAqB7kB,GAA9B,WACI,IAAK6kB,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpD,OAAOzW,KAAKwvB,uBAAuBG,aAAarI,EAAS5hB,GAAIjD,GACxDsqB,MAAK,SAAAztB,GACF,IAAM0yB,EAAa,IAAI,GAEvB,KAAI1K,EAASK,qBAAuBroB,EAASH,KAAKwoB,oBAC3C,EAAKsK,gBAAgB3K,EAAS/e,QAASjJ,EAASH,KAAKoJ,UACrD,EAAK2pB,yBAAyB5K,EAASxe,iBAAkBxJ,EAASH,KAAK2J,mBACvEkpB,EAAW1vB,QAAQglB,EAASpgB,KAAM5H,EAASH,KAAK+H,OAKvD,MAAM,IAAI,GACN,EAAKirB,uBAAuB7K,GAC5B,EAAK6K,uBAAuB7yB,EAASH,MAE7C,GACR,EAEQ,YAAA8yB,gBAAR,SAAwBG,EAAoBC,GACxC,OAAO,IAAA/vB,UAAQ,IAAAjC,KAAI+xB,EAAU,SAAS,IAAA/xB,KAAIgyB,EAAU,QACxD,EAEQ,YAAAH,yBAAR,SAAiCI,EAAsCC,GACnE,OAAO,IAAAjwB,UAAQ,IAAAjC,KAAIiyB,EAAmB,SAAS,IAAAjyB,KAAIkyB,EAAmB,QAC1E,EAEQ,YAAAJ,uBAAR,SACI7K,GAEQ,IAAApgB,EAAwDogB,EAAQ,KAA1D/e,EAAkD+e,EAAQ,QAAjDxe,EAAyCwe,EAAQ,iBAA/BK,EAAuBL,EAAQ,mBAExE,MAAO,CACHpgB,KAAM,CACF8pB,WAAY9pB,EAAK8pB,WACjBC,SAAU/pB,EAAK+pB,SACfvK,UAAWxf,EAAKwf,WAEpBne,QAAO,EACPO,iBAAgB,EAChB6e,mBAAkB,EAE1B,EACJ,EArDA,G,GCNA,WACI,WACY6K,GAAA,KAAAA,qBAAAA,CACT,CAiBP,OAdI,YAAA5C,WAAA,SAAWntB,GADX,WAEI,OAAO,EAAA+oB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAazlB,EAAiBkB,sBAE5C,EAAKmqB,qBAAqB5C,WAAWntB,GAChCsqB,MAAK,SAAAztB,GACFotB,EAASC,MAAK,IAAAC,cAAazlB,EAAiBgB,oBAAqB7I,EAASH,OAC1EutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBpmB,EAAiBiB,iBAAkB9I,GACxE,GACR,GACJ,GAbA,iBADC,I,+BAeL,C,CApBA,G,GCFA,WACI,WACYktB,GAAA,KAAAA,eAAAA,CACT,CAoBP,OAlBI,YAAAoD,WAAA,SAAW,G,IAAA,aAAsC,CAAC,EAAC,EAAtChC,EAAO,UAAEf,EAAM,SAGxB,OAAO7sB,KAAKwsB,eAAezuB,IAFf,oCAEgC,CACxC6vB,QAAO,EACPxuB,SAAS,eACLyuB,OAAQ,UACR,iBAAkBH,IACfC,IAEPd,OAAM,IACPS,OAAM,SAAA3tB,GACL,GAAIA,EAAMN,QAAU,KAAOM,EAAMN,OAAS,IACtC,MAAM,IAAI,GAA0BM,GAExC,MAAMA,CACV,GACJ,EACJ,EAvBA,G,GCIA,WACI,WACY8yB,GAAA,KAAAA,yBAAAA,CACT,CAeP,OAZI,YAAA5C,eAAA,SAAeptB,GADf,WAEI,OAAO,IAAA+jB,SACH,IAAAwH,KAAG,IAAApB,cAAahjB,GAAqB2C,2BACrC,IAAAkiB,QAAM,6D,uEACe,SAAMzuB,KAAKyyB,yBAAyBC,WAAWjwB,I,OAEhE,OAFQtD,EAAS,SAAuD,KAEjE,CAAP,GAAO,IAAAytB,cAAahjB,GAAqByC,wBAAyBlN,I,WAExEsrB,MACE,IAAAC,aAAW,SAAAprB,GAAY,OAAAyuB,GAAiBnkB,GAAqB0C,qBAAsBhN,EAA5D,IAE/B,GAXA,iBADC,I,mCAaL,C,CAlBA,G,GCLA,WACI,WACYktB,GAAA,KAAAA,eAAAA,CACT,CAcP,OAZI,YAAAkG,WAAA,SAAW,G,IAAE9E,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGhB,OAAO5tB,KAAKwsB,eAAezuB,IAFf,8BAEwB,CAChC6vB,QAAO,EACPxuB,SAAS,eACLyuB,OAAQ,UACR,iBAAkBH,IACfC,KAGf,EACJ,EAjBA,G,GCDA,YACI,mBACI,YAAM,2DAA0D,K,OAEhE,EAAKhvB,KAAO,kCACZ,EAAKC,KAAO,gC,CAChB,CACJ,OAP6D,oBAO7D,EAPA,CAA6D,G,GCU7D,WACI,WACY+zB,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,mBAAAA,CACT,CA6IP,OA3II,YAAAC,UAAA,SAAU5c,EAAiBxT,GAA3B,WACI,OAAO,IAAI,EAAA+oB,YAAW,SAACkB,GACnBA,EAASC,MAAK,IAAAC,cAAaprB,EAAgBiM,qBAE3C,EAAKklB,oBAAoBE,UAAU5c,EAASxT,GACvCsqB,MAAK,SAAAztB,GACFotB,EAASC,MAAK,IAAAC,cAAaprB,EAAgBkD,mBAAoBpF,EAASH,OACxEutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkB/rB,EAAgBmM,gBAAiBrO,GACtE,GACR,GACJ,EAGA,YAAAwzB,kBAAA,SAAkB7c,EAAiBxT,GAAnC,WACI,OAAO,IAAI,EAAA+oB,YAAW,SAACkB,GACnBA,EAASC,MAAK,IAAAC,cAAaprB,EAAgBkM,6BAE3C,EAAKilB,oBAAoBE,UAAU5c,EAASxT,GACvCsqB,MAAK,SAAAztB,GACFotB,EAASC,MAAK,IAAAC,cAAaprB,EAAgBwL,2BAA4B1N,EAASH,OAChFutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkB/rB,EAAgBoM,wBAAyBtO,GAC9E,GACR,GACJ,EAEA,YAAAyzB,iBAAA,SAAiBtwB,GAAjB,WACI,OAAO,SAAAuoB,GAAS,WAAAyD,QAAM,WAClB,IAAMxY,EAAU,EAAK+c,mBAAmBhI,EAAM9P,YAE9C,IAAKjF,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO,EAAK+b,UAAU5c,EAASxT,EACnC,GARgB,CASpB,EAEA,YAAAwwB,YAAA,SAAY5wB,EAA4BI,GAAxC,WACI,OAAO,SAAAuoB,GAAS,WAAAxE,SACZ,IAAAwH,KAAG,IAAApB,cAAaprB,EAAgB0xB,wBAChC,IAAAzE,QAAM,WACF,IAAMxsB,EAAQ+oB,EAAM9P,WACd2D,EAAiB5c,EAAM+nB,OAAOpL,oBAC9BO,EAA6Bld,EAAM+nB,OAAO9K,gCAC1CoI,EAAWrlB,EAAMqlB,SAAStL,cAEhC,IAAKsL,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpD,GAAI6Q,EAAS6L,uBACT,MAAM,IAAI,GAGd,OAAO,IAAA3I,MACH,EAAKoI,mBAAmBb,SAASzK,EAAU7kB,GACtCsqB,MAAK,WAAM,SAAK4F,oBAAoBM,YACjC,EAAKG,uBACD/wB,QAAAA,EAAW,CAAC,EACZilB,EAAS5hB,GACT4hB,EAAS+L,gBACTxU,IACH,gCAEMpc,GAAO,CACVrD,QAAS,CACLk0B,gBAAiBnU,KAVjB,KAalBsL,MACE,IAAA8I,YAAU,SAAAj0B,GAAY,WAAAknB,QAElB,EAAKqM,UAAUvzB,EAASH,KAAK8E,KAAKoJ,MAAM4I,QAASxT,IACjD,IAAAurB,KAAG,IAAApB,cAAaprB,EAAgB2L,qBAAsB7N,EAASH,KAAK8E,MAAM,gCAAK3E,EAASH,KAAKsI,MAAI,CAAE8F,MAAOjO,EAASF,QAAQmO,UAHzG,IAM9B,IAAGkd,MACC,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBvsB,EAAgBgyB,kBAAmB7zB,EAApD,KAvCZ,CA0CpB,EAEA,YAAA8zB,cAAA,SAAcxd,EAAiBxT,GAA/B,WACI,OAAO,IAAA+jB,SACH,IAAAwH,KAAG,IAAApB,cAAaprB,EAAgBkyB,0BAChC,IAAAlJ,MAAKxqB,KAAK2yB,oBAAoBc,cAAcxd,EAASxT,IAChDgoB,MACG,IAAA8I,YAAU,SAAAj0B,GAAY,WAAAknB,QAClB,EAAKqM,UAAU5c,EAASxT,IACxB,IAAAurB,KAAG,IAAApB,cAAaprB,EAAgB0L,uBAAwB5N,EAASH,KAAK8E,OAFpD,MAKhCwmB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBvsB,EAAgBmyB,oBAAqBh0B,EAAtD,IAE5B,EAEQ,YAAAqzB,mBAAR,SAA2B/wB,GACvB,IAAMoL,EAAQpL,EAAMoL,MAAM0a,WACpBT,EAAWrlB,EAAMqlB,SAAStL,cAEhC,OAAQ3O,GAASA,EAAM4I,SAAaqR,GAAYA,EAASrR,OAC7D,EAEQ,YAAAmd,uBAAR,SACI/wB,EACAyqB,EACAuG,EACAxU,GAEQ,IAAArR,EAAsBnL,EAAO,QAAjBgL,GAAK,YAAKhL,EAAxB,aAEN,OAAKmL,GASE,gCACAH,GAAK,CACRyf,OAAM,EACNuG,gBAAe,EACfxU,eAAc,EACdrR,QAAS,CACLomB,YAAapmB,EAAQomB,YACrBj1B,KAAM6O,EAAQ9F,SACdiH,QAASnB,EAAQuW,cAhBd,gCACA1W,GAAK,CACRyf,OAAM,EACNuG,gBAAe,EACfxU,eAAc,GAe1B,EACJ,EAjJA,G,GCTA,YACI,WAAYpgB,GAAZ,MACI,YAAMA,GAAW,qCAAmC,K,OAEpD,EAAKE,KAAO,mCACZ,EAAKC,KAAO,2B,CAChB,CACJ,OAP8D,oBAO9D,EAPA,CAA8D,G,GCW9D,WACI,WACY4tB,GAAA,KAAAA,eAAAA,CACT,CAoDP,OAlDI,YAAAqG,UAAA,SAAU5c,EAAiB,G,IAAA,aAAmD,CAAC,EAAC,EAAnD2X,EAAO,UAAEf,EAAM,SAClCiB,EAAM,0BAA0B7X,EAChC7W,GAAU,eACZyuB,OAAQ,WACLF,IAUP,OAAO3tB,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAChCjB,OAAQ,CACJwC,QAASY,IAAa,oBAVd,CACZ,WACA,sCACA,kCACA,qCACA,kCAOYpD,GAAUA,EAAOwC,SAAW,MAGxCjwB,QAAO,EACPwuB,QAAO,GAEf,EAEA,YAAAqF,YAAA,SAAY9zB,EAAiC,G,IAAA,aAAkD,CAAC,EAAC,EAAlDC,EAAO,UAAEwuB,EAAO,UAG3D,OAAO5tB,KAAKwsB,eAAe8C,KAFf,iCAEoD,CAC5DnwB,KAAI,EACJC,SAAS,IAAA2C,SAAO,eACZ,qBAAsB3C,GAAWA,EAAQk0B,iBACtC3F,IACJ,EAAAkG,OACHjG,QAAO,IACRN,OAAM,SAAA3tB,GACL,GAAwB,6BAApBA,EAAMR,KAAKP,KACX,MAAM,IAAI,GAGd,MAAMe,CACV,GACJ,EAEA,YAAA8zB,cAAA,SAAcxd,EAAiB,G,IAAE2X,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAC9BE,EAAM,kCAAkC7X,EAE9C,OAAOjW,KAAKwsB,eAAe8C,KAAKxB,EAAK,CAAEF,QAAO,EAAExuB,QAASuuB,IAC7D,EACJ,EAvDA,G,GCUA,WACI,WACYmG,EACAC,EACAC,EACAC,GAJZ,WACY,KAAAH,sBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,2BAAAA,EACA,KAAAC,iCAAAA,EA8BZ,KAAAC,yBAAqD,SAAC,G,IAClDxsB,EAAQ,WACRqc,EAAS,YACThT,EAAY,eACZ8G,EAAM,SACNsc,EAAO,UACPC,EAAoB,uBACpBC,EAA4B,+BAE5B,OAAO,SAAArJ,GACH,IAAI4I,EAEA7iB,EACA6iB,EAAc,CAAEU,iBAAkB,CAAEC,aAAcxjB,IAC3CqjB,IACPR,EAAc,CACVU,iBAAkB,CACdE,yBAA0BJ,EAC1BK,iCAAkCJ,GAAgC,QAK9E,IAAMhyB,EAAU,EAAK2xB,2BAA2BlyB,UAAU,CAAEiiB,UAAS,EAAErc,SAAQ,EAAEksB,YAAW,GAAI5I,EAAM9P,YAEtG,OAAO,IAAAsL,SACH,IAAAwH,KAAG,IAAApB,cAAahgB,GAAkB8nB,oCAClCC,QAAQC,KAAK,CAAC,EAAKd,sBAAsBI,yBAAyB7xB,EAASwV,GAASsc,GAASjxB,OAAOqgB,UAC/FwJ,MAAK,WAAM,WAAAH,cAAahgB,GAAkBioB,kCAA/B,KAClBpK,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBnhB,GAAkBkoB,+BAAgCn1B,EAAnE,IAE5B,CACJ,CA9DG,CA+DP,OA7DI,YAAAo1B,cAAA,SAAcvnB,GAAd,WACI,OAAO,SAAAwd,GAAS,WAAAxE,SACZ,IAAAwH,KAAG,IAAApB,cAAahgB,GAAkBooB,0BAClC,IAAAvG,QAAM,6D,yEAES,O,sBAAA,GAAMzuB,KAAK8zB,sBAAsBiB,cACpC/0B,KAAKg0B,2BAA2BlyB,UAAU0L,EAASwd,EAAM9P,c,cAK7D,MAAO,CAAP,EAAO,U,OAFkB,O,WAAA,GAAMlb,KAAKi0B,iCAAiCgB,OAAO,I,OAErE,OAFDC,EAAmB,SAElB,GAAMl1B,KAAK8zB,sBAAsBiB,cACpC/0B,KAAKg0B,2BAA2BlyB,WAAU,gCAAK0L,GAAO,CAAE0nB,iBAAgB,IAAIlK,EAAM9P,c,2BAIzFuP,MACG,IAAA8I,YAAU,SAAC,G,IAAEp0B,EAAI,OAAO,WAAAqnB,QACpB,EAAKuN,oBAAoBhB,kBAAzB,CAA4C/H,IAC5C,IAAAgD,KAAG,IAAApB,cAAahgB,GAAkBkB,uBAAwB3O,IAFtC,MAKlCsrB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiBnhB,GAAkBuoB,oBAAqBx1B,EAAxD,IAtBR,CAwBpB,EAoCJ,EArEA,G,GCpBA,WAKI,WACYy1B,GAAA,KAAAA,QAAAA,CACT,CA4BP,OA1BI,YAAAL,cAAA,SAAc1yB,GAAd,WACI,OAAO,IAAIsyB,SAAQ,SAACU,EAASC,GACzB,EAAKF,QAAQL,cAAc1yB,GAAS,SAAC1C,EAAYL,GACzCK,EACA21B,EAAO,EAAKC,mBAAmB51B,IAE/B01B,EAAQ,EAAKE,mBAAmBj2B,GAExC,GACJ,GACJ,EAEA,YAAA40B,yBAAA,SAAyB7xB,EAA6BwV,GAAtD,WACI,OAAO,IAAI8c,SAAQ,WACf,EAAKS,QAAQlB,yBAAyB7xB,EAAS,KAAMwV,EACzD,GACJ,EAEQ,YAAA0d,mBAAR,SAA2Bj2B,GACvB,MAAO,CACHF,QAASE,EAASF,QAClBD,KAAMG,EAAS2E,KACf5E,OAAQC,EAASD,OACjBm2B,WAAYl2B,EAASk2B,WAE7B,EACJ,EAnCA,GCIe,SAASC,GACpB5b,EACA9H,GAEA,IAAI2jB,EAQJ,OCnBW,SAA8B7b,GAGzC,YAAoC,IAFbA,EAEMnU,EACjC,CDSQiwB,CAAqB9b,GACrB6b,EAAY7b,EAAQnU,GACbqM,GAAgBA,EAAa3R,SACpCs1B,EAAY3jB,EAAa,GAAGrM,IAGzB,CACHA,GAAIgwB,EACJ5b,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBC,QAASH,EAAQG,QACjB4b,aAAc/b,EAAQI,SACtB4b,aAAchc,EAAQK,SACtBC,KAAMN,EAAQM,KACd2b,SAAUjc,EAAQO,gBAClB2b,aAAclc,EAAQmc,oBACtBC,SAAUpc,EAAQS,WAClBsI,QAAS/I,EAAQ+I,QACjBvI,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQU,MACfC,aAAcX,EAAQW,aAE9B,C,SEvCA,WACI,WAAoB0b,GAAA,KAAAA,eAAAA,CAAyB,CAKjD,OAHI,YAAAC,UAAA,SAAUxE,GACN,OAAOlK,KAAK2O,MAAMzE,EAASlK,KAAK4O,IAAI,GAAIr2B,KAAKk2B,gBACjD,EACJ,EANA,GCGA,ICHKI,GDGCC,GAAc,CAChB,oBACA,sBACA,qBACA,oBACA,iBAQW,SAASC,GAAoBC,GACxC,MAAO,CACHn2B,KAAMm2B,EAAOn2B,KACbo2B,SAAUD,EAAOE,YACjBC,aAAcL,GAAY3P,QAAQ6P,EAAOI,YAEjD,CEde,SAASC,GAA6BC,GACjD,MAAO,CACHz2B,KAAMy2B,EAAgBz2B,KACtB02B,iBAAkBD,EAAgBE,KAClCC,iBAAkBH,EAAgBI,UAClCJ,gBAAiB,CACbK,QAASL,EAAgBK,QACzB92B,KAAMy2B,EAAgBz2B,KACtB+2B,aAAcN,EAAgBM,cAG1C,CCRe,SAASC,GACpBC,EACAC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,MAEQ75B,OAAOyF,KAAKk0B,GACf93B,QAAO,SAACC,EAAQhC,GAAQ,2BAClBgC,EACC63B,EAAQ75B,GAAoB2C,KAAI,SAAC8N,GACjC,MAAY,qBAARzQ,ECfL,SACXyQ,EACAqpB,GAEA,IAAME,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH9xB,GAAIyI,EAAKzI,GACTiyB,SAAU,GACVh5B,KAAMwP,EAAKxP,KACXgzB,OAAQxjB,EAAKwjB,OACbiG,oBAAqBzpB,EAAKwjB,OAC1B+E,SAAU,EACVmB,cAAeH,EAAkBvB,UAAUhoB,EAAKwjB,QAChDmG,2BAA4BJ,EAAkBvB,UAAUhoB,EAAKwjB,QAC7DoG,iBAAkBL,EAAkBvB,UAAUhoB,EAAKwjB,QACnDqG,8BAA+BN,EAAkBvB,UAAUhoB,EAAKwjB,QAChEsG,gBAAiB,EACjBvG,SAAU,EACVwG,OAAQ/pB,EAAK+pB,OACbtG,UAAWzjB,EAAKyjB,UAChBhzB,KAAM,4BACNu5B,WAAY,GACZ5G,UAAW,KAEnB,CDT2B6G,CAAqCjqB,EAAMqpB,GEXvD,SACXrpB,EACAvP,EACA44B,EACAC,QAAA,IAAAA,IAAAA,EAAA,MAEA,IAAMC,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH9xB,GAAKyI,EAAKspB,GACVE,SAAUxpB,EAAKwpB,SACfhG,OAAQxjB,EAAKkqB,kBACbT,oBAAqBzpB,EAAKsjB,kBAC1BiF,SAAUvoB,EAAKmqB,eACfT,cAAeH,EAAkBvB,UAAUhoB,EAAKkqB,mBAChDP,2BAA4BJ,EAAkBvB,UAAUhoB,EAAKsjB,mBAC7DwG,gBAAiBP,EAAkBvB,UAAUhoB,EAAKmqB,gBAClDP,iBAAkBL,EAAkBvB,UAAUhoB,EAAKoqB,WACnDP,8BAA+BN,EAAkBvB,UAAUhoB,EAAKqqB,WAChEC,iBAAmBtqB,EAAqBuqB,gBACxC/5B,KAAMwP,EAAKxP,KACX+yB,SAAUvjB,EAAKujB,SACfiH,MAAOxqB,EAAKwqB,MACZC,IAAKzqB,EAAKyqB,IACVC,cAAe1qB,EAAK0qB,cACpBtH,UAAWpjB,EAAKojB,UAChBD,UAAWnjB,EAAKmjB,UAChB6G,YAAahqB,EAAK1L,SAAW,IAAIpC,KAAI,SAAAy4B,GAAU,OAC3Cn6B,KAAMm6B,EAAOn6B,KACbJ,MAAOu6B,EAAOv6B,MAF6B,IAI/Cw6B,iBAAkB5qB,EAAK4qB,iBACvBn6B,KAAI,EAEZ,CFpBuBo6B,CACH7qB,EASpB,SAAmCvP,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,GAEnB,CAtBoBq6B,CAA0Bv7B,GAC1B85B,EACAC,EAER,IAbqB,GActB,GACX,CGjBe,SAASyB,GAAkB5R,GACtC,ICZ+C6R,EACzCC,EDWA5B,EAAgBlQ,EAASpgB,KAAK+pB,SAASuG,cACvCE,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH9xB,GAAI4hB,EAASpgB,KAAKxB,GAClBmd,MAAOyU,GAAuBhQ,EAASpgB,KAAKwf,UAAW8Q,GACvDvG,SAAU3J,EAASpgB,KAAK+pB,SAAS3wB,KACjCm2B,OAAQ,CACJO,kBAAkB,IAAAv3B,QAAO6nB,EAASpgB,KAAKqB,SAAS,SAAC8wB,EAAK5C,GAClD,OAAO4C,EAAM5C,EAAOO,gBACxB,GAAG,GACHzuB,QAAS+e,EAASpgB,KAAKqB,QAAQlI,IAAIm2B,KAEvCE,SAAU,CACN/E,OAAQrK,EAASpgB,KAAKoxB,eACtBT,cAAeH,EAAkBvB,UAAU7O,EAASpgB,KAAKoxB,iBAE7DgB,uBC7B2CH,ED6BO7R,EAAS6R,WC5BzDC,EAAwC,IAE7CD,GAAc,IAAIrmB,SAAQ,SAAAymB,IACtBA,EAAUC,SAAW,IAAI1mB,SAAQ,SAAA2mB,GAC9BL,EAAc5qB,KAAK,CACfkrB,aAAc,GACd9C,aAAc,KACdn4B,QAAS,GACTk7B,YAAaF,EAAOG,MAE5B,GACJ,IAEOR,GDgBHrC,gBAAiB,CACb8C,uBAAuB,IAAAp6B,QAAO6nB,EAASxe,kBAAkB,SAACuwB,EAAKS,GAC3D,OAAOT,EAAMS,EAAY7C,IAC7B,GAAG,GACH8C,yBAAyB,IAAAC,OAAM1S,EAASxe,iBAAiBzI,IAAIy2B,IAA+B,SAEhGxlB,SAAU,CACNqgB,OAAQrK,EAAS2S,kBACjBpC,cAAeH,EAAkBvB,UAAU7O,EAAS2S,mBACpDC,qBAAsB5S,EAAS6S,2BAC/BC,4BAA6B1C,EAAkBvB,UAAU7O,EAAS6S,4BAClE/W,UAAU,IAAAxF,MAAK0J,EAASpgB,KAAKwf,UAAUC,eAAe,SAAA0T,GAAY,OAAAA,EAASC,kBAAT,KAEtEC,SAAU,CACN5I,OAAQrK,EAASiT,SACjB1C,cAAeH,EAAkBvB,UAAU7O,EAASiT,WAExD/S,YAAa,CACTmK,OAAQrK,EAASje,SAAWie,EAASje,SAASme,YAAc,GAEhEgT,YAAa,CACT7I,OAAQrK,EAASmT,SACjB5C,cAAeH,EAAkBvB,UAAU7O,EAASmT,WAExDC,MAAOpT,EAASoT,MAChBD,SAAU,CACN9I,OAAQrK,EAASmT,SACjB5C,cAAeH,EAAkBvB,UAAU7O,EAASmT,WAExDE,SAAU,CACNhJ,OAAQrK,EAASsT,kBACjB/C,cAAeH,EAAkBvB,UAAU7O,EAASsT,oBAExDrT,WAAY,CACRoK,OAAQrK,EAASC,WACjBsQ,cAAeH,EAAkBvB,UAAU7O,EAASC,aAGhE,ELxEA,SAAK+O,GACD,sBACA,4BACA,qCACA,mCACA,kDACA,uCACA,uCACA,iDACA,2CACA,+CACA,mDACA,uCACA,qCACA,2CACA,0BACA,gCACA,kCACA,yDACA,4CACH,CApBD,CAAKA,KAAAA,GAAwB,KAqB7B,YOVe,SAASuE,GAAsBxxB,EAAoB1E,GAC9D,IAAMmV,EAAYzQ,EAASyQ,WAAanV,EAAemV,WAAa,GAC9DC,EAAW1Q,EAAS0Q,UAAYpV,EAAeoV,UAAY,GAEjE,MAAO,CACH+gB,WAAYzxB,EAASyxB,WAAa,IAAIz6B,KAAI,SAAAwZ,GAAW,OAAA4b,GAAqB5b,EAArB,IACrDkhB,WAAY1xB,EAAS3D,GACrB2oB,QAAShlB,EAASglB,QAClB7G,YAAane,EAASme,YACtBqH,MAAOxlB,EAASwlB,OAASlqB,EAAekqB,OAAS,GACjD/U,UAAS,EACTC,SAAQ,EACRpb,KAAM0K,EAAS2xB,UAAY,CAAClhB,EAAWC,GAAUna,KAAK,KACtDq7B,kBAAmB5xB,EAAS6xB,eAAiB7xB,EAAS6xB,cAAcv8B,KAE5E,C,SCtBA,wBA+BA,QA9BI,YAAAw8B,OAAA,SAAO58B,GACG,MAA0BA,EAAM2C,MAAM,IAAI6B,OAAO,cAAhD,OAAAq4B,OAAK,IAAG,KAAE,EAAE,OAAAC,OAAI,IAAG,KAAE,EACtBC,EAAeF,EAAMjK,MAAM,EAAG,GAC9BoK,EAA8B,IAAhBF,EAAKj7B,OAAei7B,EAAKlK,OAAO,GAAMkK,EAAOA,EAAKlK,MAAM,EAAG,GAAKiK,EAAMjK,MAAM,GAGhG,OAAI5yB,EAAM6B,OAAS,EACRg7B,EAIP78B,EAAM6B,OAAS,IAAMm7B,EACdD,EAGDA,QAAoCC,CAClD,EAEA,YAAAC,SAAA,SAASj9B,GACC,MAA0BA,EAAM2C,MAAM,IAAI6B,OAAO,cAAhD,OAAAq4B,OAAK,IAAG,KAAE,EAAE,OAAAC,OAAI,IAAG,KAAE,EAE5B,MAAK,QAAQI,KAAKL,IAAW,QAAQK,KAAKJ,GAInC,CACHD,MAAwB,IAAjBA,EAAMh7B,OAAe,IAAIg7B,EAAUA,EAAMjK,MAAM,EAAG,GACzDkK,KAAsB,IAAhBA,EAAKj7B,OAAe,KAAKi7B,EAASA,EAAKlK,MAAM,EAAG,IAL/C,CAAEiK,MAAO,GAAIC,KAAM,GAOlC,EACJ,EA/BA,GCJM,GAA+B78B,QAAQ,kB,GCK7C,wBA8BA,QA7BI,YAAA28B,OAAA,SAAO58B,GACK,IAAAkjB,GAAS,KAAAia,QAAOn9B,GAAM,KAE9B,IAAKkjB,EACD,OAAOljB,EAGX,IAAMo9B,GAAY,IAAAjU,MAAI,KAAAkU,gBAAer9B,GAAO8B,KAAI,SAAAw7B,GAAQ,WAAAnU,KAAImU,EAAKC,QAAT,KAClDC,EAAmB/7B,KAAKg8B,SAASz9B,GAAO4yB,MAAM,EAAGwK,GAEvD,OAAOla,EAAKwa,KACP/4B,QAAO,SAAAg5B,GAAY,OAAAH,EAAiB37B,OAAS87B,CAA1B,IACnBz8B,QAAO,SAAC08B,EAAQD,EAAUx5B,GAAU,MACjC,CACIy5B,EAAOhL,MAAM,EAAG+K,EAAWx5B,GAC3By5B,EAAOhL,MAAM+K,EAAWx5B,IAC1B9C,KAnBO,IAewB,GAKlCm8B,EACX,EAEA,YAAAC,SAAA,SAASz9B,GAGL,OAFiB,KAAAm9B,QAAOn9B,GAAM,KAMvBA,EAAMiF,QAAQ,IAAIT,OA9BR,IA8BiC,KAAM,IAH7CxE,CAIf,EACJ,EA9BA,GCYe,SAAS69B,GAAmB/uB,EAAcgvB,QAAA,IAAAA,IAAAA,EAAA,IACrD,IAkF2BnU,EACrBrF,EAnFA2U,EAAgBnqB,EAAM4jB,SAASuG,cAC/BE,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH9xB,GAAI2H,EAAM4I,QACV4M,MAAOyU,GAAuBjqB,EAAMqZ,UAAWrZ,EAAM4jB,SAASuG,cAAe,aAC7EvhB,QAAS5I,EAAM4I,QACfgb,SAAU5jB,EAAM4jB,SAAS3wB,KACzBg8B,qBAAsBjvB,EAAMivB,qBAC5B9uB,QAAS+uB,GAA0BlvB,EAAM6a,SAAUmU,EAAU7uB,SAC7D+sB,SAAU,CACN5I,OAAQtkB,EAAMmvB,WACd3E,cAAeH,EAAkBvB,UAAU9oB,EAAMmvB,aAErD/F,OAAQ,CACJO,kBAAkB,IAAAv3B,QAAO4N,EAAM9E,SAAS,SAAC8wB,EAAK5C,GAC1C,OAAO4C,EAAM5C,EAAOO,gBACxB,GAAG,GACHzuB,QAAS8E,EAAM9E,QAAQlI,IAAIm2B,KAE/BE,SAAU,CACN/E,OAAQtkB,EAAMirB,eACdT,cAAeH,EAAkBvB,UAAU9oB,EAAMirB,iBAErD/qB,MAAO8uB,EAAU/uB,WACjBF,YAAaivB,EAAUjvB,YACvBksB,sBAAuB,GACvBvC,iBAuDuB7O,EAvDgB7a,EAAM6a,SAwD3CrF,GAAQ,IAAA3f,QAAOglB,EAAU,CAAEK,WAAY,oBAEtC,CACHsR,uBAAuB,IAAAp6B,QAAOojB,GAAO,SAACwW,EAAKlrB,GAAS,OAAAA,EAAKwjB,OAAS0H,CAAd,GAAmB,GACvEU,yBAAyB,IAAAC,OAAMnX,EAAMxiB,KAAI,SAAA8N,GAAQ,OAC7C7N,KAAM6N,EAAKjO,OAAOI,KAClB02B,iBAAkB7oB,EAAKwjB,OACvBuF,iBAAkB/oB,EAAKjO,OAAOi3B,UAC9BJ,gBAAiB,CACbK,QAASjpB,EAAKwjB,OAASxjB,EAAKjO,OAAOi3B,UACnC72B,KAAM6N,EAAKjO,OAAOI,KAClB+2B,aAAc,IAP2B,IAS5C,UApELoF,WAAYC,GAA4BrvB,GACxChO,OAAQgO,EAAMhO,OACds9B,gBAAiBtvB,EAAMsvB,gBACvBC,eAAgBvvB,EAAMuvB,eACtBC,WAAYxvB,EAAMwvB,WAClBvrB,SAAU,CACNqgB,OAAQtkB,EAAM4sB,kBACdpC,cAAeH,EAAkBvB,UAAU9oB,EAAM4sB,mBACjDC,qBAAsB7sB,EAAM8sB,2BAC5BC,4BAA6B1C,EAAkBvB,UAAU9oB,EAAM8sB,6BAEnE3S,YAAa,CACTmK,OAAQmL,GAAiBzvB,EAAM6a,WAEnCwS,MAAOrtB,EAAMqtB,MACbD,SAAU,CACN9I,OAAQtkB,EAAMotB,SACd5C,cAAeH,EAAkBvB,UAAU9oB,EAAMotB,WAErDE,SAAU,CACNhJ,OAAQtkB,EAAMutB,kBACd/C,cAAeH,EAAkBvB,UAAU9oB,EAAMutB,oBAErDrT,WAAY,CACRoK,OAAQtkB,EAAM0vB,YACdlF,cAAexqB,EAAM2vB,sBAGjC,CAoBA,SAASF,GAAiB5U,GACtB,IAAM/Z,GAAO,IAAA0P,MAAKqK,EAAU,CAAEK,WAAY,gBAE1C,OAAOpa,EAAOA,EAAKwjB,OAAS,CAChC,CAoBA,SAAS4K,GAA0BrU,EAA0B1a,QAAA,IAAAA,IAAAA,EAAA,IACzD,IA7BgCnO,EA6B1B8O,GAAO,IAAA0P,MAAKqK,EAAU+U,IAE5B,OAAK9uB,EAIE,CACHzI,GAAIyI,EAAKoa,WACTlpB,QArC4BA,EAqCO8O,EAAKjO,OAAOwoB,KApC5C,kBAAkBrpB,GAqCrB69B,SAAU/uB,EAAKjO,OAAOi9B,aACtBC,UAAW5vB,EAAQ4vB,WAPZ,CAAC,CAShB,CAEA,SAASH,GAAsBzvB,GAC3B,MAA8B,oBAAvBA,EAAQ+a,YAA2D,gBAAvB/a,EAAQ+a,UAC/D,CAEA,SAASmU,GAA4BrvB,GACjC,IAAMgwB,EAAiE,CAAC,EAUxE,OATc,oBACPhwB,EAAMqZ,UAAUC,cAChBtZ,EAAMqZ,UAAUwK,cAGjBpe,SAAQ,SAAA3E,GAOlB,IAAiCksB,EANzBgD,EAAiBlvB,EAAKzI,KAMG20B,EAN2BlsB,EAO1C,CAAC,KAAM,KAAM,MAEd1O,QAAO,SAACg9B,EAAYn8B,GAC7B,IAAM6N,EAAOksB,EAASiD,cAAe,IAAAzf,MAAKwc,EAASiD,aAAa,SAAAnvB,GAAQ,OAAAA,EAAK7N,OAASA,CAAd,IAExE,OAAK6N,GAILsuB,EAAWn8B,GAAQ,CACf3B,KAAM07B,EAAS17B,KACf4+B,YAAalD,EAAS17B,KACtB6+B,MAAOnD,EAAS1C,SAChB7J,IAAK3f,EAAKsvB,KACVC,UAAWvvB,EAAKyrB,KAChB+D,YAAaxvB,EAAKsvB,KAClBG,YAAazvB,EAAK0vB,QAClBC,YAAa3vB,EAAK7N,MAGfm8B,GAdIA,CAef,GAAG,CAAC,GA3BJ,IAEOY,CACX,CC7Ie,SAASU,GAA4BjF,EAAwBkF,GACxE,MAAO,CACHT,YAAazE,EAAOyE,YACpBpgC,OAAQ27B,EAAOl6B,KACfq/B,MAAOnF,EAAOoF,KACdx4B,GAAIozB,EAAOpzB,GACXy4B,SAAUH,EACVI,cAAetF,EAAOsF,cACtBzG,SAAUmB,EAAOnB,SACjB0G,YAAavF,EAAOuF,YAE5B,C,SCDA,wBACY,KAAAC,qBAAuB,IAAI,GAC3B,KAAAC,qBAAuB,IAAI,EA6IvC,QA3II,YAAAz8B,UAAA,SAAU0L,EAAkBgxB,GACxB,ICrBoCjd,EDqB9B5c,EAAiB65B,EAAc75B,eAAegW,oBAC9C2M,EAAWkX,EAAclX,SAAStL,cAClC3S,EAAWm1B,EAAcn1B,SAASqS,cAClCrO,EAAQmxB,EAAcnxB,MAAM0a,WAC5B7G,EAAgBsd,EAAc5a,eAAeE,iBAAiBtW,EAAQ9F,SAAU8F,EAAQuW,WACxFzB,EAAkBtiB,KAAKy+B,oBAAoBD,EAAetd,GAC1DnP,EAAeysB,EAAczsB,aAAa2T,kBAC1CgZ,EAAiBF,EAAczsB,aAAaiU,oBAC5CvH,EAAc+f,EAAcxU,OAAO3L,iBACnCsgB,EAAgBH,EAAcxU,OAAOrL,mBACrCigB,EAAiBJ,EAAcvd,YAAYe,qBAC3C6c,EAAcL,EAAc5a,eAAeC,wBAC3CwY,EAAYmC,EAAcnxB,MAAM4a,eAChC6W,EAAmBz1B,GAAY1E,GAAkBk2B,GAAsBxxB,EAAU1E,GAEjFo6B,EAAYH,GAAkBpxB,EAAQomB,cCpCRrS,EDqCX/T,EAAQomB,YCpC9BrQ,QAAShC,EAAiCxQ,eAW9C,SAAsCwQ,GACzC,IAAMyd,EAAuBzd,EAA4D+S,iBAEzF,QAAK0K,IAI8C,iBAArCA,EAAoBzK,cAC9BhR,QAAQyb,EAAoBzK,cAAgByK,EAAoBzK,aAAahnB,OACrF,CDgByD0xB,CAA6BzxB,EAAQomB,cAC/E4K,EAAchxB,QAAQkP,kBAAiB,KAAKkiB,EAAeM,iBAC9DV,EAAchxB,QAAQkP,kBAE1B,IAAKqiB,EACD,MAAM,IAAI,GAAiB3oB,GAAqBY,qBAGpD,MAAO,CACHke,iBAAkB1nB,EAAQ0nB,iBAC1B6J,UAAS,EACT11B,SAAUy1B,EACVn6B,eAAgBA,GAAkB8wB,GAAqB9wB,GACvD2d,gBAAiBA,GAAmBmT,GAAqBnT,EAAiBvQ,GAC1E2sB,eAAgBA,GAAkBX,GAA4BW,GAAgB,GAC9Ex3B,KAAMogB,GAAY4R,GAAkB5R,GACpCja,MAAOA,GAAS+uB,GAAmB/uB,EAAOgvB,GAC1CA,UAAS,EACT7uB,QAASA,EAAQomB,YACjB1S,cAAeA,GAAiBlhB,KAAKm/B,wBAAwBje,GAC7Dke,UAAW,CACPC,SAAS,gCACFR,GAAW,CACdS,eAAgBX,GAAiBA,EAAcW,kBAGvDC,OAAQ,8BACRvU,OAAO,IAAA3c,MAAKoQ,GAAeA,EAAY+gB,aAAc,CACjD,YACA,UACA,gBACA,cAGZ,EAEA,YAAAC,4BAAA,SAA4B3hB,EAA2B7Z,EAA2B6kB,GACtE,IAAAoM,EAAoHjxB,EAAI,iBAAtG86B,EAAkG96B,EAAI,UAA3FqjB,EAAuFrjB,EAAI,SAAjF+lB,EAA6E/lB,EAAI,OAAzEoJ,EAAqEpJ,EAAI,MAAlEo4B,EAA8Dp4B,EAAI,UAAvD,EAAmDA,EAAI,QAAvDuJ,OAAO,IAAG,GAAC,EAAC,EAAE0T,EAAqCjd,EAAI,cAA1By7B,EAAsBz7B,EAAI,kBAC1H+gB,EAAcsC,GAAYA,EAASvV,aAAa,GAChDuQ,EAAkB0C,GAAeA,EAAY1C,gBAC7Coc,EAAiB1Z,GAAeA,EAAYiB,uBAElD,MAAO,CACHiP,iBAAgB,EAChB6J,UAAS,EACT7d,cAAeA,GAAiBlhB,KAAKm/B,wBAAwBje,GAC7D7X,SAAUgE,GAASA,EAAM1I,gBAAkB2iB,GAAYuT,GAAsBvT,EAASje,SAAUgE,EAAM1I,gBACtGA,eAAgB0I,GAASA,EAAM1I,gBAAkB8wB,GAAqBpoB,EAAM1I,gBAC5E2d,gBAAiBA,GAAmBgF,GAAYmO,GAAqBnT,EAAiBgF,EAASvV,cAC/F2sB,eAAgBA,GAAkBX,GAA4BW,GAAgB,GAC9Ex3B,KAAMogB,GAAY4R,GAAkB5R,GACpCja,MAAOA,GAAS+uB,GAAmB/uB,EAAOgvB,GAC1CA,UAAS,EACT7uB,QAASxN,KAAK2/B,4BAA4B7hB,EAAQtQ,EAASsb,GAC3DsW,UAAW,CACPC,SAAS,gCACFK,GAAiB,CACpBJ,eAAgBtV,GAAUA,EAAO5L,QAAQkhB,kBAGjDC,OAAQ,8BACRvU,MAAOhB,IAAU,IAAA3b,MAAK2b,EAAOvL,YAAY+gB,aAAc,CACnD,YACA,UACA,gBACA,cAGZ,EAEQ,YAAAL,wBAAR,SAAgCje,GAC5B,MAA6B,iBAAzBA,EAAczI,QAA8ByI,EAAcvS,QAI1DuS,EAAc0e,oBAAsB1e,EAAc0e,mBAAmBjxB,SAC9D,gCAAKuS,GAAa,CAAExb,GAAIwb,EAAc0e,mBAAmBjxB,UAGhEuS,EAAcxb,KAAO,oBACd,gCAAKwb,GAAa,CAAExb,GAAI,sBAG5Bwb,GAXI,gCAAKA,GAAa,CAAEvS,QAASuS,EAAcxb,IAY1D,EAEQ,YAAAi6B,4BAAR,SACI7hB,EACAtQ,EACAsb,GAEA,MAAO,iBAAkBtb,GAAS,gCAEvBA,GAAO,CACVqyB,MAAO/hB,EAAOgiB,qBACdC,SAAUjiB,EAAOkiB,wBAA0BhgC,KAAKu+B,qBAAqBvC,SAASle,EAAOkiB,wBACrFC,gBAAiBnX,KAClB,gCAEItb,GAAO,CACVqyB,MAAO/hB,EAAOoiB,SACdC,SAAUngC,KAAKs+B,qBAAqB9C,SAAS1d,EAAOsiB,YAAc,IAClEC,OAAQviB,EAAOwiB,UAAY,GAC3BP,SAAU//B,KAAKu+B,qBAAqBvC,SAASle,EAAOyiB,YAAc,IAClEN,gBAAiBnX,GAE7B,EAEQ,YAAA2V,oBAAR,SAA4BD,EAA0Ctd,G,YAClE,GAAIA,EAAe,CACf,IAAMsf,EAAwD,QAA1C,EAAmC,QAAnC,EAAGtf,EAAc0e,0BAAkB,eAAEa,aAAK,eAAEC,QAC1DC,EAAyD,QAA1C,EAAmC,QAAnC,EAAGzf,EAAc0e,0BAAkB,eAAEa,aAAK,eAAEE,gBAC3D5uB,EAAeysB,EAAczsB,aAAa2T,kBAC1Ckb,EAAW7uB,aAAY,EAAZA,EAAc4Y,OAAM,SAAA3F,GAAe,OAAAA,EAAYC,oBAAZ,IAEpD,GAAIub,GAAkBI,GAAgC,SAApBD,EAC9B,M,CAIR,OAAOnC,EAAclc,gBAAgBrG,oBACzC,EACJ,EA/IA,GElBA,IAAY4kB,IAAZ,SAAYA,GACR,mEACA,0EACA,uEACH,CAJD,CAAYA,KAAAA,GAAgB,K,SCO5B,YACI,WAAYpiC,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAPkD,oBAOlD,EAPA,CAAkD,G,GCOlD,WACI,WACYkiC,EACAtR,GADA,KAAAsR,0BAAAA,EACA,KAAAtR,uBAAAA,CACT,CAiWP,OA/VI,YAAAuR,uBAAA,SACI/b,EACAviB,GAFJ,WAII,OAAO,SAAAuoB,GACH,IAAM/oB,EAAQ+oB,EAAM9P,WAGpB,IAFiBjZ,EAAMqlB,SAAStL,cAG5B,MAAM,IAAI,GAAiB5F,GAAqBK,iBAGpD,IAAMoD,EAAU,EAAKmnB,uBAAuBhc,GAAeA,EAAYnL,QAAUmL,EAAY1C,gBAEvF2e,EAAsBh/B,EAAM8P,aAAa8T,wBAAwBhM,GAEvE,IAAKonB,EACD,MAAM,IAAI,GAAqB,kDAGnC,IAAMva,EAAY,EAAKwa,iBACnBlc,EAAY0B,UACZua,EACAh/B,EAAMiF,KAAKsW,WAGf,OAAKkJ,EAAUtmB,OAIR,EAAK+gC,kBAAkB,CAC1Bz7B,GAAIu7B,EAAoBv7B,GACxBmU,QAAO,EACP6M,UAAS,GACVjkB,EAJI,CAIKuoB,GAPD,EAAKoW,kBAAkBH,EAAoBv7B,GAAIjD,EAA/C,CAAwDuoB,EAQvE,CACJ,EAEA,YAAAqW,qBAAA,SACIrc,EACAviB,GAFJ,WAII,OAAO,SAAAuoB,GACH,IAAM/oB,EAAQ+oB,EAAM9P,WACdrB,EAAU,EAAKmnB,uBAAuBhc,GAAeA,EAAYnL,QAAUmL,EAAY1C,gBACvF2e,EAAsBh/B,EAAM8P,aAAa8T,wBAAwBhM,GAEvE,OAAO,EAAKynB,2BAA2B,CACnC57B,GAAIu7B,GAAuBA,EAAoBv7B,GAC/CmU,QAAO,EACP6M,UAAW,EAAK6a,cACZvc,EAAY0B,UACZua,EACAh/B,EAAMiF,KAAKsW,YAEhB/a,EARI,CAQKuoB,EAChB,CACJ,EAEA,YAAAwW,qBAAA,SACI97B,EACAjD,GAFJ,WAII,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMzqB,EAAQ+oB,EAAM9P,WACdoM,EAAWrlB,EAAMqlB,SAAStL,cAC1BjK,EAAe9P,EAAM8P,aAAa2T,kBAExC,IAAK4B,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpD,IAAK1E,IAAiBA,EAAa3R,OAC/B,MAAM,IAAI,GAAiBgW,GAAqBI,qBAGpD,IAAMirB,EAAwB,CAC1B/7B,GAAIqM,EAAa,GAAGrM,GACpBg8B,iBAAkBh8B,GAGhBi8B,EAAkB,CACpBj8B,GAAIqM,EAAa,GAAGrM,IAGxBgnB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBmM,mCAA+B9O,EAAWg+B,IAE3F,EAAKb,0BAA0BK,kBAAkB7Z,EAAS5hB,GAAI+7B,EAAuBh/B,GAChFsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cACVtmB,EAAsBM,8BACtBzH,EACAwiC,IAGJjV,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBACXjnB,EAAsBoM,2BACtBpT,EACAqiC,GAER,GACR,GAzCgB,CA0CpB,EAEA,YAAAC,oBAAA,SAAoBn/B,GAApB,WACI,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMpF,EAAW0D,EAAM9P,WAAWoM,SAAStL,cAE3C,IAAKsL,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpDiW,EAASC,MAAK,IAAAC,cAAatmB,EAAsB2L,+BAEjD,EAAKud,uBAAuBG,aAAarI,EAAS5hB,IAAI,gCAC/CjD,GAAO,CACVoqB,OAAQ,CACJwC,QAAS,CAACwR,GAAiBgB,8BAGlC9U,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBO,6BAA8B1H,IAC/EutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBjnB,EAAsB4L,0BAA2B5S,GACtF,GACJ,GAtBgB,CAuBpB,EAEA,YAAAsvB,cAAA,SACI/U,EACApX,GAFJ,WAII,OAAO,SAAAuoB,GACH,IAAMhG,EAAc,EAAK8c,6BAA6BjoB,EAASmR,GACzDjZ,EAAeiZ,EAAM9P,WAAWnJ,aAAa2T,kBAMnD,OAJI3T,GAAgBA,EAAa3R,SAC5B4kB,EAA6Ctf,GAAKqM,EAAa,GAAGrM,IAGhE,EAAK47B,2BAA2Btc,EAAaviB,EAA7C,CAAsDuoB,EACjE,CACJ,EAEA,YAAA+W,mBAAA,SACIhwB,EACAtP,GAFJ,WAII,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMpF,EAAW0D,EAAM9P,WAAWoM,SAAStL,cAE3C,IAAKsL,IAAaA,EAAS5hB,GACvB,MAAM,IAAI,GAAiB0Q,GAAqBK,iBAGpDiW,EAASC,MAAK,IAAAC,cAAatmB,EAAsB6L,8BAEjD,EAAK2uB,0BAA0BiB,mBAAmBza,EAAS5hB,GAAIqM,EAActP,GACxEsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBG,4BAA6BtH,IAC9EutB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBjnB,EAAsB8L,yBAA0B9S,GACrF,GACR,GAjBgB,CAkBpB,EAEA,YAAA6hC,kBAAA,SACInc,EACAviB,GAFJ,WAII,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMpF,EAAW0D,EAAM9P,WAAWoM,SAAStL,cAE3C,IAAKsL,IAAaA,EAAS5hB,GACvB,MAAM,IAAI,GAAiB0Q,GAAqBK,iBAGpD,IAAMkrB,EAAkB,CAAEj8B,GAAIsf,EAAYtf,IAE1CgnB,EAASC,MAAK,IAAAC,cAAatmB,EAAsB+L,gCAA4B1O,EAAWg+B,IAExF,EAAKb,0BAA0BK,kBAAkB7Z,EAAS5hB,GAAIsf,EAAaviB,GACtEsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBK,2BAA4BxH,EAAMwiC,IACnFjV,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBjnB,EAAsBgM,wBAAyBhT,EAAUqiC,GAC9F,GACR,GAnBgB,CAoBpB,EAEA,YAAAP,kBAAA,SACI3tB,EACAhR,GAFJ,WAII,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMpF,EAAW0D,EAAM9P,WAAWoM,SAAStL,cACrC2lB,EAAkB,CAAEj8B,GAAI+N,GAE9B,IAAK6T,IAAaA,EAAS5hB,GACvB,MAAM,IAAI,GAAiB0Q,GAAqBK,iBAGpDiW,EAASC,MAAK,IAAAC,cAAatmB,EAAsBiM,gCAA4B5O,EAAWg+B,IAExF,EAAKb,0BAA0BM,kBAAkB9Z,EAAS5hB,GAAI+N,EAAehR,GACxEsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBI,2BAA4BvH,EAAMwiC,IACnFjV,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBjnB,EAAsBkM,wBAAyBlT,EAAUqiC,GAC9F,GACR,GAlBgB,CAmBpB,EAEA,YAAAK,qBAAA,SACIhd,EACAviB,GAFJ,WAII,OAAO,SAAAuoB,GAAS,SAAAQ,WAAA,QAAkB,SAACkB,GAC/B,IAAMpF,EAAW0D,EAAM9P,WAAWoM,SAAStL,cAE3C,IAAKsL,IAAaA,EAAS5hB,GACvB,MAAM,IAAI,GAAiB0Q,GAAqBK,iBAGpD,IAAMkrB,EAAkB,CAAEj8B,GAAIsf,EAAYtf,IAE1CgnB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBmM,mCAA+B9O,EAAWg+B,IAE3F,EAAKb,0BAA0BK,kBAAkB7Z,EAAS5hB,GAAIsf,EAAaviB,GACtEsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAatmB,EAAsBM,8BAA+BzH,EAAMwiC,IACtFjV,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBjnB,EAAsBoM,2BAA4BpT,EAAUqiC,GACjG,GACR,GAnBgB,CAoBpB,EAEQ,YAAAL,2BAAR,SACItc,EACAviB,GAFJ,WAII,OAAO,SAAAuoB,GACH,IAAM1D,EAAW0D,EAAM9P,WAAWoM,SAAStL,cAE3C,IAAKsL,IAAaA,EAAS5hB,GACvB,MAAM,IAAI,GAAiB0Q,GAAqBK,iBAGpD,OAAI,EAAKwrB,4BAA4Bjd,GAC1B,EAAKmc,kBAAkBnc,EAAaviB,EAApC,CAA6CuoB,GAGjD,EAAK+W,mBAAmB,CAAC/c,GAAcviB,EAAvC,CAAgDuoB,EAC3D,CACJ,EAEQ,YAAA8W,6BAAR,SACIjoB,EACAmR,GAEA,IACM9jB,EADQ8jB,EAAM9P,WACDhU,KAAKsW,UAExB,IAAKtW,EACD,MAAM,IAAI,GAAiBkP,GAAqBG,aAE9C,MAAsCrP,EAAKwf,UAAzCC,EAAa,gBAAE,IAAAub,YAAAA,OAAW,IAAG,KAAE,EAEvC,MAAO,CACHroB,QAAO,EACP6M,WAAW,oBAAKC,EAAkBub,GAAc7hC,KAAI,SAAA8N,GAAQ,OACxDg0B,OAAQh0B,EAAKzI,GACbgsB,SAAUvjB,EAAKujB,SAFyC,IAKpE,EAEQ,YAAAwP,iBAAR,SACIxa,EACA1B,EACA9d,GAEA,IAAKA,EACD,MAAM,IAAI,GAAiBkP,GAAqBG,aAGpD,OAAOvW,KAAKoiC,kBAAkBpd,EAAYyB,YAAavf,GAAM7G,KAAI,SAAAoO,GAC7D,IAAM4zB,GAAa,IAAAxkB,MAAK6I,GAAW,SAAA2T,GAAY,OAAAA,EAAS8H,SAAW1zB,EAAa0zB,MAAjC,IAE/C,OAAO,gCACA1zB,GAAY,CACfijB,SAAU2Q,EAAc5zB,EAAaijB,SAAW2Q,EAAW3Q,SAAYjjB,EAAaijB,UAE5F,IAAGxuB,QAAO,SAAAm3B,GAAY,OAAAA,EAAS3I,SAAW,CAApB,GAC1B,EAEQ,YAAA6P,cAAR,SACI7a,EACA1B,EACA9d,GAEA,IAAK8d,EACD,OAAO0B,EAGX,IAAKxf,EACD,MAAM,IAAI,GAAiBkP,GAAqBG,aAGpD,OAAOmQ,EACFF,OAAOxmB,KAAKoiC,kBAAkBpd,EAAYyB,YAAavf,IACvDhE,QAAO,SAAAm3B,GAAY,OAAAA,EAAS3I,SAAW,CAApB,GAC5B,EAEQ,YAAA0Q,kBAAR,SAA0B3b,EAAuBvf,GAC7C,OAAOuf,EAAYpmB,KAAI,SAAA8hC,GACnB,IAAMh0B,GAAO,IAAA0P,MAAK3W,EAAKwf,UAAUC,eAAe,SAAA0T,GAAY,OAAAA,EAAS30B,KAAOy8B,CAAhB,IAE5D,MAAO,CACHA,OAAM,EACNzQ,SAAUvjB,EAAOA,EAAKujB,SAAW,EAEzC,GACJ,EAEQ,YAAAuQ,4BAAR,SACI5C,GAIA,QAFsBA,EAEC35B,EAC3B,EAEQ,YAAAs7B,uBAAR,SACIhc,GAEA,MAA8B,iBAAhBA,GAA4B,YAAaA,CAC3D,EACJ,EArWA,GCPA,IAAMsd,GAAmB,CACrB,wCACA,uCACA,sCACA,WACA,sB,SAGJ,WACI,WACY9V,GAAA,KAAAA,eAAAA,CACT,CA2DP,OAzDI,YAAAuV,mBAAA,SACI7S,EACAnd,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE6b,EAAO,UAAE,IAAAf,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAEtBvB,EAAM,6BAA6BoB,EAAU,gBAC7C9vB,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAe8C,KAAKxB,EAAK,CACjC3uB,KAAM4S,EACN8a,OAAQ,CACJwC,QAASe,GAAoBkS,GAAkBjT,IAEnDjwB,QAAO,EACPwuB,QAAO,GAEf,EAEA,YAAAuT,kBAAA,SACIjS,EACAlK,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE4I,EAAO,UAAE,IAAAf,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAEpB3pB,EAAgBsf,EAAW,GAApB7lB,GAAI,YAAK6lB,EAAlB,QACA8I,EAAM,6BAA6BoB,EAAU,iBAAiBxpB,EAC9DtG,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAe+C,IAAIzB,EAAK,CAChC3uB,KAAI,EACJ0tB,OAAQ,CACJwC,QAASe,GAAoBkS,GAAkBjT,IAEnDjwB,QAAO,EACPwuB,QAAO,GAEf,EAEA,YAAAwT,kBAAA,SACIlS,EACAzb,EACA,G,IAAEma,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,6BAA6BoB,EAAU,iBAAiBzb,EAC9DrU,GAAU,eACZyuB,OAAQ,WACLF,IAED0B,EAAUY,GAAaqS,IAE7B,OAAOtiC,KAAKwsB,eAAe+V,OAAOzU,EAAK,CAAEjB,OAAQ,CAAEwC,QAAO,GAAIjwB,QAAO,EAAEwuB,QAAO,GAClF,EACJ,EA9DA,G,GCTA,YACI,mBACI,YAAM,0EAAyE,K,OAE/E,EAAKjvB,KAAO,2CACZ,EAAKC,KAAO,0C,CAChB,CACJ,OAPsE,oBAOtE,EAPA,CAAsE,G,GCAtE,YACI,mBACI,YAAM,oEAAkE,K,OAExE,EAAKD,KAAO,8CACZ,EAAKC,KAAO,6C,CAChB,CACJ,OAPyE,oBAOzE,EAPA,CAAyE,G,GCAzE,YACI,mBACI,YAAM,2EAAyE,K,OAE/E,EAAKD,KAAO,+BACZ,EAAKC,KAAO,4B,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,G,GCE1D,WAEI,WACY4jC,GAAA,KAAAA,iBAAAA,CACT,CA+EP,OA3EU,YAAAvN,OAAN,SAAawN,EAA2B/kC,G,+FACpC,MAAyB,iBAAd+kC,EACA,CAAP,EAAOziC,KAAK0iC,2BAA2BD,EAAW/kC,IAG/C,CAAP,EAAOsC,KAAK2iC,+CAA+CF,G,QAGjD,YAAAE,+CAAd,SAA6DhjC,G,sHACzD,IAAKK,KAAK4iC,mCAAmCjjC,GACzC,MAAMA,EAGV,SAAMK,KAAK6iC,YAAYljC,EAAMR,KAAK2jC,2BAA2B7+B,KAAKvG,M,OAElE,OAFA,SAEO,CAAP,EAAOsC,KAAK+iC,qB,QAGF,YAAAL,2BAAd,SAAyCh9B,EAAYhI,G,sHACjD,GAAW,iBAAPgI,EACA,MAAM3G,MAAM,+CAGhB,IAAKrB,EACD,MAAMqB,MAAM,kCAGhB,SAAMiB,KAAK6iC,YAAYnlC,I,OAEvB,OAFA,SAEO,CAAP,EAAOsC,KAAK+iC,qB,QAGR,YAAAA,kBAAR,sBACI,OAAO/iC,KAAKwiC,iBAAiBQ,UACxBvY,MAAK,IAAAwY,MAAK,IACVxY,MAAK,IAAA8I,YAAU,SAAO,G,IAAE5zB,EAAK,QAAE4N,EAAK,Q,4FACjC,GAAI5N,aAAiB,GACjB,MAAM,IAAI,GAGd,GAAIA,IAAU4N,EACV,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO,CACH3O,KAAM,4BACNqF,KAAM,CACFi/B,yBAA0B31B,I,WAGlC41B,WACZ,EAEQ,YAAAN,YAAR,SAAoBO,GAChB,IAAMC,EAA6B,6BAE/BC,EAA2BC,SAASC,eAAeH,GASvD,OARIC,GAA4BA,EAAyBG,YACrDH,EAAyBG,WAAWC,YAAYJ,IAGpDA,EAA2BC,SAASI,cAAc,QACzBC,aAAa,KAAMP,GAC5CE,SAASpkC,KAAK0kC,YAAYP,GAEnBtjC,KAAKwiC,iBAAiBsB,KAAKT,EAA4BD,EAClE,EAEQ,YAAAR,mCAAR,SAA2CjjC,GACjC,MAA0CA,EAAuBR,MAAQ,CAAC,EAAxE2jC,EAA0B,6BAElC,MAAkB,+BAFwB,UAGnCA,GACoC,8BAApCA,EAA2BlkC,IACtC,EACJ,EAnFA,GCCA,ICPYmlC,GDOZ,cACI,WACYC,QAAA,IAAAA,IAAAA,EAAkC1X,QAAlC,KAAA0X,QAAAA,CACT,CAKP,OAHI,YAAAhsB,OAAA,SAAOisB,GACH,OAAO,IAAIjkC,KAAKgkC,QAAQE,iBAAiBD,EAC7C,EACJ,EARA,ICPA,SAAYF,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAYA,KAAAA,GAAuB,K,SAanC,YACI,WACW1tB,GADX,MAGI,YAOR,SAAyBzX,GACrB,OAAQA,GACR,KAAKmlC,GAAwBI,uBACzB,MAAO,oFAEX,KAAKJ,GAAwBK,sBACzB,MAAO,mFAEX,KAAKL,GAAwBM,uBACzB,MAAO,oFAEX,KAAKN,GAAwBO,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEf,CAxBc,CAAgBjuB,KAAS,K,OAFxB,EAAAA,QAAAA,EAIP,EAAK1X,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OATiD,oBASjD,EATA,CAAiD,G,GCTjD,YACI,mBACI,YAAM,sFAAoF,K,OAE1F,EAAKD,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPuD,oBAOvD,EAPA,CAAuD,G,GCAvD,YACI,mBACI,YAAM,qDAAmD,K,OAEzD,EAAKD,KAAO,+BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,G,GCa1D,WAMI,WACY2lC,EACAC,GAFZ,WACY,KAAAD,4BAAAA,EACA,KAAAC,wBAAAA,EAERxkC,KAAKykC,WAAY,KAAAhtB,UAAQ,SAACitB,EAAkCC,EAAiBC,GACzE,IAAMC,EAAS,IAAI,EAAAC,QAEnB,IAAKF,EACD,MAAM,IAAI7lC,MAmBd,OAhBA,EAAKgmC,UAAYL,EAAUM,OAAOJ,EAAUl/B,GAAI,CAC5Ci/B,QAAO,EACPM,KAAM,YACNhB,SAAU,WACNY,EAAOlY,KAAK,CACRpf,MAAOm3B,EAAUQ,YAAY,EAAKH,aAEtCL,EAAUS,MAAM,EAAKJ,UACzB,EACA,iBAAkB,WACdF,EAAOlY,KAAK,CACRhtB,MAAO,IAAI,IAEnB,IAGGklC,CACX,GAAG,CAAEviC,QAAS,SAAC/E,EAAGkI,GAAM,OAAAlI,IAAMkI,CAAN,GAC5B,CAkEJ,OAhEI,YAAAq+B,KAAA,SAAKl8B,EAAqB+8B,GAA1B,WACI,OAAO3kC,KAAKukC,4BAA4BT,OACnC/W,MAAK,SAAA2X,GACEA,IACA,EAAKU,QAAU,EAAKX,UAAUC,EAAWC,EAASpB,SAASC,eAAe57B,IAC1E,EAAKy9B,WAAaX,EAE1B,GACR,EAEA,YAAA1B,QAAA,sBACI,OAAO,IAAAvU,QAAM,WACT,IAAMoW,EAAS,EAAKO,QACdV,EAAY,EAAKW,WAEvB,IAAKR,IAAWH,EACZ,MAAM,IAAI,GAAoBX,GAAwBO,8BAG1D,OAAO,IAAA7V,QAAM,WACT,IAAM6W,EAAU/B,SAASgC,cAAc,yBAEvC,OAAOD,GAAU,IAAAtX,IAAGsX,IAAW,IAAArX,YAAW,IAAI,GAClD,IACKxD,MACG,IAAA+a,YAAU,SAAAjmC,GAAU,OAAAA,EAAOkrB,MACvB,IAAAgb,OAvED,MAwEC,IAAAlS,YAAU,SAAC5zB,EAAO+C,GACd,OAAAA,EAxERgjC,IAwE8B,IAAA1X,IAAGruB,IAAS,IAAAsuB,YAAWtuB,EAA7C,IAHY,KAMpB,IAAA4zB,YAAU,SAAA+R,GAIN,OAHA,EAAKK,+BAA+Bd,EAAQS,GAC5CZ,EAAU1B,QAAQ,EAAK+B,WAEhBF,CACX,KACA,IAAAna,aAAW,SAAA/qB,GAAS,WAAAquB,IAAG,CAAEruB,MAAK,GAAV,IAEhC,GACJ,EAEQ,YAAAgmC,+BAAR,SAAuCC,EAAiCN,GACpE,IAAMO,EAAkBP,EAAQQ,cAEhC,IAAKD,EACD,MAAM,IAAI,GAGd,IAAMjB,EAAYiB,EAAgBC,cAElC,IAAKlB,EACD,MAAM,IAAI,GAGd5kC,KAAKwkC,wBAAwBxsB,QAAO,WAEG,WAA/B4sB,EAAUmB,MAAMC,YAChBJ,EAAMjZ,KAAK,CACPhtB,MAAO,IAAI,IAGvB,IAAGsmC,QAAQrB,EAAW,CAAEzM,YAAY,EAAM+N,gBAAiB,CAAC,UAChE,EACJ,EArGA,G,GCjBA,WAGI,WACYC,EACAnC,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAmC,cAAAA,EACA,KAAAnC,QAAAA,CACT,CA2BP,OAzBI,YAAAF,KAAA,WAKI,OAJK9jC,KAAKomC,eACNpmC,KAAKomC,aAAepmC,KAAKqmC,eAGtBrmC,KAAKomC,YAChB,EAEQ,YAAAC,YAAR,sBAEUxZ,EAAS,CACX,uBACA,mBACFjtB,KAAK,KAEP,OAAO,IAAI+0B,SAAQ,SAACU,EAASC,GACzB,EAAK0O,QAAoB,cAAI,WAAM,OAAA3O,EAAQ,EAAK2O,QAAQsC,WAArB,EAEnC,EAAKH,cAAcI,WAAW,qCAAqC1Z,GAC9DS,OAAM,SAAA3tB,GACH,EAAKymC,kBAAeziC,EACpB2xB,EAAO31B,EACX,GACR,GACJ,EACJ,EAjCA,GCKe,SAAS6mC,GAAqBC,GACzC,OAAO,IAAI,GACP,IAAI,GAA4BA,GAChC,IAAIC,GAEZ,C,SCPA,YACI,WAAYpnC,GAAZ,MACI,YAAMA,IAAS,K,OAEf,EAAKX,KAAO,2BACZ,EAAKC,KAAO,uB,CAChB,CACJ,OAPsD,oBAOtD,EAPA,CAAsD,G,GCKtD,WACI,WACY+nC,GAAA,KAAAA,4BAAAA,CACT,CAoBP,OAlBI,YAAA1X,oBAAA,SACInF,EACArnB,GAFJ,WAII,OAAO,IAAA+jB,SACH,IAAAwH,KAAG,IAAApB,cAAanrB,EAAwBuD,gCACxC,IAAAypB,QAAM,6D,uEACe,SAAMzuB,KAAK2mC,4BAA4B1X,oBAAoBnF,EAAernB,I,OAE3F,OAFQtD,EAAS,SAAkF,KAE5F,CAAP,GAAO,IAAAytB,cAAanrB,EAAwBwD,6BAA8B9F,I,WAEhFsrB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAChBtsB,EAAwB0D,0BACxB,IAAI,GAAyBxF,GAFb,IAK5B,EACJ,EAvBA,G,GCJA,WACI,WACY6sB,GAAA,KAAAA,eAAAA,CACT,CAWP,OATI,YAAAyC,oBAAA,SAAoBnF,EAA8B,G,IAAE8D,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEjDxuB,GAAU,eACZyuB,OAAQ,WACLF,IAGP,OAAO3tB,KAAKwsB,eAAe8C,KANf,gCAMyB,CAAEnwB,KAAM2qB,EAAe1qB,QAAO,EAAEwuB,QAAO,GAChF,EACJ,EAdA,GCFA,IAAMgZ,IAAY,IAAAnvB,UAAQ,SAAIovB,GAC1B,OAAIhnC,MAAMC,QAAQ+mC,GAENA,EAAgBxmC,KAAI,SAAC9B,GAAsB,OAC/CuoC,GAAcvoC,EADiC,IAKnDsD,EAAcglC,GACNjpC,OAAOyF,KAAKwjC,GACfpnC,QAAO,SAACC,EAAQhC,G,MAAQ,OAAC,gCACnBgC,KAAM,MACRhC,GAAMopC,GAAcD,EAAMnpC,IAAK,GAFX,GAGrB,CAAC,GAGNmpC,CACX,IAKAD,GAAUG,MAAQ,IAAI/a,QAQtB,IAAM8a,GAAgB,SAAID,GACtB,MAAwB,iBAAVA,GAAgC,OAAVA,EAChCD,GAAUC,GACVA,CACR,EAMe,SAASG,GAA4Bzb,GAChD,OAAO,W,IAAE,sDAAmB,OAAAub,GAAcvb,EAAE,aAAIjU,GAAM,CAC1D,CC1Ce,SAAS2vB,GAAkC,G,IACtD,IAAAtiC,eAAkBgW,EAAiB,oBAAEC,EAAwB,2BAC7D,IAAA1T,KAAQsW,EAAO,UAAEC,EAAc,iBAC/B,IAAA6J,SAAYtL,EAAW,cAAEmL,EAAkB,qBAC3C,IAAA6C,OAAUlL,EAAO,UAAEE,EAAS,YAAEX,EAAc,iBAAEK,EAAqB,wBACnE,IAAA3M,aAAgB2T,EAAe,kBAAEC,EAAsB,yBACvD,IAAAtc,SAAYqS,EAAW,cAAEC,EAAkB,qBAC3C,IAAAsF,YAAeI,EAAiB,oBAAEM,EAAwB,2BAC1D,IAAAtU,MAAS0a,EAAQ,WAAEC,EAAe,kBAClC,IAAAxa,QACIkP,EAAe,kBACfC,EAAsB,yBACtBL,EAAY,eACZC,EAAmB,sBACnBC,EAAgB,mBAChBC,EAAuB,0BACvBG,EAAqB,wBACrBC,EAA4B,+BAC5BC,EAAqB,wBAEzB,IAAA8G,eAAkBE,EAAgB,mBAAEE,EAAuB,0BACvBkjB,EAA0B,kCAC9D,IAAA5kB,gBAAmBrG,EAAkB,qBAAEC,EAAyB,4BAEhE,MAAO,CACH4C,QAAS,GAAMA,GACfE,UAAW,GAAMA,GACjBrE,kBAAmB,GAAMA,GACzBC,yBAA0B,GAAMA,GAChC4C,QAAS,GAAMA,GACfC,eAAgB,GAAMA,GACtBzB,YAAa,GAAMA,GACnBmL,mBAAoB,GAAMA,GAC1B9I,eAAgB,GAAMA,GACtBK,sBAAuB,GAAMA,GAC7BgH,gBAAiB,GAAMA,GACvBC,uBAAwB,GAAMA,GAC9BjK,YAAa,GAAMA,GACnBC,mBAAoB,GAAMA,GAC1B0F,kBAAmB,GAAMA,GACzBM,yBAA0B,GAAMA,GAChCoG,SAAU,GAAMA,GAChBC,gBAAiB,GAAMA,GACvBtL,gBAAe,EACfC,uBAAsB,EACtBL,aAAY,EACZC,oBAAmB,EACnBC,iBAAgB,EAChBC,wBAAuB,EACvBG,sBAAqB,EACrBC,6BAA4B,EAC5BiH,iBAAkB,GAAMA,GACxBE,wBAAyB,GAAMA,GAC/B/H,mBAAoB,GAAMA,GAC1BC,0BAA2B,GAAMA,GACjCY,sBAAqB,EACrBoqB,2BAA0B,EAElC,C,SC3CA,WAKI,WACYC,EACAC,EACAC,EACAtT,EACAuT,EACAC,EACAC,EACAC,GAPA,KAAAN,OAAAA,EACA,KAAAC,wBAAAA,EACA,KAAAC,uBAAAA,EACA,KAAAtT,oBAAAA,EACA,KAAAuT,6BAAAA,EACA,KAAAC,0BAAAA,EACA,KAAAC,4BAAAA,EACA,KAAAC,sBAAAA,EAERznC,KAAK0nC,iBAAmB1nC,KAAKonC,wBAAwBpvB,OACjDhY,KAAKmnC,OAEb,CAsGJ,OAnGI,YAAAjc,UAAA,SACIyc,G,UACA,oDAEA,OAAO,EAAA3nC,KAAK0nC,kBAAiBxc,UAAS,8BAACyc,GAAeC,GAC1D,EAEA,YAAA1sB,SAAA,WACI,OAAOlb,KAAK0nC,iBAAiBxsB,UACjC,EAEM,YAAAyU,aAAN,W,sHACI,SAAM3vB,KAAKmnC,OAAOU,SACd7nC,KAAKqnC,uBAAuBrX,wB,OAGhC,OAJA,SAIO,CAAP,EAAOhwB,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAA4U,oBAAN,W,sHACI,SAAM9vB,KAAKmnC,OAAOU,SACd7nC,KAAKqnC,uBAAuBvX,wB,OAGhC,OAJA,SAIO,CAAP,EAAO9vB,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAAsS,kBAAN,SACI9lB,G,sHAEA,SAAM1H,KAAKmnC,OAAOU,SACd7nC,KAAKwnC,4BAA4Bha,kBAAkB9lB,K,OAGvD,OAJA,SAIO,CAAP,EAAO1H,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAA+X,YAAN,SACI5wB,G,sHAEA,SAAMrC,KAAKmnC,OAAOU,SACd7nC,KAAK+zB,oBAAoBd,YAAY5wB,K,OAGzC,OAJA,SAIO,CAAP,EAAOrC,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAA6Z,cAAN,SACIvnB,G,sHAEA,SAAMxN,KAAKmnC,OAAOU,SACd7nC,KAAKynC,sBAAsB1S,cAAcvnB,K,OAG7C,OAJA,SAIO,CAAP,EAAOxN,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAAuY,cAAN,W,4HAKI,OAHazL,EACThoB,KAAKmnC,OAAOjsB,WAAU,sBAE1B,GAAMlb,KAAKmnC,OAAOU,SACd7nC,KAAK+zB,oBAAoBN,cAAczL,IAAkB/R,W,OAG7D,OAJA,SAIO,CAAP,EAAOjW,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAA4sB,qBAAN,SACIzlC,G,sHAEA,SAAMrC,KAAKmnC,OAAOU,SACd7nC,KAAKsnC,6BAA6B1Y,cAAcvsB,K,OAGpD,OAJA,SAIO,CAAP,EAAOrC,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAA6sB,sBAAN,SACI1lC,G,sHAEA,SAAMrC,KAAKmnC,OAAOU,SACd7nC,KAAKunC,0BAA0B3Y,cAAcvsB,K,OAGjD,OAJA,SAIO,CAAP,EAAOrC,KAAK0nC,iBAAiBxsB,Y,QAG3B,YAAAsmB,qBAAN,SACI97B,EACAjD,G,sHAEA,SAAMzC,KAAKmnC,OAAOU,SACd7nC,KAAKunC,0BAA0B/F,qBAAqB97B,EAAIjD,K,OAG5D,OAJA,SAIO,CAAP,EAAOzC,KAAK0nC,iBAAiBxsB,Y,QAErC,EAxHA,GCjBA,IAAK8sB,IAAL,SAAKA,GACD,2BACH,CAFD,CAAKA,KAAAA,GAAoB,K,SCKzB,WACI,WACYC,GAAA,KAAAA,oBAAAA,CAGT,CAOP,OALI,YAAAjwB,OAAA,SACIgT,GAEA,ODFO,SACXA,EACAF,GAEA,IAAMod,GAAa,IAAArd,kBACf,SAAC5oB,EAAOC,GAAW,OAAAA,EAAOtD,OAASopC,GAAqBG,YACpDjmC,EAAOG,QACPJ,CAFe,GAGnB+oB,EAAM9P,WACN,CAAE4P,iBAAgB,IAOtB,OAJAE,EAAME,WAAU,SAAAjpB,GACZimC,EAAWL,UAAS,IAAAjb,cAAaob,GAAqBG,YAAalmC,GACvE,GAAG,CAAEmmC,SAAS,IAEPF,CACX,CCfeG,CAA0Brd,EAAOhrB,KAAKioC,oBACjD,EACJ,EAZA,GCOA,GARA,SAAuBpwB,EAAana,EAAWouB,GAC3C,OAAKpuB,GAAQouB,EAINwc,GAAoBzwB,EAAQna,EAAKouB,GASrC,SAA2DjU,GAC9D,IAAM0wB,EAAe,YAAG,a,8CAAsB,QAAR,oBAAQ,EAAzB,CAAiB1wB,GAiBtC,OAfAja,OAAOwa,oBAAoBP,EAAO3Z,WAC7B4U,SAAQ,SAAApV,GACL,IAAMouB,EAAaluB,OAAO4qC,yBAAyB3wB,EAAO3Z,UAAWR,GAEhEouB,GAAsB,gBAARpuB,GAInBE,OAAOC,eACH0qC,EAAgBrqC,UAChBR,EACA4qC,GAAoBzwB,EAAO3Z,UAAWR,EAAKouB,GAEnD,IAEGyc,CACX,CA/BeE,CAAmB5wB,EAIlC,EAgCO,SAASywB,GAAsChqB,EAAW5gB,EAAaouB,GAC1E,GAAgC,mBAArBA,EAAWvtB,MAClB,OAAOutB,EAGX,IAAIrT,EAAYqT,EAAWvtB,MAE3B,MAAO,CACHR,IAAA,WACI,IAAM2qC,EAAcjwB,EAAOkwB,KAAK3oC,MAOhC,OALApC,OAAOC,eAAemC,KAAMtC,GAAK,gCAC1BouB,GAAU,CACbvtB,MAAOmqC,KAGJA,CACX,EACAtc,IAAG,SAAC7tB,GACAka,EAASla,CACb,EAER,CClEA,MAAM,GAA+BC,QAAQ,gB,eCiBtC,SAASoqC,GAAsBvoC,GAClC,OAAOzC,OAAOM,UAAUC,eAAeC,KAAKiC,EAAK,WACrD,C,SCFA,WAMI,WAAYoC,GALJ,KAAAomC,QAAU,EACV,KAAAC,KAAwB,CAAEC,KAAM,IAChC,KAAAC,UAAmC,GAIvChpC,KAAKipC,UAAW,eACZC,QAAS,EACT5mC,QAAS,KACT6mC,SAAU,EAAAC,MACP3mC,EAEX,CA0IJ,OAxII,YAAA4mC,OAAA,W,IAAO,sDACH,IAAM3pC,EAASM,KAAKspC,YAAW,MAAhBtpC,KAAoBsX,GAC3B5U,EAAqBhD,EAAM,MAApB6pC,EAAc7pC,EAAM,UAC7BW,EAAQX,EAAM,IAYpB,OAVIW,GAAOA,EAAImpC,SACXnpC,EAAIopC,YAEJppC,EAAML,KAAK0pC,aAAaH,EAAWjyB,EAAK6Z,MAAMzuB,IAKlD1C,KAAK2pC,oBAAoBtpC,GAElBA,EAAImpC,QACf,EAEA,YAAAI,aAAA,W,IAAa,sDACD,IAAAvpC,EAAQL,KAAKspC,YAAW,MAAhBtpC,KAAoBsX,GAAI,IAExC,OAAOjX,EAAMA,EAAIopC,UAAY,CACjC,EAEQ,YAAAH,YAAR,W,UAAoB,kDAUhB,IATA,IAAI5mC,EAAQ,EACR6mC,EAAYvpC,KAAK8oC,KAQdS,EAAUR,KAAK3oC,QAAQ,CAG1B,IAFA,IAAIypC,GAAY,EAEPC,EAAW,EAAGA,EAAWP,EAAUR,KAAK3oC,OAAQ0pC,IAAY,CACjE,IAAMzpC,EAAMkpC,EAAUR,KAAKe,GAE3B,GAAK9pC,KAAKipC,SAAS3mC,QAAQjC,EAAI9B,MAAO+Y,EAAK5U,IAA3C,CAQA,IAFA,EAAA6mC,EAAUR,MAAKgB,QAAO,QAAIR,EAAUR,KAAKiB,OAAOF,EAAU,KAErC,IAAhBxyB,EAAKlX,QAAgBsC,IAAU4U,EAAKlX,OAAS,IAAMwoC,GAAsBvoC,GAC1E,MAAO,CAAEqC,MAAK,EAAErC,IAAG,EAAEkpC,UAAS,GAGlCM,GAAY,EACZN,EAAYlpC,EACZqC,IAEA,K,EAGJ,IAAKmnC,EACD,K,CAIR,MAAO,CAAEnnC,MAAK,EAAE6mC,UAAS,EAC7B,EAEQ,YAAAG,aAAR,SAAqB92B,EAAmD0E,GACpE,IAEIjX,EAFAqC,EAAQ,EACR6mC,EAAY32B,EAGhB,GACIvS,EAAM,CACF0oC,KAAM,GACNQ,UAAS,EACTE,UAAW,EACXlrC,MAAO+Y,EAAK5U,IAMhB6mC,EAAUR,KAAKgB,QAAQ1pC,GAEvBkpC,EAAYlpC,EACZqC,UACKA,EAAQ4U,EAAKlX,QAEtB,IAAM6pC,EAAc5pC,EAIpB,OAFA4pC,EAAYT,SAAW,MAAKxpC,KAAK6oC,QAE1BoB,CACX,EAEQ,YAAAN,oBAAR,SAA4BO,GACxB,GAAKlqC,KAAKipC,SAASC,QAAnB,CAIA,IAAMxmC,EAAQ1C,KAAKgpC,UAAUpiB,QAAQsjB,GAQrC,GANAlqC,KAAKgpC,UAAUgB,QACA,IAAXtnC,EAAe,EAAIA,GACR,IAAXA,EAAe,EAAI,EACnBwnC,KAGAlqC,KAAKgpC,UAAU5oC,QAAUJ,KAAKipC,SAASC,SAA3C,CAIA,IAAM7oC,EAAML,KAAKgpC,UAAUzxB,MAEtBlX,IAILL,KAAKmqC,WAAW9pC,GAChBL,KAAKipC,SAASE,SAAS9oC,EAAImpC,U,EAC/B,EAEQ,YAAAW,WAAR,SAAmB9pC,GACVA,EAAIkpC,YAITlpC,EAAIkpC,UAAUR,KAAKiB,OAAO3pC,EAAIkpC,UAAUR,KAAKniB,QAAQvmB,GAAM,GD3I5D,SAA2BA,GAC9B,OAAOzC,OAAOM,UAAUC,eAAeC,KAAKiC,EAAK,YACrD,CC2IY+pC,CAAkB/pC,EAAIkpC,YAI1BvpC,KAAKmqC,WAAW9pC,EAAIkpC,WACxB,EACJ,EAvJA,GCjBe,SAASc,GAAU3sC,GAC9B,OAAkC,KAA3B,GAAGA,GAAMkpB,QAAQ,OAAyC,KAA1B,GAAGlpB,GAAMkpB,QAAQ,IAC5D,CCQe,SAAS0jB,GAAiDzyB,GACrE,IAAM0wB,EAAe,YAAG,a,8CAAsB,QAAR,oBAAQ,EAAzB,CAAiB1wB,GAiBtC,OAfAja,OAAOwa,oBAAoBP,EAAO3Z,WAC7B4U,SAAQ,SAAApV,GACL,IAAMouB,EAAaluB,OAAO4qC,yBAAyB3wB,EAAO3Z,UAAWR,GAEhEouB,GAAsB,gBAARpuB,GAInBE,OAAOC,eACH0qC,EAAgBrqC,UAChBR,EAQhB,SAAmDma,EAAgBna,EAAaouB,GAC5E,GAAgC,mBAArBA,EAAWvtB,MAClB,OAAOutB,EAGX,IAAIye,EAAW,IAAI,GACf9xB,EAASqT,EAAWvtB,MACpBisC,GAAiB,KAAA/yB,SAAQgB,GAE7B,OAAO,GAAcZ,EAAQna,EAAK,CAC9BK,IAAA,sBACUQ,EAAQ,W,IAAE,sDACZ,IAAMksC,EAAcD,EAAepsC,KAAI,MAAnBosC,GAAc,qBAAM,GAASlzB,IAEjD,GAAuC,IAAnCizB,EAASX,aAAY,MAArBW,EAAyBjzB,GACzB,OAAOmzB,EAGX,IAAM/mC,EAAW+U,EAAOra,KAAI,MAAXqa,GAAM,qBAAM,GAASnB,IAEtC,OAAIhV,EAAQoB,EAAU+mC,EAAa,CAAEtnC,UAAW,SAAAzF,GAAO,OAAC2sC,GAAU3sC,EAAX,IAC5C+sC,GAGXD,EAAezD,MAAM3a,IAAIme,EAASlB,OAAM,MAAfkB,EAAmBjzB,GAAO5T,GAE5CA,EACV,EAID,OAFA9F,OAAOC,eAAemC,KAAMtC,GAAK,gCAAKouB,GAAU,CAAEvtB,MAAK,KAEhDA,CACX,EACA6tB,IAAG,SAAC7tB,GACAgsC,EAAW,IAAI,GACf9xB,EAASla,EACTisC,GAAiB,KAAA/yB,SAAQgB,EAC7B,GAER,CA9CgBiyB,CAAwB7yB,EAAO3Z,UAAWR,EAAKouB,GAEvD,IAEGyc,CACX,C,SCtBA,WAMI,WAAYxe,GACR/pB,KAAK2qC,gBAAkB5gB,EAAUR,cACrC,CASJ,OAPI,YAAAqhB,yBAAA,SAAyBljC,GACrB,OAAO1H,KAAK2qC,gBAAgBxvB,mBAAmBzT,EACnD,EAEA,YAAAmjC,2BAAA,SAA2BnjC,GACvB,OAAO1H,KAAK2qC,gBAAgBvvB,qBAAqB1T,EACrD,GAhB4C,iBAD/C,IACoBojC,E,CAArB,G,GCAA,WAMI,WAAY/gB,GACR/pB,KAAK2qC,gBAAkB5gB,EAAUR,cACrC,CASJ,OAPI,YAAAwhB,qBAAA,SAAqBrjC,GACjB,OAAO1H,KAAK2qC,gBAAgB9+B,eAAenE,EAC/C,EAEA,YAAAsjC,uBAAA,SAAuBtjC,GACnB,OAAO1H,KAAK2qC,gBAAgB7+B,iBAAiBpE,EACjD,GAhB6C,iBADhD,IACoBujC,E,CAArB,GCDe,SAASC,GAA8BnhB,GAIlD,MAAO,CACHxqB,OAJW,IAAI,GAA4BwqB,GAK3CjmB,SAJa,IAAI,GAA6BimB,GAMtD,C,SCJA,WAMI,WACYod,EACAgE,GAFZ,WACY,KAAAhE,OAAAA,EACA,KAAAgE,6BAAAA,EAERnrC,KAAKorC,OAASF,GAA8BlrC,KAAKmnC,OAAOjsB,YAExDlb,KAAKmnC,OAAOjc,WAAU,SAAAjpB,GAClB,EAAKmpC,OAASF,GAA8BjpC,EAChD,GACJ,CAmHJ,OAlGI,YAAAiZ,SAAA,WACI,OAAOlb,KAAKorC,MAChB,EAgCA,YAAAlgB,UAAA,SACIyc,G,UADJ,OAEI,oDAEA,OAAO,EAAA3nC,KAAKmnC,QAAOjc,UAAS,8BACxB,WAAM,OAAAyc,EAAW,EAAKzsB,WAAhB,EACN,SAAAjZ,GAAS,OAAAA,EAAMsnB,eAAerO,UAArB,GACN0sB,EAAQvnC,KAAI,SAAA6C,GAAU,gBAACjB,GAAqC,OAAAiB,EAAOgoC,GAA8BjpC,GAArC,CAAtC,KAEjC,EAoBA,YAAAopC,iBAAA,SAAiB5oC,GAAjB,ICxGgCiD,EDwGhC,OACU4lC,GCzGsB5lC,EDyGKjD,EAAQmF,YCxGtC,kBAAkB6zB,KAAK/1B,GDyGtB,CAACjD,EAAQmF,aEvGN,SAA4B2jC,EAAkBC,GACzD,IAAMC,EAAalI,SAASmI,iBAAiBH,GAE7C,IAAKE,EAAWrrC,OACZ,MAAM,IAAI,GAAqB,2DAA2DmrC,GAG9F,OAAO1rC,MAAM3B,UAAUizB,MAAM/yB,KAAKqtC,GAC7BprC,KAAI,SAACukC,GAKF,OAJKA,EAAUl/B,KACXk/B,EAAUl/B,IAAK,IAAAimC,UAASH,IAGrB5G,EAAUl/B,EACrB,GACR,CFyFYkmC,CAAmBnpC,EAAQmF,YAAgBnF,EAAQiF,SAAQ,eAE/D,OAAOitB,QAAQkX,IACXP,EAAajrC,KAAI,SAAAuH,GACb,IAAM1F,EAAS,EAAKipC,6BAA6BW,YAAW,gCAAKrpC,GAAO,CAAEmF,YAAW,KAC/EmkC,EAAU,0BAA0BtpC,EAAQiF,SAAQ,IAAIE,EAE9D,OAAO,EAAKu/B,OAAOU,SAAS3lC,EAAQ,CAAE6pC,QAAO,GACjD,KAEChf,MAAK,WAAM,SAAK7R,UAAL,GACpB,EAcA,YAAA8wB,mBAAA,SAAmBvpC,GAAnB,WACUP,EAASlC,KAAKmrC,6BAA6Bc,aAAaxpC,GACxDspC,EAAU,0BAA0BtpC,EAAQiF,SAElD,OAAO1H,KAAKmnC,OAAOU,SAAS3lC,EAAQ,CAAE6pC,QAAO,IACxChf,MAAK,WAAM,SAAK7R,UAAL,GACpB,GAjI0C,iBAD7C,IACoBgxB,E,CAArB,G,GGYA,WACI,WACYC,EACAC,EACA5E,GAFA,KAAA2E,UAAAA,EACA,KAAAC,YAAAA,EACA,KAAA5E,4BAAAA,CACT,CAiHP,OA/GI,YAAAsE,WAAA,SACIrpC,GADJ,WAGI,OAAO,SAACuoB,GACJ,IAAMvjB,EAAO,CACTC,SAAUjF,EAAQiF,SAClBE,YAAanF,EAAQmF,aAGzB,OACIojB,EACK9P,WACAqO,eAAexf,cACZtH,EAAQiF,SACRjF,EAAQmF,cAGT,IAAAonB,UAGJ,IAAAxI,SACH,IAAAwH,KACI,IAAApB,cACIrmB,EAAyBuB,+BACzBnE,EACA8D,IAGR,EAAK+/B,4BAA4Bha,kBAC7B/qB,EAAQiF,SACR,CAAEkmB,QAASnrB,EAAQmrB,QAAShC,UAAU,GAF1C,CAGEZ,IACF,IAAAyD,QAAM,WACF,SAAK4d,aAAa5pC,EAAQiF,UACrBokC,WAAWrpC,GACXsqB,MAAK,WACF,WAAAH,cACIrmB,EAAyBoB,+BACzBhE,EACA8D,EAHJ,GAHR,KAUNgjB,MACE,IAAAC,aAAW,SAAC/qB,GACR,OAAAouB,GACIxnB,EAAyBwB,uBACzBpI,EACA8H,EAHJ,IAOZ,CACJ,EAEA,YAAAwkC,aAAA,SACIxpC,GADJ,WAGI,OAAO,SAACuoB,GACJ,IAAMvjB,EAAO,CAAEC,SAAUjF,EAAQiF,UAEjC,OACKsjB,EAAM9P,WAAWqO,eAAexf,cAActH,EAAQiF,WAKpD,IAAA8e,SACH,IAAAwH,KACI,IAAApB,cACIrmB,EAAyByB,iCACzBrE,EACA8D,KAGR,IAAAgnB,QAAM,WACF,SAAK4d,aAAa5pC,EAAQiF,UACrBukC,eACAlf,MAAK,WACF,WAAAH,cACIrmB,EAAyBsB,iCACzBlE,EACA8D,EAHJ,GAHR,KAUNgjB,MACE,IAAAC,aAAW,SAAC/qB,GACR,OAAAouB,GACIxnB,EAAyB0B,yBACzBtI,EACA8H,EAHJ,MAxBG,IAAAunB,QA+Bf,CACJ,EAEQ,YAAAqd,aAAR,SACI3kC,GAEA,IAAI4kC,EAEJ,IACIA,EAAWtsC,KAAKosC,YAAYruC,IAAI,CAAE2H,GAAIgC,G,CACxC,SACE4kC,EAAWtsC,KAAKmsC,UAAUpuC,IAAI2J,E,CAGlC,OAAO4kC,CACX,EACJ,EAtHA,G,GClBA,WAOI,WACI7pC,G,UAEAzC,KAAKusC,WAAa,CAAC,EACnBvsC,KAAKwsC,WAAa,CAAC,EACnBxsC,KAAKysC,cAAqC,QAAxB,EAAGhqC,aAAO,EAAPA,EAASiqC,oBAAY,QAAI,UAC9C1sC,KAAK2sC,aAAmC,QAAvB,EAAGlqC,aAAO,EAAPA,EAASmqC,mBAAW,SACxC5sC,KAAK6sC,eAAuC,QAAzB,EAAGpqC,aAAO,EAAPA,EAASqqC,qBAAa,QAAI,SAACv/B,GAAS,OAAAA,CAAK,CACnE,CAkDJ,OAhDI,YAAAxP,IAAA,SAAIwP,EAAWw/B,GACX,IACI,OAAO/sC,KAAKgtC,aACRz/B,GAASvN,KAAKysC,cACdM,GAAcx/B,GAASvN,KAAKysC,c,CAElC,MAAO9sC,GACL,IAAKK,KAAK2sC,aACN,MAAMhtC,EAGV,OAAOK,KAAKgtC,aACRhtC,KAAKysC,cACLM,GAAc/sC,KAAKysC,c,CAG/B,EAEA,YAAAxsC,SAAA,SAASsN,EAAU6c,GACf,GAAIpqB,KAAKitC,YAAY1/B,GACjB,MAAM,IAAI,GAAqB,IAAIA,EAAK,4BAG5CvN,KAAKusC,WAAWh/B,GAAS6c,CAC7B,EAEU,YAAA6iB,YAAV,SAAsB1/B,GAClB,QAASvN,KAAKusC,WAAWh/B,EAC7B,EAEQ,YAAA2/B,aAAR,SAAqB3/B,GACjB,QAASvN,KAAKwsC,WAAWj/B,EAC7B,EAEQ,YAAAy/B,aAAR,SAAqBz/B,EAAew/B,GAChC,IAAK/sC,KAAKktC,aAAaH,GAAa,CAChC,IAAMI,EAAgBntC,KAAK6sC,eAAet/B,EAAO3P,OAAOyF,KAAKrD,KAAKusC,aAC5DniB,EAAU+iB,GAAiBntC,KAAKusC,WAAWY,GAEjD,IAAK/iB,EACD,MAAM,IAAI,GAAqB,IAAI7c,EAAK,wBAG5CvN,KAAKwsC,WAAWO,GAAc3iB,G,CAGlC,OAAOpqB,KAAKwsC,WAAWO,EAC3B,EACJ,EAjEA,GCAe,SAASK,GAAuBlmC,GAC3C,OCDsCwf,EDCbxf,EAAKwf,UAAUC,cAAczjB,QAAO,SAAAiL,GAAQ,OAACA,EAAK4qB,gBAAN,KCA9D,IAAAt5B,QAAOinB,GAAW,SAAC2mB,EAAOl/B,GAAS,OAAAk/B,EAAQl/B,EAAKujB,QAAb,GAAuB,GADtD,IAA2BhL,CDE1C,CE4IA,IAAY4mB,GAOAC,GAUAC,GAiBAC,GAOAC,GAQAC,IAjDZ,SAAYL,GACR,UACA,UACA,UACA,SACH,CALD,CAAYA,KAAAA,GAAkB,KAO9B,SAAYC,GACR,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,eACH,CARD,CAAYA,KAAAA,GAA2B,KAUvC,SAAYC,GAER,cAGA,oBAGA,cAGA,sBAGA,eACH,CAfD,CAAYA,KAAAA,GAAoB,KAiBhC,SAAYC,GACR,YACA,YACA,YACA,WACH,CALD,CAAYA,KAAAA,GAAyB,KAOrC,SAAYC,GAER,0BAGA,mBACH,CAND,CAAYA,KAAAA,GAAqB,KAQjC,SAAYC,GACR,cACA,wBACA,qBACH,CAJD,CAAYA,KAAAA,GAAsB,K,SC3LlC,WAGI,WACYC,GAAA,KAAAA,yBAAAA,CACR,CAwIR,OAtIU,YAAA9B,WAAN,SAAiB5qB,G,4HACU,OAAvB,EAAAlhB,KAAuB,GAAMA,KAAK4tC,yBAAyB9J,KAAK5iB,I,cAAhE,EAAK2sB,gBAAkB,S,YAG3B,YAAA5B,aAAA,WAGI,OAFAjsC,KAAK6tC,qBAAkBlqC,EAEhBgxB,QAAQU,SACnB,EAEA,YAAAyY,WAAA,SAAWC,EAAkBC,EAAmBC,GAC5CjuC,KAAKkuC,qBAAqBC,IAAIC,iBAAiB,IAAIL,EAAY,CAC3DM,wBAAyBL,EACzBC,aAAY,GAEpB,EAEA,YAAAK,aAAA,SAAa1mC,EAAqBnF,GAC9B,OAAOzC,KAAKkuC,qBAAqBC,IAAII,aAAa,IAAI3mC,EAAenF,EACzE,EAEM,YAAA+rC,QAAN,W,+FAKI,OAJIxuC,KAAK6tC,iBACL7tC,KAAK6tC,gBAAgBM,IAAIK,UAGtB,CAAP,EAAO7Z,QAAQU,U,QAGnB,YAAAoZ,sBAAA,SACI7mC,EACA42B,EACA92B,EACAgnC,EACAjsC,GAEA,IAAMmiC,EAAYrB,SAASC,eAAe57B,GAE1C,IAAKg9B,EACD,MAAM,IAAI,GAAqB,gFAGnC,IAAM+J,EAA2BlsC,QAAAA,EAAWzC,KAAK4uC,6BAA6BpQ,EAAe92B,EAAUgnC,GAIvG,OAFA1uC,KAAKsuC,aAAa1mC,EAAa+mC,GAExB/J,CACX,EAEQ,YAAAgK,6BAAR,SACI,EAKAlnC,EACAgnC,G,IALsB1qB,EAAuB,yCAC/BtF,EAAqB,+BACvBlB,EAAO,eAKb,EAaFwG,EAAwBtc,GAZxB,IAAAsiB,OACI6kB,EAAU,aACVC,EAAQ,WAEZ,IAAAlP,mBACImP,EAAgB,mBAChBC,EAAc,iBACdC,EAAqB,wBACrBC,EAA8B,iCAC9BC,EAAW,cACXC,EAA2B,8BAI7B,EAGF1wB,IAFoB2wB,EAAQ,4BACZC,EAAQ,wBAGtBpoC,EAAOsW,IAEb,IAAKqxB,IAAeG,EAChB,MAAM,IAAI,GAAiB54B,GAAqBa,sBAGpD,IAAMs4B,EAAmB,CACrBV,WAAU,EACVG,eAAc,EACdD,iBAAgB,EAChBS,YAAatoC,GAAyC,IAAjCkmC,GAAuBlmC,GACxCwmC,GAAsB+B,QACtB/B,GAAsBgC,WAC1BhB,UAAS,EACTiB,YAAahC,GAAuBiC,MAGxC,GAAIP,EAAS,+BACT,MAAO,kBAAkB5T,KAAK0T,IACxB,gCACOI,GAAgB,CACnBJ,YAAW,EACXC,4BAA2B,KAE/B,gCACOG,GAAgB,CACnBM,UAAWf,EACXM,6BAA6B,gCACtBA,GAA2B,CAC9BD,YAAW,MAK7B,IAAMW,EAAwB,CAC1Br3B,OAAQw2B,EACRnhB,IAAKuhB,EAAS,gCACR,oBAAoB3nC,EAAQ,mBACzB4nC,EAAQ,oBAAoB5nC,EAAQ,mBAC7CwnC,+BAA8B,GAGlC,OAAO,gCACAK,GAAgB,CACnBO,sBAAqB,EACrBD,UAAWf,GAEnB,EAEQ,YAAAZ,mBAAR,WACI,IAAKluC,KAAK6tC,gBACN,MAAM,IAAI,GAAoB9J,GAAwBK,uBAG1D,OAAOpkC,KAAK6tC,eAChB,EACJ,EA7IA,G,GCFA,YACI,WAAYpvC,GAAZ,MACI,YAAMA,GAAW,wGAAsG,K,OAEvH,EAAKE,KAAO,sCACZ,EAAKC,KAAO,oC,CAChB,CACJ,OAPiE,oBAOjE,EAPA,CAAiE,G,GCCjE,WACI,WACYunC,EACAnC,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAmC,cAAAA,EACA,KAAAnC,QAAAA,CACT,CAgBP,OAdU,YAAAF,KAAN,SAAWrrB,G,gIAOP,OALI,EACAA,EAAM,mBADgB,QAAtB,MAAwC,CAAC,EAAC,GAApBs3B,OAGpBC,EAAsB1C,QAHI,IAAG,OAAI,GAKvC,GAAMttC,KAAKmmC,cAAcI,WAAW,kBAAkByJ,EAAiB,qC,OACvE,GADA,UACKhwC,KAAKgkC,QAAQiM,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOjwC,KAAKgkC,QAAQiM,Q,QAE5B,EApBA,G,GCLA,wBAMA,QALI,YAAAj4B,OAAA,SAAOqnB,GAGH,OAFA9S,GAAqBD,QAEd,IAAI4jB,gBAAgB,EAAG7Q,EAClC,EACJ,EANA,G,GCIA,YACI,WAAY5gC,GAAZ,MACI,YAAMA,GAAW,8BAA4B,K,OAE7C,EAAKE,KAAO,0BACZ,EAAKC,KAAO,sB,CAChB,CACJ,OAPqD,oBAOrD,EAPA,CAAqD,GCI9C,IAAMuxC,GAAoB,CAAC,UAAW,Y,SCJ7C,WAeI,WACYC,GAAA,KAAAA,uBAAAA,EARJ,KAAAC,gBAGJ,CAAC,EAODrwC,KAAKgkC,QAAU1X,MACnB,CA+LJ,OA7LI,YAAAwf,WAAA,SAAWwE,GACPtwC,KAAKuwC,aAAeD,CACxB,EAEA,YAAAE,UAAA,sBACI,IAAKxwC,KAAKuwC,aACN,MAAM,IAAI,GAAoBxM,GAAwBK,uBAQ1D,OALKpkC,KAAKo1B,UACNp1B,KAAKo1B,QAAUp1B,KAAKowC,uBAAuBK,aACtC1jB,MAAK,SAAA2jB,GAAU,OAAAA,EAAO14B,OAAO,CAAE24B,cAAe,EAAKJ,cAApC,KAGjBvwC,KAAKo1B,OAChB,EAEA,YAAAwb,UAAA,WASI,OARK5wC,KAAK6wC,UACN7wC,KAAK6wC,QAAUlc,QAAQkX,IAAI,CACvB7rC,KAAKwwC,YACLxwC,KAAKowC,uBAAuBU,eAE3B/jB,MAAK,SAAC,G,IAAC2jB,EAAM,KAAc,OAAN,KAAa14B,OAAO,CAAE04B,OAAM,GAAtB,KAG7B1wC,KAAK6wC,OAChB,EAEM,YAAAE,kBAAN,SACI/mB,EACAgnB,EACAC,G,yIAEe,SAAMjxC,KAAKwwC,a,OACH,OADjBE,EAAS,SACQ,GAAM1wC,KAAKowC,uBAAuBc,sB,OAuBzD,OAvBMC,EAAiB,SAEjBC,EAAuB,CAAEV,OAAM,GAC/BW,EAAyB,SAAC1xC,EAAuB2xC,GACnD,GAAI3xC,EACA,OAAOsxC,EAAQtxC,GAGnB,IACM4xC,EAAsB,CACxBtgB,SAAUjH,EAAOiH,SACjBugB,WAAYrB,GAAkBntC,YAG7B,EAAKghC,QAAQyN,OAGdT,EAAUM,GAFVA,EAAwBI,cAAcH,GAPZ,WAAM,OAAAP,EAAUM,EAAV,GAWxC,EAEAtxC,KAAK2xC,gBAAkBR,EAAen5B,OAAOo5B,EAAsBC,GAE5D,CAAP,EAAOrxC,KAAK2xC,iB,QAGV,YAAAC,iBAAN,SACIZ,EACAC,G,yIAEKjxC,KAAK6xC,eAAN,MACe,GAAM7xC,KAAKwwC,a,OAEJ,OAFhBE,EAAS,SAEO,GAAM1wC,KAAKowC,uBAAuB0B,qB,OAAlDC,EAAgB,SAEhBC,EAAsB,CACxBtB,OAAM,EACNuB,cAAc,EACdC,mBAAoB,aAGlBC,EAAwB,SAACxyC,EAAuByyC,GAClD,OAAIzyC,EACOsxC,EAAQtxC,GAGdyyC,EAAuBC,0BAI5BrB,EAAUoB,GAHCnB,EAAQ,IAAI,GAI3B,EAEAjxC,KAAK6xC,eAAiBE,EAAc/5B,OAAOg6B,EAAqBG,G,iBAGpE,MAAO,CAAP,EAAOnyC,KAAK6xC,gB,QAGhB,YAAAS,OAAA,WASI,OARKtyC,KAAKuyC,OACNvyC,KAAKuyC,KAAO5d,QAAQkX,IAAI,CACpB7rC,KAAKwwC,YACLxwC,KAAKowC,uBAAuBoC,YAE3BzlB,MAAK,SAAC,G,IAAC2jB,EAAM,KAAoB,OAAN,KAAmB14B,OAAO,CAAE04B,OAAM,EAAE+B,QAAS,GAAvC,KAGnCzyC,KAAKuyC,IAChB,EAEA,YAAAG,iBAAA,SAAiBjwC,GACb,IAAM+mC,EAAW/mC,GAAWA,EAAQgvC,OAAS,SAAW,UACpDkB,EAAS3yC,KAAKqwC,gBAAgB7G,GAmBlC,OAjBKmJ,IACDA,EAAShe,QAAQkX,IAAI,CACjB7rC,KAAKwwC,YACLxwC,KAAKowC,uBAAuBwC,sBAE3B7lB,MAAK,SAAC,G,IAAC2jB,EAAM,KAAqB,OAAN,KAAoB14B,QAAO,eAAE04B,OAAM,EAAEmC,OAAO,GAASpwC,GAA/C,IAClC6qB,OAAM,SAAA3tB,GACH,GAAIA,GAAwB,qCAAfA,EAAMW,KACf,MAAO,CAAEwyC,gBAAYnvC,EAAWovC,SAAU,WAAM,OAAApe,QAAQU,SAAR,GAGpD,MAAM11B,CACV,IAEJK,KAAKqwC,gBAAgB7G,GAAYmJ,GAG9BA,CACX,EAEA,YAAAK,gBAAA,WASI,OARKhzC,KAAKizC,gBACNjzC,KAAKizC,cAAgBte,QAAQkX,IAAI,CAC7B7rC,KAAKwwC,YACLxwC,KAAKowC,uBAAuB8C,qBAE3BnmB,MAAK,SAAC,G,IAAC2jB,EAAM,KAAoB,OAAN,KAAmB14B,OAAO,CAAE04B,OAAM,GAA5B,KAGnC1wC,KAAKizC,aAChB,EAEA,YAAAE,0BAAA,WASI,OARKnzC,KAAKozC,aACNpzC,KAAKozC,WAAaze,QAAQkX,IAAK,CAC3B7rC,KAAKwwC,YACLxwC,KAAKowC,uBAAuBiD,sBAE3BtmB,MAAK,SAAC,G,IAAC2jB,EAAM,KAAiB,OAAN,KAAgB14B,OAAO,CAAE04B,OAAM,GAAzB,KAGhC1wC,KAAKozC,UAChB,EAEM,YAAAE,mBAAN,SACI7wC,G,8HAE+B,SAAMkyB,QAAQkX,IAAI,CAC7C7rC,KAAKwwC,YACLxwC,KAAKowC,uBAAuBmD,sB,OAGhC,OALM,EAAyB,SAAxB7C,EAAM,KAKN,CAAP,EAL2B,KAKP14B,QAAO,gCAAKvV,GAAO,CAAEiuC,OAAM,M,QAGnD,YAAAqC,SAAA,sBACI,OAAOpe,QAAQkX,IAAI,CACf7rC,KAAKwzC,UAAUxzC,KAAKuyC,MACpBvyC,KAAKwzC,UAAUxzC,KAAKqwC,gBAAgBxvC,SACpCb,KAAKwzC,UAAUxzC,KAAKqwC,gBAAgBoB,QACpCzxC,KAAKwzC,UAAUxzC,KAAKozC,YACpBpzC,KAAKwzC,UAAUxzC,KAAK2xC,iBACpB3xC,KAAKwzC,UAAUxzC,KAAK6xC,gBACpB7xC,KAAKwzC,UAAUxzC,KAAKizC,iBACrBlmB,MAAK,WACJ,EAAKwlB,UAAO5uC,EACZ,EAAK0sC,gBAAkB,CAAC,EACxB,EAAK+C,gBAAazvC,EAClB,EAAKguC,qBAAkBhuC,EACvB,EAAKkuC,oBAAiBluC,EACtB,EAAKsvC,mBAAgBtvC,CACzB,GACJ,EAEQ,YAAA6vC,UAAR,SAAkBr2C,GACd,OAAOA,EACHA,EAAO4vB,MAAK,SAAA0mB,GAAO,OAAAA,EAAIV,UAAJ,IACnBpe,QAAQU,SAChB,EACJ,EAlNA,G,GCGA,WACI,WACY8Q,EACAnC,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAmC,cAAAA,EACA,KAAAnC,QAAAA,CACT,CA2GP,OAzGI,YAAAyM,WAAA,sBACI,OAAOzwC,KAAKmmC,cACPI,WAAW,yDACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAU+3B,OACnD,MAAM,IAAI,GAGd,OAAO,EAAK1M,QAAQrrB,UAAU+3B,MAClC,GACR,EAEA,YAAA8B,QAAA,sBACI,OAAOxyC,KAAKmmC,cACPI,WAAW,iEACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAU+6B,aACnD,MAAM,IAAI,GAGd,OAAO,EAAK1P,QAAQrrB,UAAU+6B,YAClC,GACR,EAEA,YAAAd,kBAAA,sBACI,OAAO5yC,KAAKmmC,cACPI,WAAW,iEACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAUg7B,cACnD,MAAM,IAAI,GAGd,OAAO,EAAK3P,QAAQrrB,UAAUg7B,aAClC,GACR,EAEA,YAAA7C,WAAA,sBACI,OAAO9wC,KAAKmmC,cACPI,WAAW,yDACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAU84B,OACnD,MAAM,IAAI,GAGd,OAAO,EAAKzN,QAAQrrB,UAAU84B,MAClC,GACR,EAEA,YAAAP,mBAAA,sBACI,OAAOlxC,KAAKmmC,cACPI,WAAW,kEACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAUw4B,eACnD,MAAM,IAAI,GAGd,OAAO,EAAKnN,QAAQrrB,UAAUw4B,cAClC,GACR,EAEA,YAAA+B,iBAAA,sBACI,OAAOlzC,KAAKmmC,cACPI,WAAW,gEACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAUi7B,aACnD,MAAM,IAAI,GAGd,OAAO,EAAK5P,QAAQrrB,UAAUi7B,YAClC,GACR,EAEA,YAAA9B,kBAAA,sBACI,OAAO9xC,KAAKmmC,cACPI,WAAW,wDACXxZ,MAAK,W,MACF,KAA2B,QAAvB,EAAC,EAAKiX,QAAQrrB,iBAAS,eAAEk7B,OACzB,MAAM,IAAI,GAGd,OAAO,EAAK7P,QAAQrrB,UAAUk7B,KAClC,GACR,EAEA,YAAAR,kBAAA,sBACI,OAAOrzC,KAAKmmC,cACPI,WAAW,iEACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQrrB,YAAc,EAAKqrB,QAAQrrB,UAAUm7B,cACnD,MAAM,IAAI,GAGd,OAAO,EAAK9P,QAAQrrB,UAAUm7B,aAClC,GACR,EAEM,YAAAP,iBAAN,W,sHACI,SAAMvzC,KAAKmmC,cAAcI,WAAW,iE,OAEpC,GAFA,UAEKvmC,KAAKgkC,QAAQrrB,YAAc3Y,KAAKgkC,QAAQrrB,UAAUo7B,aACnD,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO/zC,KAAKgkC,QAAQrrB,UAAUo7B,c,QAEtC,EA/GA,G,GCHA,YACI,WACWp0C,GADX,MAGI,YAAM,qGAAmG,K,OAFlG,EAAAA,MAAAA,EAIP,EAAKhB,KAAO,qCACZ,EAAKC,KAAO,kC,CAChB,CACJ,OATgE,oBAShE,EATA,CAAgE,GCsHhE,IAAYo1C,GAIAC,GAqBAC,GCrJL,SAASC,GAAoBnZ,GAChC,IAAMoZ,EAAYpZ,EAAS95B,MAAM,KAEjC,OAAyB,IAArBkzC,EAAUh0C,OACH,CAAC46B,EAAU,IAMf,CAHWoZ,EAAUjjB,MAAM,GAAI,GAAGvxB,KAAK,KAC7Bw0C,EAAUA,EAAUh0C,OAAS,GAGlD,EDiHA,SAAY4zC,GACR,cACA,eACH,CAHD,CAAYA,KAAAA,GAAU,KAItB,SAAYC,GACR,oBACA,gBACA,eACH,CAJD,CAAYA,KAAAA,GAAW,KAqBvB,SAAYC,GAIR,YAIA,aACH,CATD,CAAYA,KAAAA,GAAoB,K,SErIhC,WAKI,WACY/M,EACAK,EACA6M,EACAC,EACAhN,EACAC,EACA/a,GANA,KAAA2a,OAAAA,EACA,KAAAK,4BAAAA,EACA,KAAA6M,uBAAAA,EACA,KAAAC,sBAAAA,EACA,KAAAhN,6BAAAA,EACA,KAAAC,0BAAAA,EACA,KAAA/a,eAAAA,CACT,CAoNP,OAlNI,YAAAsf,WAAA,SAAWpkC,GAGP,OAFA1H,KAAKu0C,UAAY7sC,EAEV1H,KAAKw0C,kBAChB,EAEA,YAAAvI,aAAA,WACI,OAAOjsC,KAAKs0C,sBAAsBvB,UACtC,EAEA,YAAAzE,aAAA,SACImG,EACAC,EACA/E,GAEA,QAHA,IAAA+E,IAAAA,EAAyBV,GAAWW,YACpC,IAAAhF,IAAAA,EAA2BsE,GAAYW,UAElC50C,KAAK60C,iBACN,MAAM,IAAI,GAAoB9Q,GAAwBK,uBAG1D,OAAOpkC,KAAK60C,iBAAiBvG,aAAa,CACtCqB,YAAW,EACX+E,WAAU,EACVD,QAAO,GAEf,EAEA,YAAAK,cAAA,WACI,IAAK90C,KAAK60C,iBACN,MAAM,IAAI,GAAoB9Q,GAAwBK,uBAG1D,OAAOpkC,KAAK60C,iBAAiBE,gBAAgB/0C,KAAKg1C,yBACtD,EAEA,YAAAC,cAAA,SAAcrhB,GAAd,WACI,OAAO5zB,KAAKs0C,sBAAsBY,cAActhB,GAC3C7G,MAAK,SAAAooB,GAAmB,SAAKC,UAAUD,EAAf,IACxBpoB,MAAK,WAAM,SAAKsoB,sBAAsBzhB,EAA3B,GACpB,EAEA,YAAAmU,sBAAA,SAAsBzlB,GAClB,OAAOtiB,KAAKmnC,OAAOU,SACf7nC,KAAKunC,0BAA0B3Y,cAAc5uB,KAAKs1C,sCAAsChzB,IAEhG,EAEQ,YAAAkyB,iBAAR,sBACU9sC,EAAW1H,KAAKu1C,eAEtB,OAAOv1C,KAAKmnC,OAAOU,SAAS7nC,KAAKwnC,4BAA4Bha,kBAAkB9lB,IAC1EqlB,MAAK,SAAA9qB,GACF,IAAMif,EAAgBjf,EAAM2hB,eAAeE,iBAAiBpc,GACtD4f,EAAWrlB,EAAMqlB,SAAStL,cAC1Bw5B,IAAuBvzC,EAAMqgB,gBAAgBrG,qBAEnD,IAAKiF,EACD,MAAM,IAAI,GAAiB9K,GAAqBa,sBAGpD,IAAKqQ,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAG5C,IAAAq4B,EAAa5tB,EAAc8I,OAAM,SAEzC,OAAO2K,QAAQkX,IAAI,CACf,EAAKwI,uBAAuBvQ,OAC5B,EAAKwQ,sBAAsBxI,WAAWxkB,EAAUpG,EAAes0B,KAChEzoB,MAAK,SAAC,G,IAAC0oB,EAAS,KAAEC,EAAkB,KAInC,OAHA,EAAKb,iBAAmB,EAAKc,oBAAoBF,EAAW3G,GAC5D,EAAK8G,oBAAsBF,EAEpB,EAAKb,iBAAiBgB,aAAa,CACtCC,sBAAuB,CACnB,CACIl3C,KAAM82C,EAAmBI,sBAAsB,GAAGl3C,KAClDm3C,WAAY,CACRC,mBAAoBN,EAAmBI,sBAAsB,GAAGC,WAAWC,mBAC3EC,oBAAqBP,EAAmBI,sBAAsB,GAAGC,WAAWE,uBAIxFC,WAAYR,EAAmBQ,WAC/BC,gBAAiBT,EAAmBS,kBACrCppB,MAAK,SAAAztB,GACJ,IAAIA,EAASI,OAIb,MAAM,IAAI,CACd,GACJ,GACJ,GACR,EAEQ,YAAA02C,oBAAR,SAA4BC,GACxB,MAAO,CACHz3C,KAAMy3C,EAAgBC,SACtB5a,OAAQ2a,EAAgBE,SAEhC,EAEQ,YAAAvB,uBAAR,WACI,IAAKh1C,KAAK41C,oBACN,MAAM,IAAI,GAGd,OAAO51C,KAAK41C,mBAChB,EAEQ,YAAAD,oBAAR,SAA4Ba,EAAsB1H,GAC9C,QAAiBnrC,IAAbmrC,EACA,MAAM,IAAI,GAAiB14B,GAAqBa,sBAGpD,IAAMw/B,EAA+B3H,EAAW,OAAS,aAEzD,OAAO,IAAI0H,EAAOtuB,SAASwuB,IAAIC,eAAe,CAAEF,YAAW,GAC/D,EAEQ,YAAAlB,aAAR,WACI,IAAKv1C,KAAKu0C,UACN,MAAM,IAAI,GAAoBxQ,GAAwBK,uBAG1D,OAAOpkC,KAAKu0C,SAChB,EAEQ,YAAAqC,qCAAR,SAA6ChjB,EAAgCluB,EAAYmxC,GACrF,IACM,EAAwB1C,GADbvgB,EAAYkjB,kBAAkBjb,KAAKl3B,eAAehG,MAC5Dmb,EAAS,KAAEC,EAAQ,KACpBE,EAAY2Z,EAAYkjB,kBAAkBjb,KAAKl3B,eAAesV,SAC9DE,EAAQyZ,EAAYkjB,kBAAkBjb,KAAKl3B,eAAeoyC,SAC1Dz8B,EAAcsZ,EAAYkjB,kBAAkBjb,KAAKl3B,eAAe2V,WAChED,EAAeuZ,EAAYkjB,kBAAkBjb,KAAKl3B,eAAe0V,YAEvE,KAAKP,GAAcG,GAAaE,GAASG,GAAeD,GACpD,MAAM,IAAI,GAAiBjE,GAAqBE,uBAGpD,MAAO,CACH5Q,GAAE,EACFoU,UAAS,EACTC,SAAQ,EACRC,QAAS4Z,EAAYkjB,kBAAkBjb,KAAKl3B,eAAeqyC,YAC3D/8B,SAAQ,EACRC,SAAU0Z,EAAYkjB,kBAAkBjb,KAAKl3B,eAAeuV,SAAW0Z,EAAYkjB,kBAAkBjb,KAAKl3B,eAAesyC,SACzH98B,KAAI,EACJC,gBAAiBwZ,EAAYkjB,kBAAkBjb,KAAKl3B,eAAeuyC,mBACnElhB,oBAAqBpC,EAAYkjB,kBAAkBjb,KAAKl3B,eAAeuyC,mBACvE58B,WAAU,EACVD,YAAW,EACXE,MAAOqZ,EAAYkjB,kBAAkBjb,KAAKl3B,eAAewyC,YACzD38B,aAAc,GACdqU,MAAOgoB,GAAiBjjB,EAAY/E,MAE5C,EAEQ,YAAAymB,sCAAR,SAA8Cz7B,GACpC,MAAwBs6B,GAAoBt6B,EAAQlb,MAE1D,MAAO,CACHmb,UAHY,KAIZC,SAJsB,KAKtBC,QAASH,EAAQm9B,YACjB/8B,SAAUJ,EAAQI,SAClBC,SAAUL,EAAQK,SAAWL,EAAQo9B,SACrC98B,KAAMN,EAAQk9B,SACd38B,gBAAiBP,EAAQq9B,mBACzBlhB,oBAAqBnc,EAAQq9B,mBAC7B58B,WAAYT,EAAQS,WACpBD,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQs9B,YACf38B,aAAc,GAEtB,EAEQ,YAAA46B,UAAR,SAAkBgC,GACd,IAAMf,EAAkBe,EAAgBC,QAExC,OAAOr3C,KAAKwsB,eAAe8C,KAAK,gBAAiB,CAC7ClwB,SAAS,eACLyuB,OAAQ,YACR,eAAgB,qCACbF,IAEPxuB,KAAM,CACFm4C,aAAcF,EAAgBx4C,KAC9BkqB,MAAOsuB,EAAgBtuB,MACvByuB,YAAaH,EAAgBG,YAC7B/+B,SAAUxY,KAAKu1C,eACfrzC,OAAQ,wBACRs1C,iBAAkBx3C,KAAKo2C,oBAAoBC,KAGvD,EAEQ,YAAAhB,sBAAR,SAA8BzhB,GAC1B,IAAM6jB,EAAuBz3C,KAAKmnC,OAAOjsB,WAAWvW,eAAegW,oBAEnE,IAAK88B,EACD,MAAM,IAAI,GAAiBrhC,GAAqBE,uBAGpD,IAAMohC,EAAyB13C,KAAK42C,qCAAqChjB,EAAa6jB,EAAqB/xC,GAAI+xC,EAAqB5oB,OAEpI,OAAO7uB,KAAKmnC,OAAOU,SACf7nC,KAAKsnC,6BAA6B1Y,cAAc8oB,GAExD,EACJ,EAjOA,G,GCVA,WACI,WACYvR,EACAnC,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAmC,cAAAA,EACA,KAAAnC,QAAAA,CACT,CAaP,OAXI,YAAAF,KAAA,sBACI,OAAO9jC,KAAKmmC,cACPI,WAAW,yCACXxZ,MAAK,WACF,IAAK,EAAKiX,QAAQwS,OACd,MAAM,IAAI,GAGd,OAAO,EAAKxS,QAAQwS,MACxB,GACR,EACJ,EAjBA,GCQe,SAASmB,GAAgC3sB,EAAsB4sB,GAC1E,IAAMC,GAAgB,IAAAC,uBAChBrR,GAAe,KAAAsR,mBAErB,OAAO,IAAI,GACP/sB,EACA,IAAI,GACA,IAAI,GAA2B6sB,IAEnC,IAAI,GAAsBpR,GAC1BmR,EACA,IAAI,GACA,IAAI,GAA4BC,GAChC,IAAI,GACA,IAAI,GAA2BA,KAGvC,IAAI,GACA,IAAI,GAAyBA,GAC7B,IAAI,GAAsBA,IAE9BA,EAER,C,SC9BA,wBAsGA,QArGI,YAAA/L,WAAA,SACIxkB,EACApG,EACAs0B,GAEA,OAAO7gB,QAAQU,QAAQr1B,KAAKg4C,gCACxB1wB,EACApG,EACAs0B,GAER,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GAEN,MAQAA,EAAW,kBAPPh1B,EAAI,OACgB2O,EAAK,yBACzB,IAAAsuB,KACiBya,EAAQ,cACRC,EAAQ,cAKjC,OAAO5hB,QAAQU,QAAQ,CACnBz2B,KAAI,EACJkqB,MAAOvb,EACP8pC,QAAS,CACLf,SAAQ,EACRC,SAAQ,IAGpB,EAEQ,YAAAyB,gCAAR,SACI1wB,EACApG,EACAs0B,GAGI,IAAA7tB,EAIAL,EAAQ,mBAFc2wB,EAEtB3wB,EAAQ,mBAGR,EAQApG,EAAa,mBAPTg3B,EAAiB,oBACH79B,EAAW,eACL89B,EAAY,qBACdtJ,EAAU,mBAMpC,MAAO,CACHqH,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtBxJ,WAAU,EACVsJ,aAAY,GAEhBrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAdR/0B,EAAa,eAc+B7gB,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,QACTupC,kBAAiB,MAI7BS,gBAAiB,CACbt+B,YAAW,EACX49B,aAAY,EACZW,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB,GAAGmxB,QAAQ,IAErDC,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EAtGA,G,GCAA,wBAuGA,QAtGI,YAAA3M,WAAA,SACIxkB,EACApG,EACAs0B,GAGA,OAAO7gB,QAAQU,QAAQr1B,KAAKg4C,gCACxB1wB,EACApG,EACAs0B,GAER,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GAEN,MAQAA,EAAW,kBAPPh1B,EAAI,OACgB2O,EAAK,yBACzB,IAAAsuB,KACiBya,EAAQ,cACRC,EAAQ,cAKjC,OAAO5hB,QAAQU,QAAQ,CACnBz2B,KAAI,EACJkqB,MAAOvb,EACP8pC,QAAS,CACLf,SAAQ,EACRC,SAAQ,IAGpB,EAEQ,YAAAyB,gCAAR,SACI1wB,EACApG,EACAs0B,GAGI,IAAA7tB,EAIAL,EAAQ,mBAFc2wB,EAEtB3wB,EAAQ,mBAGR,EAQApG,EAAa,mBAPTg3B,EAAiB,oBACH79B,EAAW,eACL89B,EAAY,qBACdtJ,EAAU,mBAMpC,MAAO,CACHqH,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtBxJ,WAAU,EACVsJ,aAAY,GAEhBrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAdR/0B,EAAa,eAc+B7gB,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,QACTupC,kBAAiB,MAI7BS,gBAAiB,CACbt+B,YAAW,EACX49B,aAAY,EACZW,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB,GAAGmxB,QAAQ,IAErDC,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EAvGA,GCAA,IAAMS,GAAc,CAChBhD,WAAY,EACZC,gBAAiB,G,SAGrB,wBA0GA,QAzGI,YAAArK,WAAA,SACIxkB,EACApG,EACAs0B,GAEA,OAAO7gB,QAAQU,QACXr1B,KAAKm5C,6BAA6B7xB,EAAUpG,EAAes0B,GAEnE,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GAEN,MAQAA,EAAW,kBAPPh1B,EAAI,OACgB2O,EAAK,yBACzB,IAAAsuB,KACiBya,EAAQ,cACRC,EAAQ,cAKjC,OAAO5hB,QAAQU,QAAQ,CACnBz2B,KAAI,EACJkqB,MAAOnV,KAAKpG,GACZ8pC,QAAS,CACLf,SAAQ,EACRC,SAAQ,IAGpB,EAEQ,YAAA4C,6BAAR,SAAqC7xB,EAAoBpG,EAA8Bs0B,GAE/E,IAAA7tB,EAIAL,EAAQ,mBAFc2wB,EAEtB3wB,EAAQ,mBAGR,EAQApG,EAAa,mBAPSg3B,EAAiB,mBACrB79B,EAAW,eACL89B,EAAY,qBACdtJ,EAAU,mBACbwJ,EAAO,gBAE1Be,EACAl4B,EAAa,eAEXm4B,EAA8Br5C,KAAKs5C,gCAAgCpB,GACnEqB,EAAoBv5C,KAAKw5C,sBAAsBH,EAA6BD,GAElF,OAAO,gCACAF,IAAW,CACdpD,sBAAuB,CAACyD,GACxBZ,gBAAiB,CACbC,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB,GAAGmxB,QAAQ,GACjDb,aAAY,EACZ59B,YAAW,GAEf+9B,aAAe,CACXD,aAAY,EACZtJ,WAAU,EACVwJ,QAAO,GAEXU,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,IAGjC,EAEQ,YAAAa,gCAAR,SAAwCpB,GACpC,MAAO,CACHt5C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,eACTupC,kBAAiB,GAG7B,EAEQ,YAAAsB,sBAAR,SAA8Bd,EAAsDU,GAChF,MAAO,CACHx6C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBmD,EAAe/4C,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAAyB,EAEjC,EACJ,EA1GA,G,GCFA,WAGI,WACYe,GAAA,KAAAA,qBAAAA,CACT,CAsHP,OApHI,YAAA3N,WAAA,SACIxkB,EACApG,EACAs0B,GAHJ,WAKI,IAAKt0B,EAAcovB,YACf,MAAM,IAAI,GAAiBl6B,GAAqBa,sBAKpD,OAFAjX,KAAKy5C,qBAAqB3N,WAAW5qB,EAAcovB,aAE5CtwC,KAAKy5C,qBAAqBtG,4BAC5BpmB,MAAK,SAAA2sB,GAGF,OAFA,EAAKC,uBAAyBD,EAEvB,EAAKE,wBACRtyB,EACApG,EAAc0e,mBACd4V,EAER,GACR,EAEA,YAAAzC,SAAA,WACI,OAAO/yC,KAAKy5C,qBAAqB1G,UACrC,EAEA,YAAAmC,cAAA,SAActhB,GACV,IAAMvxB,EAAUuR,KAAKimC,MAAMjmB,EAAYkjB,kBAAkBgD,iBAAiBvsC,OAAOwsC,gBAAgB,GAEjG,OAAOplB,QAAQU,QAAQ,CACnBvM,MAAOzmB,EAAQymB,MACflqB,KAAMyD,EAAQzD,KACd2+B,YAAal7B,EAAQk7B,YACrB8Z,QAAS,CACLf,SAAUj0C,EAAQg1C,QAAQf,SAC1BC,SAAUl0C,EAAQg1C,QAAQd,SAC1ByD,QAAS33C,EAAQg1C,QAAQ2C,SAE7BC,QAAS53C,EAAQ43C,SAEzB,EAEQ,YAAAL,wBAAR,SACItyB,EACAsY,EACA4V,GAEA,IAAK5V,EAAmBsa,cACpB,MAAM,IAAI,GAAiB9jC,GAAqBa,sBAGpD,IAAMkjC,EAAsE,CACxE/B,aAAc,CACVC,QAASzY,EAAmBsa,cAC5B/B,aAAcvY,EAAmBwa,mBACjCvL,WAAYjP,EAAmBya,kBAEnC1B,gBAAiB,CACbV,aAAc3wB,EAASpgB,KAAK+pB,SAAS3wB,KACrCs4C,iBAAkB,QAClBC,YAAY,IAAAziB,OAAM9O,EAASK,mBAAoB,GAAGmxB,QAAQ,IAE9DwB,iBAAkB,CACdhC,wBAAwB,EACxBiC,qBAAsB,QAE1BvB,yBAA0BxD,EAC1BuD,eAAe,EACfN,qBAAqB,GAGzB,OAAOz4C,KAAKw6C,0DACRx6C,KAAK25C,uBAAuBc,yBAAyBN,GAE7D,EAEQ,YAAAK,0DAAR,SAAkEE,GAC9D,MAAO,CACHxE,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAASqC,EAAgCtC,aAAaC,QACtDxJ,WAAY6L,EAAgCtC,aAAavJ,WACzDsJ,aAAcuC,EAAgCtC,aAAaD,cAE/DrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqByE,EAAgCJ,iBAAiBrE,oBACtEqC,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,YACT,uBAAwB,KACxB,qCAAsC+rC,EAAgCC,oCAAoC5E,WAAW,sCACrH,uBAAwB2E,EAAgCC,oCAAoC5E,WAAW,wBACvG,uBAAwB2E,EAAgCC,oCAAoC5E,WAAW,4BAInH4C,gBAAiB+B,EAAgC/B,gBACjDI,eAAe,EACfC,wBAAyB0B,EAAgC1B,wBACzDC,0BAA2B,CACvBR,oBAAqBiC,EAAgCjC,qBAGjE,EACJ,EA3HA,G,GCHA,YACI,WAAYh6C,GAAZ,MACI,YAAMA,GAAW,qGAAmG,K,OAEpH,EAAKE,KAAO,2BACZ,EAAKC,KAAO,gC,CAChB,CACJ,OAPsD,oBAOtD,EAPA,CAAsD,G,GCKtD,WAKI,WACW4tB,GAAA,KAAAA,eAAAA,EALH,KAAAouB,gBAAkB,GAClB,KAAAC,WAAY,EACZ,KAAAC,cAAgB,0CAIrB,CA+HP,OA7HU,YAAAhP,WAAN,SACIxkB,EACApG,EACAs0B,G,+FAKA,OAHAx1C,KAAK46C,gBAAkB15B,EAAc0e,mBAAmBmb,eACxD/6C,KAAK66C,YAAc35B,EAAc8I,OAAO8kB,SAEjC,CAAP,EAAO9uC,KAAKg7C,4DACR1zB,EACApG,EAAc0e,mBACd4V,G,QAIR,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEM,YAAA6f,cAAN,SAAoBthB,G,gIAEhB,IACIrmB,EAAQqG,KAAKimC,MAAMjmB,EAAYkjB,kBAAkBgD,iBAAiBvsC,M,CACpE,MAAO0tC,GACL,MAAM,IAAI,GAAqBj7C,KAAK86C,c,CAGxC,IAAKvtC,EAAM2tC,YAAc3tC,EAAM4tC,kBAAoB5tC,EAAM6tC,cACrD,MAAM,IAAI,GAAyBp7C,KAAK86C,eAEzB,SAAM96C,KAAKq7C,cAAcr7C,KAAK66C,UAAW76C,KAAK46C,gBAAiBrtC,I,OAgBlF,OAhBM+tC,EAAa,SAEbj5C,EAA2B,CAC7BymB,MAAOwyB,EAAW/tC,MAClB3O,KAAM,aACN2+B,YAAa3J,EAAYkjB,kBAAkBvZ,YAC3C8Z,QAAS,CACLf,SAAU1iB,EAAYkjB,kBAAkBjb,KAAK0f,YAC7ChF,SAAU3iB,EAAYkjB,kBAAkBjb,KAAK2f,cAIjDF,EAAWG,eACXp5C,EAAQk1C,YAAc+D,EAAWG,cAG9B,CAAP,EAAOp5C,G,QAGG,YAAAg5C,cAAd,SAA4BvM,EAAmBiM,EAAwBxtC,G,4HACxB,SAAMvN,KAAK07C,4BAA4B5M,EAAUiM,EAAgB,CACxGn8C,KAAM,YACN+8C,WAAYpuC,K,OAGhB,KALMquC,EAAqC,YAKjBA,EAAiBruC,MACvC,MAAM,IAAI,GAAyB,8CAGvC,MAAO,CAAP,EAAOquC,G,QAGG,YAAAF,4BAAd,SAA0C5M,EAAmB+M,EAAwB53C,G,YAAA,IAAAA,IAAAA,EAAA,K,qHAMhE,OAFX6pB,EAAMghB,EAHK,0CACA,kCAIA,GAAM9uC,KAAKwsB,eAAe8C,KAAKxB,EAAK,CACjDM,aAAa,EACbjvB,KAAM8E,EACN7E,QAAS,CACL,eAAgB,QAChB08C,cAAeD,EACf,eAAgB,S,OAIxB,MAAO,CAAP,EAViB,SAUD18C,M,QAGZ,YAAA67C,4DAAR,SACI1zB,EACAsY,EACA4V,GAEA,MAAO,CACHU,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAASzY,EAAmBsa,cAC5BrL,WAAYjP,EAAmBya,iBAC/BlC,aAAcvY,EAAmBwa,oBAErCtE,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqB,CAAC,OAAQ,WAAY,MAAO,aAAc,QAC/DqC,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,cACTupC,kBAAmBtY,EAAmBmb,mBAIlDpC,gBAAiB,CACbV,aAAc3wB,EAASpgB,KAAK+pB,SAAS3wB,KACrCs4C,iBAAkB,QAClBC,YAAY,IAAAziB,OAAM9O,EAASK,mBAAoB,GAAGmxB,QAAQ,IAE9DC,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EAtIA,G,GCLA,wBAoGA,QAnGI,YAAA3M,WAAA,SACIxkB,EACApG,EACAs0B,GAEA,OAAO7gB,QAAQU,QAAQr1B,KAAKg4C,gCACxB1wB,EACApG,EACAs0B,GAER,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GAEN,MAQAA,EAAW,kBAPPh1B,EAAI,OACgB2O,EAAK,yBACzB,IAAAsuB,KACiBya,EAAQ,cACRC,EAAQ,cAKjC,OAAO5hB,QAAQU,QAAQ,CACnBvM,MAAOnV,KAAKpG,GACZ3O,KAAI,EACJy4C,QAAS,CACLf,SAAQ,EACRC,SAAQ,IAGpB,EAEQ,YAAAyB,gCAAR,SACI1wB,EACApG,EACAs0B,GAGI,IAAA7tB,EAIAL,EAAQ,mBAFc2wB,EAEtB3wB,EAAQ,mBAGR,EAOApG,EAAa,mBANTg3B,EAAiB,oBACGC,EAAY,qBACdtJ,EAAU,mBAMpC,MAAO,CACHqH,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtBxJ,WAAU,EACVsJ,aAAY,GAEhBrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAdR/0B,EAAa,eAc+B7gB,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,cACTupC,kBAAiB,MAI7BS,gBAAiB,CACbV,aAAY,EACZW,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB,GAAGmxB,QAAQ,IAErDC,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EApGA,G,GCAA,wBAoGA,QAnGI,YAAA3M,WAAA,SACIxkB,EACApG,EACAs0B,GAEA,OAAO7gB,QAAQU,QAAQr1B,KAAKg4C,gCACxB1wB,EACApG,EACAs0B,GAER,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GAEN,MAQAA,EAAW,kBAPPh1B,EAAI,OACgB2O,EAAK,yBACzB,IAAAsuB,KACiBya,EAAQ,cACRC,EAAQ,cAKjC,OAAO5hB,QAAQU,QAAQ,CACnBvM,MAAOnV,KAAKpG,GACZ3O,KAAI,EACJy4C,QAAS,CACLf,SAAQ,EACRC,SAAQ,IAGpB,EAEQ,YAAAyB,gCAAR,SACI1wB,EACApG,EACAs0B,GAGI,IAAA7tB,EAIAL,EAAQ,mBAFc2wB,EAEtB3wB,EAAQ,mBAGR,EAOApG,EAAa,mBANTg3B,EAAiB,oBACGC,EAAY,qBACdtJ,EAAU,mBAMpC,MAAO,CACHqH,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtBxJ,WAAU,EACVsJ,aAAY,GAEhBrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAdR/0B,EAAa,eAc+B7gB,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,QACTupC,kBAAiB,MAI7BS,gBAAiB,CACbV,aAAY,EACZW,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB,GAAGmxB,QAAQ,IAErDC,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EApGA,G,GCCA,wBAwGA,QAvGI,YAAA3M,WAAA,SACIxkB,EACApG,EACAs0B,GAEA,OAAO7gB,QAAQU,QAAQr1B,KAAKg4C,gCACxB1wB,EACApG,EACAs0B,GAER,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GACV,IACI,IAAMvxB,EAAUuR,KAAKimC,MAAMjmB,EAAYkjB,kBAAkBgD,iBAAiBvsC,OAE1E,OAAOonB,QAAQU,QAAQ,CACnBvM,MAAOzmB,EAAQqD,GACf9G,KAAMyD,EAAQzD,KACdy4C,QAAS,CACLf,SAAUj0C,EAAQof,KAAKkX,MACvB4d,SAAUl0C,EAAQof,KAAKs6B,Q,CAGjC,MAAOd,GACL,MAAM,IAAI,GAAqB,4C,CAEvC,EAEQ,YAAAjD,gCAAR,SACI1wB,EACApG,EACAs0B,GAGI,IAAA7tB,EAKAL,EAAQ,mBAHc2wB,EAGtB3wB,EAAQ,mBADRvV,EACAuV,EAAQ,aAGR,EAUApG,EAAa,mBATWi3B,EAAY,qBACdtJ,EAAU,mBACbwJ,EAAO,gBACtB2D,EAAa,gBACbC,EAAoB,uBACpBC,EAAsB,yBACtBzb,EAAK,QAET2Y,EACAl4B,EAAa,eAEX0f,EAAW7uB,aAAY,EAAZA,EAAc4Y,OAAM,SAAA3F,GAAe,OAAAA,EAAYC,oBAAZ,IAEpD,MAAO,CACHixB,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAAO,EACPxJ,WAAU,EACVsJ,aAAY,GAEhBrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBmD,EAAe/4C,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,SACT,iBAAkBqtC,EAClB,wBAA4BC,EAAoB,IAAIC,MAIhEvD,gBAAiB,CACbV,aAAY,EACZW,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB,GAAGmxB,QAAQ,IAErDC,eAAe,EACfC,2BAAyBvY,aAAK,EAALA,EAAOC,UAAWE,GAAuC,UAA3BH,aAAK,EAALA,EAAOE,kBAEvD6U,GACPyD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EAxGA,G,GCCA,wBAuGA,QAtGI,YAAA3M,WAAA,SACIxkB,EACApG,EACAs0B,GAEA,OAAO7gB,QAAQU,QAAQr1B,KAAKg4C,gCACxB1wB,EACApG,EACAs0B,GAER,EAEA,YAAAzC,SAAA,WACI,OAAOpe,QAAQU,SACnB,EAEA,YAAA6f,cAAA,SAActhB,GACV,IAAIvxB,EACJ,IACIA,EAAUuR,KAAKimC,MAAMjmB,EAAYkjB,kBAAkBgD,iBAAiBvsC,M,CACtE,MAAO0tC,GACL,MAAM,IAAI,GAAqB,4C,CAGnC,KAAK54C,EAAQqD,IAAOrD,EAAQzD,MAASyD,EAAQof,MAASpf,EAAQof,KAAKkX,OAAUt2B,EAAQof,KAAKs6B,OACtF,MAAM,IAAI,GAAyB,6CAGvC,OAAOpnB,QAAQU,QAAQ,CACnBvM,MAAOzmB,EAAQqD,GACf9G,KAAMyD,EAAQzD,KACdy4C,QAAS,CACLf,SAAUj0C,EAAQof,KAAKkX,MACvB4d,SAAUl0C,EAAQof,KAAKs6B,QAGnC,EAEQ,YAAA/D,gCAAR,SACI1wB,EACApG,EACAs0B,GAGI,IAAA7tB,EAIAL,EAAQ,mBAFJ,EAEJA,EAAQ,cAFc2wB,EAAY,OAAiBzgB,EAAa,gBAKhE,EASAtW,EAAa,mBARWi3B,EAAY,qBACdtJ,EAAU,mBACbwJ,EAAO,gBACtB2D,EAAa,gBACbC,EAAoB,uBACpBC,EAAsB,yBAK9B,MAAO,CACHhG,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAAO,EACPxJ,WAAU,EACVsJ,aAAY,GAEhBrC,sBAAuB,CAAC,CACpBl3C,KAAM,OACNm3C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAdR/0B,EAAa,eAc+B7gB,KAAI,SAAAohB,GAAQ,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAChD62B,wBAAwB,EACxBC,yBAA0B,CACtBpd,OAAQ+Y,GAAqBsE,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvB95C,KAAM,kBACNm3C,WAAY,CACRpnC,QAAS,SACT,iBAAkBqtC,EAClB,wBAA4BC,EAAoB,IAAIC,MAIhEvD,gBAAiB,CACbV,aAAY,EACZW,iBAAkB,QAClBC,YAAY,IAAAziB,OAAMzO,EAAoB6P,GAAeshB,QAAQthB,IAEjEuhB,eAAe,EACfC,yBAA0BxD,EAC1ByD,0BAA2B,CACvBR,qBAAqB,GAGjC,EACJ,EAvGA,G,GCEA,WAEI,WACYtS,EACDnC,QAAA,IAAAA,IAAAA,EAAA,QADC,KAAAmC,cAAAA,EACD,KAAAnC,QAAAA,CACR,CAkCP,OAhCU,YAAAF,KAAN,SAAW,G,IAAEqY,EAAgB,mBAAEC,EAAQ,WAAEtN,EAAQ,WAAE5f,EAAU,a,mIAErDitB,GAOME,EAAY,CACf,YAPevN,EAAW,WAAa,IAOnB,kDANR,CACX,UAAUsN,EACV,cAAcltB,GAKRtvB,KAAK,MACbA,KAAK,KAEP,GAAMI,KAAKmmC,cAAcI,WAAW8V,KAZpC,M,cAwBJ,GAFA,UAEKr8C,KAAKgkC,QAAQsY,WACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOt8C,KAAKgkC,QAAQsY,Y,OANpB,SAAMt8C,KAAKmmC,cAAcI,WAAW,MAAKuI,EAAW,WAAa,IAAE,2C,QAQ3E,EAvCA,G,GCLA,WAGI,WACY3I,GAAA,KAAAA,cAAAA,EAERnmC,KAAKgkC,QAAU1X,MACnB,CAgBJ,OAdU,YAAAwkB,WAAN,SAAiBjC,G,YAAA,IAAAA,IAAAA,EAAA,K,8HACP0N,EAAY,8CACZ95C,EAA6B,CAAE+5C,OAAO,EAAMrkB,WAAY,CAAE,mBAAoB0W,IAEpFA,EACM,GAAM7uC,KAAKmmC,cAAcI,WAAWgW,EAAW95C,IADrD,M,cACM,S,aACA,SAAMzC,KAAKmmC,cAAcI,WAAWgW,I,OAApC,S,iBAEN,IAAKv8C,KAAKgkC,QAAQyN,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOzxC,KAAKgkC,QAAQyN,Q,QAE5B,EAvBA,G,GCEA,WAGI,WACYtL,GAAA,KAAAA,cAAAA,EAERnmC,KAAKgkC,QAAU1X,MACnB,CAwFJ,OAtFU,YAAAmwB,mBAAN,SACIv7B,EACA+P,EACAyrB,G,mIAEMC,EAAwB38C,KAAK48C,iCAAiC17B,EAAe+P,EAAUyrB,GAExF18C,KAAKgkC,QAAQ6Y,iBAAd,MAIA,GAAM78C,KAAKmmC,cAAcI,WAFP,uEAE6B,CAAEiW,OAAO,EAAMrkB,WAAY,CAAC,K,OAE3E,GAFA,UAEKn4B,KAAKgkC,QAAQ6Y,iBACd,MAAM,IAAI,G,iBAIlB,SAAM78C,KAAKgkC,QAAQ6Y,iBAAiBF,I,OAEpC,GAFA,UAEK38C,KAAKgkC,QAAQyN,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOzxC,KAAKgkC,QAAQyN,Q,QAGhB,YAAAmL,iCAAR,SACI17B,EACA+P,EACAyrB,QAAA,IAAAA,IAAAA,GAAA,GAEQ,IAAAh3C,EAAwCwb,EAAa,GAAjDovB,EAAoCpvB,EAAa,YAApC0e,EAAuB1e,EAAa,mBAE7D,KAAK0e,aAAkB,EAAlBA,EAAoBkd,UACrB,MAAM,IAAI,GAAiB1mC,GAAqBa,sBAIhD,IAAA8lC,EAUAnd,EAAkB,OATlBkd,EASAld,EAAkB,SARlBiP,EAQAjP,EAAkB,WAPlBod,EAOApd,EAAkB,cANlBqd,EAMArd,EAAkB,eALlBsd,EAKAtd,EAAkB,wBAJlBud,EAIAvd,EAAkB,wBAHlBwd,EAGAxd,EAAkB,wBAFlB,EAEAA,EAAkB,mCAFlByd,OAAkC,IAAG,KAAE,EACvC,EACAzd,EAAkB,iCADlB0d,OAAgC,IAAG,KAAE,EAGnCC,GAA4Bb,GAA6BS,EAEzDK,EAASD,GAA4BL,GAA2BR,EAEhEe,EAAmBF,GAAmC,8BAAP73C,EAC/Cg4C,EAAoBD,EAAmB,CAAC,QAAU,GAClDE,EAAsBF,EAA8B,GAAX,CAAC,QAE1CG,EAAsBR,EAA0B,CAAC,SAAU,YAAc,GACzES,EAAwBT,EAAmD,GAAzB,CAAC,SAAU,YAE7DU,GAAoBP,IAA6BL,EACjDa,EAAqBD,GAAoBb,EAAiB,CAAC,SAAW,GACtEe,EAAuBF,GAAqBb,EAA6B,GAAZ,CAAC,SAC9DgB,EAAoBH,EAAmBR,EAAmC,GAC1EY,EAAqBJ,EACrBT,EAAmCn6C,QAAO,SAACi7C,GAAgB,OAACb,EAAiCptB,SAASiuB,EAA3C,IAC3Dd,EAEAe,GAAc,oBAAoBT,EAAuBE,EAAyBG,EAAwBE,GAC1GG,GAAa,oBAAoBX,EAAsBE,EAAwBG,EAAuBE,GAE5G,MAAO,CACH,YAAanB,EACb,8BAA+BE,EAC/B,oBAAqB1M,EACrB,cAAezB,EACf,iBAAkBwP,EAAcj+C,OAAS,EAAIi+C,OAAgB16C,EAC7D,kBAAmBy6C,EAAeh+C,OAAS,EAAIg+C,OAAiBz6C,EAChE65C,OAAM,EACNhM,WAAY,CAAC,UAAW,gBAAiB,WAAY,kBACrDvgB,SAAQ,EACR8rB,OAAM,EAEd,EACJ,EA/FA,G,GCMA,WACI,WACYvwB,GAAA,KAAAA,eAAAA,CACT,CAoDP,OAhDU,YAAA8xB,aAAN,SAAmBxxB,EAAgBD,G,YAAA,IAAAA,IAAAA,EAAA,K,wGAmB/B,OAlBQ0xB,EAAsD1xB,EAAM,SAAlD2xB,EAA4C3xB,EAAM,WAAtC4xB,EAAgC5xB,EAAM,aAAxB6xB,EAAkB7xB,EAAM,MAAjB8xB,EAAW9xB,EAAM,QAChErU,EAAW,iBAEXimC,EACAjmC,EAAW,oCACJgmC,EACPhmC,EAAW+lC,EAAW,+BAAiC,yBAChDA,IACP/lC,EAAW,wBAEXmmC,IAAYD,IACZlmC,EAAWgmC,EAAa,8BAAgC,uBAGxDE,IACAlmC,EAAWgmC,EAAa,2CAA6C,mCAGlE,CAAP,EAAOx+C,KAAK4+C,YAAY9xB,EAAQtU,G,QAG9B,YAAAomC,YAAN,SAAkB9xB,EAAgBvE,G,gIASlB,OARNuF,EAAM,2BAA2BvF,EACjCppB,EAAO,CAAE2tB,OAAM,GACf1tB,GAAU,eACZ,iBAAkBsuB,GAClB,eAAgB,SACbC,IAGK,GAAM3tB,KAAKwsB,eAAe8C,KAAgBxB,EAAK,CAAE1uB,QAAO,EAAED,KAAI,K,OAE1E,MAAO,CAAP,EAFY,SAEDA,M,QAGT,YAAA0/C,eAAN,W,4HAQgB,OANNz/C,GAAU,eACZ,iBAAkBsuB,GAClB,eAAgB,SACbC,IAGK,GAAM3tB,KAAKwsB,eAAezuB,IAP1B,gDAOgD,CAACqB,QAAO,K,OAEpE,MAAO,CAAP,EAFY,SAEDD,M,QAEnB,EAvDA,G,GCRA,YACI,WAAYV,GAAZ,MACI,YAAMA,GAAW,qBAAmB,K,OAEpC,EAAKE,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OAPiD,oBAOjD,EAPA,CAAiD,GCNjD,IAAKkgD,IAAL,SAAKA,GACD,oBACA,uCACA,oBACA,uCACA,kBACA,sBACA,kBACA,kDACA,0BACA,sBACA,sBACA,0BACA,cACA,sBACA,4BACA,mCACA,uCACA,qCACA,uCACA,2BACA,gDACA,sBACA,sBACA,4BACA,gCACA,8BACA,oDACA,cACA,kBACA,sBACA,kBACA,kBACA,kBACA,oBACA,mDACA,oBACA,oBACA,YACA,wCACA,kBACA,iCACA,8CACA,mCACA,gDACA,0DACA,yEACA,8CACA,2BACA,oBACA,qBACA,oBACA,sBACA,yBACA,6CACA,wBACA,qCACA,mCACA,kDACA,kDACA,4CACA,uBACA,iBACA,kCACA,0BACA,sCACA,kBACA,WACH,CApED,CAAKA,KAAAA,GAAmB,KAsExB,YC/CA,IAAYC,GAQAC,GAKAC,GAQAC,IArBZ,SAAYH,GACR,kBACA,sBACA,kBACA,YACA,2BACH,CAND,CAAYA,KAAAA,GAAgB,KAQ5B,SAAYC,GACR,sBACA,yBACH,CAHD,CAAYA,KAAAA,GAAiB,KAK7B,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAYA,KAAAA,GAAgB,KAQ5B,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAAgB,KAiKrB,IAAMC,GAA8B,CAAC,Q,SCtK5C,WAWI,WACYC,EACAC,EACAlY,EACApT,EACA0T,GAJA,KAAA2X,oBAAAA,EACA,KAAAC,6BAAAA,EACA,KAAAlY,OAAAA,EACA,KAAApT,oBAAAA,EACA,KAAA0T,sBAAAA,EAiNJ,KAAA6X,qBAAuB,SAACvZ,GAC5B,IAAMwZ,GAAY,iBAAkCxZ,GAC5CjjB,EAAiDijB,EAAK,MAA/CyZ,EAA0CzZ,EAAK,MAAxC0Z,EAAmC1Z,EAAK,OAAhC2Z,EAA2B3Z,EAAK,MAAzB4Z,EAAoB5Z,EAAK,OAAjB6Z,EAAY7Z,EAAK,QA8B9D,OA5BIjjB,IAAUi8B,GAAiBj8B,WACpBy8B,EAAaz8B,MAGpB28B,IAAWT,GAAkBS,WACtBF,EAAaE,OAGpBD,IAAUP,GAAiBO,WACpBD,EAAaC,MAGpBE,IAAUR,GAAiBQ,WACpBH,EAAaG,MAGF,iBAAXC,EACPJ,EAAaI,OAASA,EAAS,GACzB,GACCA,EAAS,GAAK,GAAKA,SAEnBJ,EAAaI,QAGD,kBAAZC,GAA0BA,GAAWL,EAAaE,SAAWT,GAAkBA,GAAkBa,qBACjGN,EAAaK,QAGjBL,CACX,CAjPG,CAgQP,OA9PU,YAAAzT,WAAN,SAAiB5qB,EAAgE+2B,EAAsByE,G,kIACpF,OAAf,EAAA18C,KAAe,GAAMA,KAAKo/C,oBAAoB3C,mBAAmBv7B,EAAe+2B,EAAcyE,I,OAI9F,OAJA,EAAK7L,QAAU,SACf7wC,KAAK8/C,WAAa5+B,EAAcvS,QAChC3O,KAAK+/C,gBAAkD,QAAnC,EAAG7+B,EAAc0e,0BAAkB,eAAEqd,eAElD,CAAP,EAAOj9C,KAAK6wC,S,QAGhB,YAAAmP,cAAA,SAAclzB,EAAgB8X,EAAmB/X,EAA6BozB,GAA9E,WACI,QAD6C,IAAApzB,IAAAA,EAAA,SAA6B,IAAAozB,IAAAA,EAAA,KACrEjgD,KAAK6wC,UAAY7wC,KAAK6wC,QAAQqP,QAC/B,MAAM,IAAI,GAGN,IAAAC,EAAkDF,EAAc,kBAA7CG,EAA+BH,EAAc,WAAjCI,EAAmBJ,EAAc,eAElEK,GAAY,gCACXzzB,GAAM,CACT+xB,YAAa,WAAM,SAAK2B,cAAczzB,EAAQqzB,EAA3B,EAEnB1L,QAAS,SAAOxwC,EAAMu8C,GAAO,kD,gDAGzB,OAFAxgD,KAAKygD,eAAiBx8C,EAAKy8C,cAEpB,CAAP,EAAqB,QAArB,EAAO7zB,EAAO4nB,eAAO,oBAAd5nB,EAAiB5oB,EAAMu8C,G,UAuBtC,OAnBI3zB,EAAOkZ,QACPua,EAAava,MAAQ/lC,KAAKs/C,qBAAqBzyB,EAAOkZ,QAGtDqa,IACApgD,KAAKygD,eAAiBzgD,KAAK6wC,QAAQ8P,QAAQP,GAC3CE,EAAaI,cAAgB1gD,KAAKygD,gBAGtCzgD,KAAK4gD,eAAiB5gD,KAAK6wC,QAAQqP,QAAQI,GAEtCtgD,KAAK4gD,eAAeC,cACrB7gD,KAAK8gD,oBAAoBR,EAAcF,GAG3CC,SAAAA,IAEArgD,KAAK4gD,eAAe5b,OAAOJ,GAEpB5kC,KAAK4gD,cAChB,EAEA,YAAAG,aAAA,SAAa,G,IACTC,EAAkB,qBAClBZ,EAAU,aACVa,EAAe,kBACfjmB,EAAQ,WACRnM,EAAK,QAEL,IAAK7uB,KAAK6wC,UAAY7wC,KAAK6wC,QAAQqQ,cAC/B,MAAM,IAAI,GAGd,IAAMC,EAA8B,CAChCT,cAAe1gD,KAAK6wC,QAAQ8P,QAAQP,GACpCra,MAAOkb,EACPG,OAAQ,CACJziD,KAAM,CACFJ,MAAOy8B,GAEXnM,MAAO,CACHtwB,MAAOswB,KAKnB7uB,KAAKqhD,cAAgBrhD,KAAK6wC,QAAQqQ,cAAcC,GAEhD,IAAMG,EAAwB/d,SAASgC,cAAcyb,GAOrD,OANIM,IACAA,EAAsBC,UAAY,IAGtCvhD,KAAKqhD,cAAcrc,OAAOgc,GAEnBhhD,KAAKqhD,aAChB,EAEA,YAAAG,WAAA,WACI,OAAOxhD,KAAKyhD,QAChB,EAEA,YAAAC,eAAA,SAAeC,EAAmB/c,GAC9B,IAAK5kC,KAAK6wC,UAAY7wC,KAAK6wC,QAAQ+Q,SAC/B,MAAM,IAAI,GAWd,OATA5hD,KAAK6hD,gBAAkB7hD,KAAK6wC,QAAQ+Q,SAAS,CACzCjwB,OAAQgwB,EACRjT,UAAW,OACX3I,MAAO,CACH0Z,OAAQ,UAGhBz/C,KAAK6hD,gBAAgB7c,OAAOJ,GAErB5kC,KAAK6hD,eAChB,EAEM,YAAAC,mBAAN,SAAyBh1B,EAAgBD,EAAkCk1B,G,uIACvE,IAAK/hD,KAAK6wC,UAAY7wC,KAAK6wC,QAAQmR,aAC/B,MAAM,IAAI,GAKd,GAFQZ,EAAmBv0B,EAAM,OAAjBo1B,EAAWp1B,EAAM,QAE5B7sB,KAAK6wC,QAAQmR,aAAanB,aAC3B,MAAM,IAAI,GAAoB9c,GAAwBK,uBAGrC,OAArB,EAAApkC,KAAqB,GAAMA,KAAK6wC,QAAQmR,aAAahd,OAAO,CACxDoc,OAAM,EACNa,OAAM,EACNC,aAAa,EACbtD,YAAa,WAAM,SAAK2B,cAAczzB,EAAQ,CAAE2xB,cAAc,GAA3C,K,cAJvB,EAAK0D,cAAgB,SAOjBJ,GACCnkD,OAAOyF,KAAK0+C,GAA4CjvC,SAAQ,SAAApV,GAC5D,EAAKykD,cAA6C1xB,GAAG/yB,EAAKqkD,EAAOrkD,GACtE,I,YAIF,YAAA0kD,mBAAN,SAAyB3/C,G,+FACrB,IAAKzC,KAAKmiD,cACN,MAAM,IAAI,GAAoBpe,GAAwBK,uBAG1D,MAAO,CAAP,EAAOpkC,KAAKmiD,cAAcE,QAAO,IAAAtgD,QAAOU,EAAS,EAAAoxB,Q,QAGrD,YAAAyuB,+BAAA,WACI,IAAKtiD,KAAKmiD,cACN,MAAM,IAAI,GAAoBpe,GAAwBK,uBAGlD,IAAAgd,EAAWphD,KAAKmiD,cAAcjnC,WAAU,OAKhD,MAAO,CAAEqnC,QAHQ3kD,OAAOyF,KAAK+9C,GACxBz2B,OAAM,SAAAjtB,GAAG,aAAe,QAAf,EAAI0jD,EAAO1jD,UAAI,eAAE6kD,OAAO,IAEpBnB,OAAM,EAC5B,EAEA,YAAAnV,aAAA,W,QAC8B,QAA1B,EAAmB,QAAnB,EAAAjsC,KAAK4gD,sBAAc,eAAE4B,aAAK,iBAC1BxiD,KAAK6wC,aAAUltC,EACf3D,KAAK4gD,oBAAiBj9C,EACtB3D,KAAKygD,oBAAiB98C,EACtB3D,KAAKmiD,mBAAgBx+C,CACzB,EAEc,YAAA48C,cAAd,SAA4BzzB,EAAgBD,G,YAAA,IAAAA,IAAAA,EAAA,K,6HAKpB,OAJdszB,GAAoB,gCAAKtzB,GAAM,CAAE0xB,SAAkC,WAAxBv+C,KAAKygD,gBAAuD,aAAxBzgD,KAAKygD,iBACpF/B,EAAQ1+C,KAAK8/C,aAAe,uCAC5BnB,EAAkC,UAAxB3+C,KAAKygD,gBAA8BzgD,KAAK+/C,gBAEpC,GAAM//C,KAAKq/C,6BAA6Bf,aAAaxxB,GAAQ,gCAAIqzB,GAAiB,CAAEzB,MAAK,EAAEC,QAAO,M,cAA9G1oC,EAAY,SAAoG,QACxHjW,KAAKyhD,SAAWxrC,GACVvO,EAAW1H,KAAKygD,iBAENtB,GAA4Bv4B,QAAQlf,IAAa,EAC7D,GAAM1H,KAAKyiD,+BAA+B/6C,IAD1C,M,OACA,S,iBAGJ,MAAO,CAAP,EAAOuO,G,QAGG,YAAAwsC,+BAAd,SAA6C/6C,G,kIAoBzC,OAnBMqc,EAAY/jB,KAAK8/C,WACjBlsB,EAAe,CACjBU,iBAAkB,CACdE,yBAA0B,KAC1BC,iCAAkC,KAClCiuB,YAAa,KACbC,UAAWj7C,EACXk7C,eAAgB,CACZC,SAAU7iD,KAAKyhD,YAKrBp0C,EAAQ,CAAEga,gBAAgB,GAC1By7B,EAAwB,CAC1B/+B,UAAS,EACTrc,SAAQ,GAGZ,GAAM1H,KAAKmnC,OAAOU,SAAS7nC,KAAK+zB,oBAAoBd,YAChD5lB,EACA,CAAEwf,OAAQi2B,M,OAGd,OALA,SAKO,CAAP,EAAO9iD,KAAKmnC,OAAOU,SAAS7nC,KAAKynC,sBAAsB1S,cAAc,CACjEhR,UAAS,EACTrc,SAAQ,EACRksB,YAAW,M,QAuCX,YAAAktB,oBAAR,SAA4BR,EAA8BF,G,YACtD,IAAIA,aAAU,EAAVA,EAAY2C,kBAA8B,QAAnB,EAAO/iD,KAAK6wC,eAAO,eAAE8P,QAAQqC,SAASD,iBAC7DzC,EAAaI,cAA4B,QAAf,EAAG1gD,KAAK6wC,eAAO,eAAE8P,QAAQsC,OAEnDjjD,KAAK4gD,eAA6B,QAAf,EAAG5gD,KAAK6wC,eAAO,eAAEqP,QAAQI,KAErB,QAAvB,EAAItgD,KAAK4gD,sBAAc,eAAEC,eAK7B,MAAM,IAAI,GAAoB,WAAU7gD,KAAKygD,gBAAkB,IAAE,yEACrE,EACJ,EAjRA,G,GChCA,WACI,WACYj0B,GAAA,KAAAA,eAAAA,CACT,CAiDP,OA/CI,YAAA02B,kBAAA,SAAkBC,EAAoBt2B,EAAkC,G,IAAEe,QAAF,MAA8B,CAAC,EAAC,GAAvB,QACvEE,EAAM,oBAAoBq1B,EAAU,WAE1C,OAAOnjD,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAAEjB,OAAM,EAAEe,QAAO,EAAExuB,QAASuuB,IACpE,EAEA,YAAAy1B,mBAAA,SAAmBD,EAAoBt2B,EAAkC,G,IAAEe,QAAF,MAA8B,CAAC,EAAC,GAAvB,QACxEE,EAAM,oBAAoBq1B,EAAU,YAE1C,OAAOnjD,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAAEjB,OAAM,EAAEe,QAAO,EAAExuB,QAASuuB,IACpE,EAEA,YAAA01B,kBAAA,SAAkBF,EAAoBt2B,EAAmC,G,IAAEe,QAAF,MAA8B,CAAC,EAAC,GAAvB,QACxEE,EAAM,oBAAoBq1B,EAAU,WAE1C,OAAOnjD,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAAEjB,OAAM,EAAEe,QAAO,EAAExuB,QAASuuB,IACpE,EAEA,YAAA21B,aAAA,SAAaH,EAAoB,G,IAAEv1B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAChCE,EAAM,oBAAoBq1B,EAAU,YAE1C,OAAOnjD,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAAEF,QAAO,EAAExuB,QAASuuB,IAC5D,EAEA,YAAA41B,QAAA,SAAQJ,EAAoB,G,IAAEv1B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAC3BE,EAAM,oBAAoBq1B,EAAU,WAE1C,OAAOnjD,KAAKwsB,eAAezuB,IAAI+vB,EAAK,CAAEF,QAAO,EAAExuB,QAASuuB,IAC5D,EAEA,YAAA61B,cAAA,SAAc,G,IAAE51B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGnB,OAAO5tB,KAAKwsB,eAAezuB,IAFf,yBAEwB,CAAE6vB,QAAO,EAAExuB,QAASuuB,IAC5D,EAEA,YAAA81B,wBAAA,SAAwB,G,IAAE71B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAG7B,OAAO5tB,KAAKwsB,eAAe8C,KAFf,oFAEyB,CAAE1B,QAAO,EAAExuB,QAASuuB,IAC7D,EAEA,YAAA+1B,eAAA,SAAe,G,IAAE91B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGpB,OAAO5tB,KAAKwsB,eAAe8C,KAFf,mCAEyB,CAAE1B,QAAO,EAAExuB,QAASuuB,IAC7D,EACJ,EApDA,G,GCSA,WACI,WACYg2B,EACAtc,GADA,KAAAsc,6BAAAA,EACA,KAAAtc,uBAAAA,CACT,CA8FP,OA5FI,YAAA6b,kBAAA,SAAkBx7C,EAAkBmlB,EAAkCpqB,GAAtE,WACI,OAAO,EAAA+oB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAaxc,GAAyBwzC,sCAAkCjgD,EAAW,CAAE+D,SAAQ,KAE3G,EAAKi8C,6BAA6BT,kBAAkBx7C,EAAUmlB,EAAQpqB,GACjEsqB,MAAK,SAAC,G,IAAE,IAAA5tB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdutB,EAASC,MAAK,IAAAC,cAAaxc,GAAyBe,iCAAkChS,EAAM,CAAEuI,SAAQ,KACtGglB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBnd,GAAyByzC,8BAA+BvkD,EAAU,CAAEoI,SAAQ,IACjH,GACR,GACJ,EAEA,YAAA07C,mBAAA,SAAmB17C,EAAkBmlB,EAAkCpqB,GAAvE,WACI,OAAO,EAAA+oB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAaxc,GAAyB0zC,uCAAmCngD,EAAW,CAAE+D,SAAQ,KAE5G,EAAKi8C,6BAA6BP,mBAAmB17C,EAAUmlB,EAAQpqB,GAClEsqB,MAAK,SAAC,G,IAAE,IAAA5tB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdutB,EAASC,MAAK,IAAAC,cAAaxc,GAAyBiB,kCAAmClS,EAAM,CAAEuI,SAAQ,KACvGglB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBnd,GAAyB2zC,+BAAgCzkD,EAAU,CAAEoI,SAAQ,IAClH,GACR,GACJ,EAEA,YAAA27C,kBAAA,SAAkB37C,EAAkBmlB,EAAmCpqB,GAAvE,WACI,OAAO,EAAA+oB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAaxc,GAAyB4zC,sCAAkCrgD,EAAW,CAAE+D,SAAQ,KAE3G,EAAKi8C,6BAA6BN,kBAAkB37C,EAAUmlB,EAAQpqB,GACjEsqB,MAAK,SAAC,G,IAAE,IAAA5tB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdutB,EAASC,MAAK,IAAAC,cAAaxc,GAAyB6zC,iCAAkC9kD,EAAM,CAAEuI,SAAQ,KACtGglB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBnd,GAAyB8zC,8BAA+B5kD,EAAU,CAAEoI,SAAQ,IACjH,GACR,GACJ,EAEA,YAAA47C,aAAA,SAAa57C,EAAkBjF,GAA/B,WACI,OAAO,EAAA+oB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAaxc,GAAyB+zC,iCAA6BxgD,EAAW,CAAE+D,SAAQ,KAEtG,EAAKi8C,6BAA6BL,aAAa57C,EAAUjF,GACpDsqB,MAAK,SAAC,G,IAAE5tB,EAAI,OACTutB,EAASC,MAAK,IAAAC,cAAaxc,GAAyBmB,4BAA6BpS,EAAM,CAAEuI,SAAQ,KACjGglB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBnd,GAAyBg0C,yBAA0B9kD,EAAU,CAAEoI,SAAQ,IAC5G,GACR,GACJ,EAEA,YAAA67C,QAAA,SAAQ77C,EAAkBjF,GAA1B,WACI,OAAO,EAAA+oB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAaxc,GAAyBi0C,oCAAgC1gD,EAAW,CAAE+D,SAAQ,KAEzG,EAAKi8C,6BAA6BJ,QAAQ77C,EAAUjF,GAC/CsqB,MAAK,WACFL,EAASC,MAAK,IAAAC,cAAaxc,GAAyBk0C,oCAAgC3gD,EAAW,CAAE+D,SAAQ,KACzGglB,EAASW,UACb,IACCC,OAAM,SAAAhuB,GACHotB,EAAS/sB,OAAM,IAAA4tB,mBAAkBnd,GAAyBm0C,4BAA6BjlD,EAAU,CAAEoI,SAAQ,IAC/G,GACR,GACJ,EAEA,YAAAg8C,eAAA,SAAeh8C,EAAkBjF,GAAjC,WACI,OAAO,IAAA+jB,SACH,IAAAwH,KAAG,IAAApB,cAAaxc,GAAyBo0C,2CAAuC7gD,EAAW,CAAC+D,SAAQ,MACpG,IAAA+mB,QAAM,6D,iEACF,SAAMzuB,KAAK2jD,6BAA6BD,eAAejhD,I,OACvD,OADA,SACA,GAAMzC,KAAKqnC,uBAAuBrX,uB,OAElC,OAFA,SAEO,CAAP,GAAO,IAAApD,cAAaxc,GAAyBq0C,2CAAuC9gD,EAAW,CAAC+D,SAAQ,K,WAE9G+iB,MACE,IAAAC,aAAW,SAAA/qB,GAAS,OAAAouB,GAAiB3d,GAAyBs0C,mCAAoC/kD,EAAO,CAAE+H,SAAQ,GAA/F,IAE5B,EAEA,YAAAqoB,eAAA,SAAwDroB,EAAazD,GACjE,OAAO,IAAA2oB,cAAaxc,GAAyBoB,qBAAsBvN,EAAM,CAAEyD,SAAQ,GACvF,EACJ,EAlGA,G,GCVA,WAGI,WACYy/B,EACAE,EACAsd,GAFA,KAAAxd,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAAsd,6BAAAA,CACR,CAkCR,OAhCU,YAAA7Y,WAAN,SAAiBrpC,G,kIAGb,GAFQiF,EAAqCjF,EAAO,SAAlCmF,EAA2BnF,EAAO,YAArBmiD,EAAcniD,EAAO,WAE/CiF,IAAaE,EACd,MAAM,IAAI,GAAqB,mFAKnC,OAF0Boc,EAA8BhkB,KAAKmnC,OAAOjsB,WAAU,uCAE9E,GAAMlb,KAAK2kD,6BAA6B7Y,WAAW9nB,EAAwBtc,K,cAA3E,SAEKk9C,EAAD,MACA,GAAM5kD,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAAvD,S,wBAGJ9vB,KAAK6kD,cAAgB7kD,KAAK2kD,6BAA6BlW,sBACnD7mC,EACA5H,KAAKmnC,OAAOjsB,WACZxT,EACA8lC,GAAqBsX,KACrBF,G,YAIR,YAAA3Y,aAAA,WAMI,OALIjsC,KAAK6kD,eAAiB7kD,KAAK6kD,cAAcphB,aACzCzjC,KAAK6kD,cAAcphB,WAAWC,YAAY1jC,KAAK6kD,eAC/C7kD,KAAK6kD,mBAAgBlhD,GAGlBgxB,QAAQU,SACnB,EACJ,EAzCA,G,GCCA,YACI,WAAY52B,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKE,KAAO,8BACZ,EAAKC,KAAO,oB,CAChB,CACJ,OAPyD,oBAOzD,EAPA,CAAyD,GCYzD,IAEKmmD,IAAL,SAAKA,GACD,sBACA,qBACH,CAHD,CAAKA,KAAAA,GAAa,K,SASlB,WAOI,WACY5d,EACAE,EACA7a,EACAgb,EACAD,EACAD,EACAG,EACAud,EACAjxB,EACAkxB,GATA,KAAA9d,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAA7a,eAAAA,EACA,KAAAgb,4BAAAA,EACA,KAAAD,0BAAAA,EACA,KAAAD,6BAAAA,EACA,KAAAG,sBAAAA,EACA,KAAAud,6BAAAA,EACA,KAAAjxB,oBAAAA,EACA,KAAAkxB,gBAAAA,EAdJ,KAAAC,qBAAuB,EAAA9b,KACvB,KAAA+b,eAAyBJ,GAAcK,SACvC,KAAAC,eAAyBN,GAAcO,QAa5C,CAwXP,OAtXU,YAAAxZ,WAAN,SAAiBrpC,G,sIAMb,GAJQiF,EAAqCjF,EAAO,SAAlCmF,EAA2BnF,EAAO,YAApB8iD,EAAa9iD,EAAO,SAEpD8pB,GAAqBD,SAEhB5kB,IAAa69C,EACd,MAAM,IAAI,GAAiBnvC,GAAqBa,sBAUpD,OANIuuC,EAEAD,EAAQ,gBADRE,EACAF,EAAQ,mBAEZvlD,KAAKklD,qBAAuBO,EAE5B,GAAMzlD,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAEzC,OAFd,SAEc,GAAM9vB,KAAKmnC,OAAOU,SAAS7nC,KAAKwnC,4BAA4Bha,kBAAkB9lB,K,OAM5F,OANMzF,EAAQ,SACdjC,KAAK0lD,eAAiBzjD,EAAM2hB,eAAeI,wBAAwBtc,GAEnE1H,KAAK2lD,gBAAkB3lD,KAAK4lD,cAAch+C,EAAa49C,GACvDxlD,KAAK2lD,gBAAgBE,iBAAiB,QAAS7lD,KAAK8lD,0BAE7C,CAAP,EAAOnxB,QAAQU,W,QAGnB,YAAA4W,aAAA,WACI,OAAOtX,QAAQU,SACnB,EAEQ,YAAAuwB,cAAR,SAAsBh+C,EAAqB49C,QAAA,IAAAA,IAAAA,EAAA,6BACvC,IAAM5gB,EAAYrB,SAASC,eAAe57B,GAC1C,IAAKg9B,EACD,MAAM,IAAI,GAAqB,8DAGnCrB,SAASpkC,KAAK4mD,UAAUC,IAAI,uBAC5B,IAAMC,EAAS1iB,SAASI,cAAc,OAMtC,OALAsiB,EAAOF,UAAUC,IAAIR,GACrBS,EAAOriB,aAAa,OAAQ,UAC5BqiB,EAAOriB,aAAa,aAAc,oBAClCgB,EAAUf,YAAYoiB,GAEfA,CACX,EAGQ,YAAAH,yBAAR,SAAiClgB,GAC7BA,EAAMsgB,iBACN,IAAMjkD,EAAQjC,KAAKmnC,OAAOjsB,WACpBhU,EAAOjF,EAAMiF,KAAKuW,iBAClBuM,EAAS/nB,EAAM+nB,OAAOtL,wBACtB4I,EAAWrlB,EAAMqlB,SAASH,qBAEhC,IAAKnnB,KAAK0lD,iBAAmB1lD,KAAK0lD,eAAe9lB,mBAC7C,MAAM,IAAI,GAAiBxpB,GAAqBa,sBAEpD,IAAMooB,EAAUr/B,KAAKmmD,gBAAgBj/C,EAAMogB,EAAU0C,EAAQhqB,KAAK0lD,gBAC5DU,EAAkBpmD,KAAKilD,gBAAgBjtC,OAAOqnB,GACpDr/B,KAAKqmD,sBAAsBD,EAAiBpmD,KAAK0lD,eAAgB17B,GAEjEo8B,EAAgBE,OACpB,EAEQ,YAAAH,gBAAR,SACIj/C,EACAogB,EACA0C,EACA9I,G,MAEQ,EAAkD8I,EAAM,aAAxCu8B,EAAgB,mBAAEC,EAAS,YAC3C,EAAqCt/C,EAAI,SAA7B5G,EAAI,OAAEk3B,EAAa,gBAE/B,EAAqEtW,EAAa,mBAA3DulC,EAAoB,uBAAEC,EAAiB,oBAEhEC,EAAmBz/C,EAAKwf,UAAUC,cAAcvmB,OAAS,EAWzDi/B,EAA6C,CAC/CunB,6BAA8B,CAAC,iBAC/BC,8BAA+B,CAAC,QAAS,SACzCxsC,YAAaksC,EACbtO,aAAc33C,EACdmmD,qBAAoB,EACpBC,kBAAiB,EACjBhgC,UAAW,GACX2mB,MAlBuCsZ,EAAmB,CAC1D7jC,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,GACvC54B,KAAM,WACN,CACAkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,GACvC54B,KAAM,UAcV,GAAI+nD,EACqC,QAArC,EAAAtnB,EAAQwnB,qCAA6B,SAAEr4C,KAAK,qBACzC,CACH,IAAM,EAA2C,CAC7C,CAAEsU,MAAO9iB,KAAKmlD,eAAgBxzB,OAAQ,GAAGrK,EAASiT,SAASue,QAAQthB,KAGvElQ,EAASoT,MAAM5nB,SAAQ,SAAAg0C,GACnB,SAAUt4C,KAAK,CAAEsU,MAAOgkC,EAAInoD,KAAMgzB,OAAQ,GAAGm1B,EAAIn1B,OAAOmnB,QAAQthB,IAAhE,IAEJ6H,EAAQ3Y,UAAY,C,CAGxB,OAAO2Y,CACX,EAEQ,YAAAgnB,sBAAR,SACID,EACAllC,EACA8I,GAHJ,WAKIo8B,EAAgBW,mBAAqB,SAAMnhB,GAAK,kD,uEAEN,O,sBAAA,GAAM5lC,KAAKgnD,oBAAoB9lC,EAAe0kB,I,cAAlEqhB,EAAoB,SAAoD,KACtFb,EAAgBc,2BAA2BD,G,aAE3C,M,SAAM,IAAIloD,MAAM,8B,yBAIxBqnD,EAAgBe,0BAA4B,SAAMvhB,GAAK,4FACnD,SAAA5lC,KAAKonD,+BAA+BhB,EAAiBp8B,EAAQ4b,G,QAEjEwgB,EAAgBiB,yBAA2B,SAAMzhB,GAAK,4FAClD,SAAA5lC,KAAKsnD,8BAA8BlB,EAAiBp8B,EAAQ4b,G,QAEhEwgB,EAAgBmB,SAAW,6D,iEAEnB,O,sBAAA,GAAMvnD,KAAKmnC,OAAOU,SAAS7nC,KAAKglD,6BAA6BzB,QAAQriC,EAAcxb,M,OAEnF,OAFA,SAEO,CAAP,EAAO1F,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBrX,wB,OAExD,M,SAAM,IAAI,G,yBAIlBo2B,EAAgBoB,oBAAsB,SAAM5hB,GAAK,4FAC7C,SAAA5lC,KAAKynD,qBAAqB7hB,EAAOwgB,EAAiBllC,G,OAC1D,EAEc,YAAAkmC,+BAAd,SACIhB,EACAp8B,EACA4b,G,0JAEMtjB,EAAkBtiB,KAAK0nD,2BAA2B9hB,EAAM+hB,iB,iBAG1D,O,sBAAA,GAAM3nD,KAAKmnC,OAAOU,SACd7nC,KAAKunC,0BAA0B3Y,cAActM,K,cADjD,S,aAMA,M,SAFA8jC,EAAgBwB,QAEV,IAAI7oD,MAAM,kC,OA0BpB,GAvBwBynD,EAAgBx8B,EAAM,uBAC1C/nB,EAAQjC,KAAKmnC,OAAOjsB,WACJsc,EAAoBv1B,EAAMiF,KAAKuW,iBAAgB,uBAC/D6J,EAAWrlB,EAAMqlB,SAASH,qBACxB0gC,EAA2E,QAAlD,EAAGvgC,EAASvV,aAAa,GAAGkU,8BAAsB,eAAEvgB,GAC7EoiD,EAAmBxgC,EAASvV,aAAa,GAAGg2C,yBAC5CC,EAAiBF,aAAgB,EAAhBA,EAAkBjqC,MAAK,SAAC,GAAS,OAAN,OAAagqC,CAAP,IAClDI,EAAoBH,aAAgB,EAAhBA,EAAkB5kD,QAAO,SAAA41B,GAAU,OAAAA,EAAOpzB,KAAOmiD,CAAd,IACvDK,EAAuDF,EAAiB,CAAC,CAC3EllC,MAAOklC,EAAezqB,YACtB5L,OAAQ,GAAGq2B,EAAe9pB,KAAK4a,QAAQthB,GACvCt3B,OAAQ8nD,EAAeG,sBACvBC,WAAYJ,EAAetiD,KAC1B,GACLuiD,SAAAA,EAAmBn1C,SAAQ,SAAAgmB,GAAU,OAAAovB,EAAgB15C,KACjD,CACIsU,MAAOgW,EAAOyE,YACd5L,OAAQ,GAAGmH,EAAOoF,KAAK4a,QAAQthB,GAC/Bt3B,OAAQ44B,EAAOqvB,sBACfC,WAAYtvB,EAAOpzB,IALU,MASdoiD,aApNDjoD,OAqNlB,MAAM,IAAId,MAAM,mCAGpB,GAAgC,IAA5B+oD,EAAiB1nD,OAYjB,OAXAgmD,EAAgBiC,iCACZnY,gBAAgBoY,uCAChB,GACA,CACI1pD,KAAM,UACNkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,IAE3C,IAGJ,IAGE+wB,EAAoBT,EAAiBjqC,MACvC,SAAAib,GAAU,OAAAA,EAAOsF,aAAP,IAGRoqB,EAAWD,EAAoBA,EAAkB7iD,GAAKoiD,EAAiB,GAAGpiD,GAC1E+iD,EAAmBT,EAAiBA,EAAetiD,GAAK8iD,E,iBAE1D,O,sBAAA,GAAMxoD,KAAK0oD,sBAAsBD,I,cAAjC,S,aAEA,M,SAAM,IAAI1pD,MAAM,kC,cAGpBkD,EAAQjC,KAAKmnC,OAAOjsB,WACpBoM,EAAWrlB,EAAMqlB,SAASH,qBAE1Bi/B,EAAgBiC,iCAAiC,CAC7CM,mBAAoBT,EACpBU,SAAU,CACNhqD,KAAM,QACNkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,IAE3CqxB,aAAc7oD,KAAK8oD,qBAAqBxhC,EAAUkQ,K,YAI5C,YAAA8vB,8BAAd,SACIlB,EACAp8B,EACA4b,G,oIAEwB4gB,EAAgBx8B,EAAM,uBACRw+B,EAAe5iB,EAAK,0B,iBAEtD,O,sBAAA,GAAM5lC,KAAK0oD,sBAAsBF,I,cAAjC,S,aAIA,M,SAFApC,EAAgBwB,QAEV,IAAI7oD,MAAM,4C,cAGdkD,EAAQjC,KAAKmnC,OAAOjsB,WACNsc,EAAoBv1B,EAAMiF,KAAKuW,iBAAgB,uBAC7D6J,EAAWrlB,EAAMqlB,SAASH,qBAEhCi/B,EAAgB2C,gCAAgC,CAC5CH,SAAU,CACNhqD,KAAM,QACNkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,IAE3CqxB,aAAc7oD,KAAK8oD,qBAAqBxhC,EAAUkQ,K,YAIlD,YAAAsxB,qBAAR,SAA6BxhC,EAAoBkQ,GAC7C,IAAM9Q,EAA2C,CAC7C,CAAE5D,MAAO9iB,KAAKmlD,eAAgBxzB,OAAQ,GAAGrK,EAASiT,SAASue,QAAQthB,KAOvE,OAJAlQ,EAASoT,MAAM5nB,SAAQ,SAAAg0C,GACnB,OAAApgC,EAAUlY,KAAK,CAAEsU,MAAOgkC,EAAInoD,KAAMgzB,OAAQ,GAAGm1B,EAAIn1B,OAAOmnB,QAAQthB,IAAhE,IACJ9Q,EAAUlY,KAAK,CAAEsU,MAAO9iB,KAAKqlD,eAAgB1zB,OAAQ,GAAGrK,EAAS2S,kBAAkB6e,QAAQthB,KAEpF9Q,CACX,EAEc,YAAAgiC,sBAAd,SAAoCF,G,sHACzB,SAAMxoD,KAAKmnC,OAAOU,SACrB7nC,KAAKunC,0BAA0B/F,qBAAqBgnB,K,OADxD,MAAO,CAAP,EAAO,U,QAKG,YAAAxB,oBAAd,SAAkCpzB,EAA4BgS,G,qGAQ1D,OAPMzmC,EAAO,CACT,iBAAiBymC,EAAMojB,cACvB,sBAAsBp1B,EAAYgM,mBAAmBiP,WACrD,eAAejb,EAAYgM,mBAAmB4mB,UAC9C,cAAcl6B,OAAO28B,SAASC,UAChCtpD,KAAK,KAEA,CAAP,EAAOI,KAAKwsB,eAAe8C,MAhUP65B,EAgU+Bv1B,EAAYgM,mBAAmBwpB,YAhUhCD,EAAc,sDAgUgC,CAC5F/6B,aAAa,EACbhvB,QAAS,CACLyuB,OAAQ,mBACR,eAAgB,oCAChB,eAAgB,MAEpB1uB,KAAI,KAvUW,IAACgqD,C,QA2UV,YAAA1B,qBAAd,SACI7hB,EACAwgB,EACAllC,G,kJAEM,EAA6C0kB,EAAMp4B,QAAjDD,EAAK,QAAE87C,EAAc,iBAAE1B,EAAe,kBACxC1lD,EAAQjC,KAAKmnC,OAAOjsB,WACpBhU,EAAOjF,EAAMiF,KAAKuW,iBAClBkpC,EAAmBz/C,EAAKwf,UAAUC,cAAcvmB,OAAS,EACzDoN,EAAmB,CACrB9F,SAAUwZ,EAAcxb,GACxBkuB,YAAa,CACTU,iBAAkB,CACdg1B,gBAAiB,CACbC,aAAch8C,EAAMqmB,YACpB41B,eAAgBj8C,EAAM2T,cACtBuoC,eAAgBl8C,EAAMm8C,0BAMhCC,EAA4B3pD,KAAK0nD,2BAA2B2B,GAC5DO,EAA6B5pD,KAAK0nD,2BAA2BC,GAC7DkC,EAAelC,aAAe,EAAfA,EAAiBkC,aAChCtvC,EAAQotC,aAAe,EAAfA,EAAiBxQ,Y,iBAG3B,O,sBAAA,GAAMn3C,KAAKmnC,OAAOU,SACd7nC,KAAKsnC,6BAA6B1Y,eAAc,gCACzC+6B,GAAyB,CAC5B96B,MAAOg7B,EACPtvC,MAAK,O,cAJb,SAQIosC,EACA,GAAM3mD,KAAKmnC,OAAOU,SACd7nC,KAAKunC,0BAA0B3Y,cAAcg7B,KAFjD,M,OACA,S,iBAKJ,SAAM5pD,KAAKmnC,OAAOU,SAAS7nC,KAAK+zB,oBAAoBd,YAChD,CACI5L,gBAAgB,M,OAGxB,OALA,SAKA,GAAMrnB,KAAKmnC,OAAOU,SAAS7nC,KAAKynC,sBAAsB1S,cAAcvnB,K,OAGpE,OAHA,SACA44C,EAAgB0D,gBAAgB5Z,gBAAgB6Z,gBAEzC,CAAP,EAAO/pD,KAAKklD,wB,OAIZ,M,SAFAkB,EAAgB0D,gBAAgB5Z,gBAAgB8Z,gBAE1C,IAAIjrD,MAAM,2B,yBAIhB,YAAA2oD,2BAAR,SAAmCuC,GAC/B,MAAO,CACHnwC,WAAWmwC,aAAO,EAAPA,EAASC,YAAa,GACjCnwC,UAAUkwC,aAAO,EAAPA,EAASE,aAAc,GACjChwC,MAAM8vC,aAAO,EAAPA,EAASlT,WAAY,GAC3B/8B,QAAS,GACTC,UAAUgwC,aAAO,EAAPA,EAASG,gBAAgBH,aAAO,EAAPA,EAASG,aAAa,KAAM,GAC/DlwC,UAAU+vC,aAAO,EAAPA,EAASG,gBAAgBH,aAAO,EAAPA,EAASG,aAAa,KAAM,GAC/D9vC,YAAY2vC,aAAO,EAAPA,EAAS3vC,aAAc,GACnCD,aAAa4vC,aAAO,EAAPA,EAAS5vC,cAAe,GACrCE,OAAO0vC,aAAO,EAAPA,EAAS9S,cAAe,GAC/B/8B,iBAAiB6vC,aAAO,EAAPA,EAAS/S,qBAAsB,GAChDlhB,qBAAqBi0B,aAAO,EAAPA,EAAS/S,qBAAsB,GACpD18B,aAAc,GAEtB,GApUA,iBADC,I,6CAsUL,C,CA1YA,GC1Be,SAAS6vC,GAAsCxwC,GAC1D,MAAO,CACHywC,cAAkBzwC,EAAQC,UAAS,IAAID,EAAQE,SAC/CwwC,MAAO1wC,EAAQI,SACfuwC,MAAO3wC,EAAQK,SACfC,KAAMN,EAAQM,KACdlY,MAAO4X,EAAQmc,oBACf1b,WAAYT,EAAQS,WACpBD,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQU,MAEvB,CCXe,SAASkwC,GAAoB1kB,GAChC,IAAAyZ,EAA8DzZ,EAAK,MAA5D2kB,EAAuD3kB,EAAK,aAA9C4Z,EAAyC5Z,EAAK,OAAtC0Z,EAAiC1Z,EAAK,OAA9B2Z,EAAyB3Z,EAAK,MAAvBd,EAAkBc,EAAK,KAAjB6Z,EAAY7Z,EAAK,QAErE4kB,EAAc,CAChBnL,MAAK,EACLkL,aAAY,EACZ/K,OAAQiL,GAAejL,GACvBF,OAAM,EACNC,MAAOA,GAAS,OAChBza,KAAI,EACJ2a,QAAO,GAGX,OAAO,IAAA79C,QAAO4oD,EAAa,EAAA92B,MAC/B,CAEA,SAAS+2B,GAAejL,GAIpB,MAAsB,iBAAXA,GAAuBA,EAFhB,MAMdA,EAPc,MAWXA,CACX,CC9Be,SAASkL,GAA0BxT,GAE1C,IAAA1yC,EAMA0yC,EAAO,eALPxoB,EAKAwoB,EAAO,MAJPv9B,EAIAu9B,EAAO,UAHPt9B,EAGAs9B,EAAO,SAFP98B,EAEA88B,EAAO,MADP/0B,EACA+0B,EAAO,gBAELx9B,EAAUlV,GAAkB2d,EAElC,MAAO,CACHuM,MAAK,EACLi8B,WAAYhxC,EACZixC,UAAWhxC,EACXixC,aAAczwC,EACd0wC,eAAgBpxC,aAAO,EAAPA,EAAS0wC,MACzBW,eAAgBrxC,aAAO,EAAPA,EAAS2wC,MACzBrwC,KAAMN,aAAO,EAAPA,EAASM,KACflY,MAAO4X,aAAO,EAAPA,EAAS5X,MAChBkpD,aAActxC,aAAO,EAAPA,EAASQ,YACvB+wC,YAAavxC,aAAO,EAAPA,EAASS,WAE9B,CCxBe,SAAS+wC,GAA2BhU,GACvC,IAAAxoB,EAAkCwoB,EAAO,MAAlC98B,EAA2B88B,EAAO,MAA3B/0B,EAAoB+0B,EAAO,gBAG3C,IADgB/0B,aAAe,EAAfA,EAAiBgoC,gBAAiB,IACZppD,MAAM,KAElD,MAAO,CACH2tB,MAAK,EACLi8B,WAJY,MAIa,GACzBC,UALsB,MAKC,GACvBC,aAAczwC,EACd0wC,eAAgB3oC,aAAe,EAAfA,EAAiBioC,MACjCW,eAAgB5oC,aAAe,EAAfA,EAAiBkoC,MACjCrwC,KAAMmI,aAAe,EAAfA,EAAiBnI,KACvBlY,MAAOqgB,aAAe,EAAfA,EAAiBrgB,MACxBkpD,aAAc7oC,aAAe,EAAfA,EAAiBjI,YAC/B+wC,YAAa9oC,aAAe,EAAfA,EAAiBhI,WAEtC,C,SCNA,WACI,WACY6sB,EACAE,EACAoS,EACA6R,EACAtnB,GAJA,KAAAmD,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAAoS,qBAAAA,EACA,KAAA6R,YAAAA,EACA,KAAAtnB,QAAAA,CACT,CA2MP,OAzMU,YAAA8H,WAAN,SAAiBrpC,G,+JAIb,GAHQmW,EAA2CnW,EAAO,gBAAjCmF,EAA0BnF,EAAO,YAApBiF,EAAajF,EAAO,SAClD8oD,GAAF,EAAoC3yC,GAAmB,CAAC,GAAlC,qBAAEq4B,EAAO,WAEhCvpC,EACD,MAAM,IAAI,GAAqB,qFAGnC,IAAKE,EACD,MAAM,IAAI,GAAqB,wFAGnC,IAAKgR,EACD,MAAM,IAAI,GAAqB,4FAGrB,SAAM5Y,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAIrE,GAJM7tB,EAAQ,SACRif,EAAgBjf,EAAM2hB,eAAeI,wBAAwBtc,GAC7DupB,EAAsC,QAA9B,EAAGhvB,EAAMiF,KAAKuW,wBAAgB,eAAEwT,SAAS3wB,MAElD4gB,EAAcovB,YACf,MAAM,IAAI,GAAiBl6B,GAAqBa,sBAiBpD,OAdMu0C,EAAwB,CAAEv6B,SAAQ,GAClCw6B,EAAgC,SAACna,GACnC,EAAKoa,wBACDpa,EACA14B,EACAhR,EACAF,EACA6b,QAAQrC,EAAc8I,OAAO8kB,UAErC,EACM6c,EAA8B,SAAChsD,GACjC,SAAKisD,aAAajsD,EAAOiI,EAAa2jD,EAAsBta,EAA5D,EAEJjxC,KAAKy5C,qBAAqB3N,WAAW5qB,EAAcovB,aACnD,GAAMtwC,KAAKy5C,qBAAqB1I,kBAC5Bya,EACAC,EACAE,I,cAHJ,S,YAOJ,YAAA1f,aAAA,WAGI,OAFAjsC,KAAKy5C,qBAAqB1G,WAEnBpe,QAAQU,SACnB,EAEQ,YAAAq2B,wBAAR,SACIpa,EACA14B,EACAhR,EACAF,EACAonC,GAEQ,IAAAyc,EAAyB3yC,EAAe,qBAEhD5Y,KAAK6rD,sBAAsBN,GAC3BvrD,KAAK8rD,oBAAoBxa,EAAyB14B,EAAiBhR,EAAaF,EAAUonC,EAC9F,EAEQ,YAAAgd,oBAAR,SACIxa,EACA14B,EACAhR,EACAF,EACAonC,GALJ,WAOY/I,EAAmFntB,EAAe,MAA3F0J,EAA4E1J,EAAe,gBAA1EmzC,EAA2DnzC,EAAe,qBAApDozC,EAAqCpzC,EAAe,iBAAlCqzC,EAAmBrzC,EAAe,eAElG64B,EAAWzxC,KAAKgkC,QAAO,OACzB0c,EAAgBjP,aAAM,EAANA,EAAQkP,QAAQuL,OAEtC,GAAIza,GAAUiP,EAAe,CACzB,IAAMyL,EAAmBpmB,EAAQ0kB,GAAoB1kB,GAAS,CAAC,EAEzDqmB,EAAqB3a,EAAOyO,QAAQ,CACtCmM,IAAKvd,EAAW,UAAY,aAC5B0O,QAAQ,EACRkD,cAAa,EACb3a,MAAOomB,EACPvN,YAAa,WAAM,SAAK2B,cAAcjP,EAAyBhvB,EAAiB2pC,EAA7D,EACnBK,UAAW,SAACC,GACR,SAAKC,iBAAiBD,EAAejb,EAAyB5pC,EAAUqkD,EAAsBC,EAA9F,IAGJI,EAAmBvL,cACnBuL,EAAmBpnB,OAAO,IAAIp9B,E,MAGlC5H,KAAKysD,eAAe7kD,EAE5B,EAEQ,YAAAikD,sBAAR,SAA8BN,GAC1B,IAAMtpD,EAAQjC,KAAKmnC,OAAOjsB,WACpBhU,EAAOjF,EAAMiF,KAAKuW,iBAClBgB,EAAcxc,EAAM+nB,OAAOtL,wBAE3BguC,EAA8BnB,KAA0BhoB,SAASC,eAAe+nB,GAChFoB,EAA+BluC,EAAYmuC,iBAAiBvd,SAAS,gEAEnEoC,EAAWzxC,KAAKgkC,QAAO,OAE3ByN,GAAUkb,GAAgCpB,GAAwBmB,EACrCjb,EAAOmQ,SAAS,CAAEjwB,OAAQzqB,EAAK8pB,WAAY0d,UAAW,SAC9D1J,OAAO,IAAIumB,GAEhCvrD,KAAKysD,eAAelB,EAE5B,EAEc,YAAAhL,cAAd,SACIjP,EACAhvB,EACA2uB,G,8IAEc,SAAMjxC,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAA/D7tB,EAAQ,S,iBAUH,O,sBAPDqlB,EAAWrlB,EAAMqlB,SAASH,qBAC1B6C,EAAS/nB,EAAM+nB,OAAOtL,wBACtBrV,EAAWpH,EAAMoH,SAASqS,cAE1B7B,EAAUyI,IAAsC,QAAvB,EAAIjZ,aAAQ,EAARA,EAAUyxB,iBAAS,eAAG,IACnD+xB,EAA0BhzC,EAAUwwC,GAAsCxwC,QAAWlW,EAEpF,GAAM2tC,EAAwBwb,cAAc,CAC/CC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBJ,wBAAuB,EACvBl7B,OAAQrK,EAASK,mBACjBsJ,SAAUjH,EAAOiH,SAAS3wB,KAC1B4sD,aAAa,K,OAPjB,MAAO,CAAP,EAAO,U,OAcP,M,WAJIjc,GACAA,EAAQ,GAGN,E,yBAIA,YAAAub,iBAAd,SACID,EACAjb,EACA5pC,EACAqkD,EACA9a,G,oIAG2B,O,sBAAA,GAAMjxC,KAAKy5C,qBAAqB/G,iBAAiB,CAAEjB,QAAQ,K,OAC1D,OADhBqB,EAAe,SAAkE,WACjE,GAAMxB,EAAwB6b,gBAAgBZ,I,OAatE,OAbMpX,EAAkB,SAChBkC,EAAmBlC,EAAe,QAAzBrsB,EAAUqsB,EAAe,MAE1Cn1C,KAAKsrD,YAAY8B,SAAS,gBAAiB,CACvC9V,aAAc,SACd9+B,SAAU9Q,EACVxF,OAAQ6pD,EAAuB,kBAAoB,wBACnDjjC,MAAK,EACLukC,YAAava,EACbwa,gBAAiB15C,KAAKC,UAAUg3C,GAA0BxT,IAC1DkW,iBAAkB35C,KAAKC,UAAUw3C,GAA2BhU,MAGzD,CAAP,EAAOlC,G,OAMP,M,WAJIlE,GACAA,EAAQ,GAGN,E,yBAIN,YAAA2a,aAAR,SACIjsD,EACA6tD,EACAjC,EACAkC,GAEAztD,KAAKysD,eAAee,GACpBxtD,KAAKysD,eAAelB,GAEhBkC,GACAA,EAAgB9tD,EAExB,EAEQ,YAAA8sD,eAAR,SAAuBiB,GACnB,IAAMpoB,EAAUooB,GAAanqB,SAASC,eAAekqB,GAEjDpoB,GACAA,EAAQqoB,QAEhB,EACJ,EAlNA,GC0CA,IAAYC,GAKAC,GAOAC,GAOAC,GAQAC,IA3BZ,SAAYJ,GACR,0BACA,qBACH,CAHD,CAAYA,KAAAA,GAA6B,KAKzC,SAAYC,GACR,gBACA,kBACA,gBACA,yBACH,CALD,CAAYA,KAAAA,GAA2B,KAOvC,SAAYC,GACR,cACA,cACA,kBACA,eACH,CALD,CAAYA,KAAAA,GAA4B,KAOxC,SAAYC,GACR,sBACA,YACA,kBACA,kBACA,iBACH,CAND,CAAYA,KAAAA,GAA4B,KAQxC,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAA4B,K,SCrExC,WACI,WACY7mB,EACAE,EACAoS,EACA6R,EACAtnB,GAJA,KAAAmD,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAAoS,qBAAAA,EACA,KAAA6R,YAAAA,EACA,KAAAtnB,QAAAA,CACT,CAoLP,OAlLU,YAAA8H,WAAN,SAAiBrpC,G,yJAGb,GAFQwrD,EAAiDxrD,EAAO,sBAAjCmF,EAA0BnF,EAAO,cAApBiF,EAAajF,EAAO,UAG5D,MAAM,IAAI,GAAqB,qFAGnC,IAAKmF,EACD,MAAM,IAAI,GAAqB,wFAGnC,IAAKqmD,EACD,MAAM,IAAI,GAAqB,kGAGrB,SAAMjuD,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAIrE,GAJM7tB,EAAQ,SACRif,EAAgBjf,EAAM2hB,eAAeI,wBAAwBtc,GAC7DupB,EAAsC,QAA9B,EAAGhvB,EAAMiF,KAAKuW,wBAAgB,eAAEwT,SAAS3wB,MAElD4gB,EAAcovB,YACf,MAAM,IAAI,GAAiBl6B,GAAqBa,sBAgBpD,OAbMu0C,EAAwB,CAAEv6B,SAAQ,GAClCogB,EAAyB,SAACC,GAC5B,SAAKwa,oBACDxa,EACA2c,EACArmD,EACAF,EACA6b,QAAQrC,EAAc8I,OAAO8kB,UALjC,EAOE6c,EAA8B,SAAChsD,GACjC,SAAKisD,aAAajsD,EAAOiI,EAAaqmD,EAAsBhd,QAA5D,EAEJjxC,KAAKy5C,qBAAqB3N,WAAW5qB,EAAcovB,aACnD,GAAMtwC,KAAKy5C,qBAAqB1I,kBAC5Bya,EACAna,EACAsa,I,cAHJ,S,YAOJ,YAAA1f,aAAA,WAGI,OAFAjsC,KAAKy5C,qBAAqB1G,WAEnBpe,QAAQU,SACnB,EAEQ,YAAAy2B,oBAAR,SACIxa,EACA2c,EACArmD,EACAF,EACAonC,GALJ,WAOY/I,EAAmFkoB,EAAqB,MAAjG3rC,EAA4E2rC,EAAqB,gBAAhFlC,EAA2DkC,EAAqB,qBAA1DjC,EAAqCiC,EAAqB,iBAAxChC,EAAmBgC,EAAqB,eACxGxc,EAAWzxC,KAAKgkC,QAAO,OAE3BkqB,GAAyB,EAE7B,GAAIzc,EAAQ,CACR,IAAM0c,EAAiB,CAAC1c,EAAOkP,QAAQqC,SAAUvR,EAAOkP,QAAQsC,QAC1D,EAAoBld,EAAQ0kB,GAAoB1kB,GAAS,CAAC,EAEhEooB,EAAer7C,SAAQ,SAAA4tC,GACnB,IAAM0N,EAAc1N,IAAkBjP,EAAOkP,QAAQsC,QAC/C,eAAEngC,MAAOirC,GAA6B9K,QAAW,GACjD,EAEN,IAAKiL,EAAwB,CACzB,IAAM9B,EAAqB3a,EAAOyO,QAAQ,CACtCmM,IAAKvd,EAAW,UAAY,aAC5B0O,QAAQ,EACRkD,cAAa,EACb3a,MAAOqoB,EACPxP,YAAa,WAAM,SAAK2B,cAAcjP,EAAyBhvB,EAAiB2pC,EAA7D,EACnBK,UAAW,SAACC,GACR,SAAKC,iBAAiBD,EAAejb,EAAyB5pC,EAAUqkD,EAAsBC,EAA9F,IAGJI,EAAmBvL,eACnBuL,EAAmBpnB,OAAO,IAAIp9B,GAC9BsmD,GAAyB,E,CAGrC,G,CAGCzc,GAAWyc,GACZluD,KAAKysD,eAAe7kD,EAE5B,EAEc,YAAA24C,cAAd,SACIjP,EACAhvB,EACA2uB,G,8IAEc,SAAMjxC,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAA/D7tB,EAAQ,S,iBAUH,O,sBAPDqlB,EAAWrlB,EAAMqlB,SAASH,qBAC1B6C,EAAS/nB,EAAM+nB,OAAOtL,wBACtBrV,EAAWpH,EAAMoH,SAASqS,cAE1B7B,EAAUyI,IAAsC,QAAvB,EAAIjZ,aAAQ,EAARA,EAAUyxB,iBAAS,eAAG,IACnD+xB,EAA0BhzC,EAAUwwC,GAAsCxwC,QAAWlW,EAEpF,GAAM2tC,EAAwBwb,cAAc,CAC/CC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBJ,wBAAuB,EACvBl7B,OAAQrK,EAASK,mBACjBsJ,SAAUjH,EAAOiH,SAAS3wB,KAC1B4sD,aAAa,K,OAPjB,MAAO,CAAP,EAAO,U,OAcP,M,WAJIjc,GACAA,EAAQ,GAGN,E,yBAIA,YAAAub,iBAAd,SACID,EACAjb,EACA5pC,EACAqkD,EACA9a,G,oIAG2B,O,sBAAA,GAAMjxC,KAAKy5C,qBAAqB/G,iBAAiB,CAAEjB,QAAQ,K,OAC1D,OADhBqB,EAAe,SAAkE,WACjE,GAAMxB,EAAwB6b,gBAAgBZ,I,OAatE,OAbMpX,EAAkB,SAChBkC,EAAmBlC,EAAe,QAAzBrsB,EAAUqsB,EAAe,MAE1Cn1C,KAAKsrD,YAAY8B,SAAS,gBAAiB,CACvC9V,aAAc,SACd9+B,SAAU9Q,EACVxF,OAAQ6pD,EAAuB,kBAAoB,wBACnDjjC,MAAK,EACLukC,YAAava,EACbwa,gBAAiB15C,KAAKC,UAAUg3C,GAA0BxT,IAC1DkW,iBAAkB35C,KAAKC,UAAUw3C,GAA2BhU,MAGzD,CAAP,EAAOlC,G,OAMP,M,WAJIlE,GACAA,EAAQ,GAGN,E,yBAIN,YAAA2a,aAAR,SACIjsD,EACAiI,EACA6lD,GAEAztD,KAAKysD,eAAe7kD,GAEhB6lD,GACAA,EAAgB9tD,EAExB,EAEQ,YAAA8sD,eAAR,SAAuBiB,GACnB,IAAMpoB,EAAUooB,GAAanqB,SAASC,eAAekqB,GAEjDpoB,GACAA,EAAQqoB,QAEhB,EACJ,EA3LA,GCDA,IAAMU,GAAmB,CACrBC,gBAAiB,UACjBC,mBAAoB,UACpBC,eAAgB,YAChBC,gBAAiB,gEACjBC,iBAAkB,YAClBC,aAAc,MACdC,OAAQ,UACRC,WAAY,YACZC,UAAW,OACXC,SAAU,QACVpP,OAAQ,OACRqP,MAAO,Q,SAOX,WAGI,WACY7nB,EACAK,EACAiS,EACA6R,GAHA,KAAAnkB,OAAAA,EACA,KAAAK,4BAAAA,EACA,KAAAiS,qBAAAA,EACA,KAAA6R,YAAAA,EANJ,KAAA2D,SAAW,EAAA7lB,IAOhB,CA0GP,OAxGU,YAAA0C,WAAN,SAAiBrpC,G,2IAGb,GAFQysD,EAA0CzsD,EAAO,eAAjCmF,EAA0BnF,EAAO,cAApBiF,EAAajF,EAAO,UAGrD,MAAM,IAAI,GAAqB,qFAGrB,SAAMzC,KAAKmnC,OAAOU,SAAS7nC,KAAKwnC,4BAA4Bha,kBAAkB9lB,K,OAG5F,GAHMzF,EAAQ,WACRif,EAAgBjf,EAAM2hB,eAAeI,wBAAwBtc,IAEhD4oC,YACf,MAAM,IAAI,GAAiBl6B,GAAqBa,sBAGpD,IAAKrP,EACD,MAAM,IAAI,GAAqB,wFAMnC,OAHA5H,KAAKivD,UAAWC,aAAc,EAAdA,EAAgBje,UAAWjxC,KAAK4rD,aAEhD5rD,KAAKy5C,qBAAqB3N,WAAW5qB,EAAcovB,aACnD,GAAMtwC,KAAKy5C,qBAAqB7H,kBAC5B,SAAAQ,GAA0B,SAAK+c,kCAAkC/c,EAAwBxqC,EAA/D,IAC1B,SAAAjI,GAAS,SAAKyvD,gCAAgCzvD,EAAOiI,EAA5C,K,cAFb,S,YAMJ,YAAAqkC,aAAA,WAGI,OAFAjsC,KAAKy5C,qBAAqB1G,WAEnBpe,QAAQU,SACnB,EAEQ,YAAAu2B,aAAR,SAAqBjsD,GACjB,MAAM,IAAIZ,MAAMY,EAAMlB,QAC1B,EAEQ,YAAA0wD,kCAAR,SAA0C/c,EAAgDid,GACtF,OAAOrvD,KAAKsvD,mBAAmBld,EAAwBid,EAC3D,EAEQ,YAAAD,gCAAR,SAAwCzvD,EAAiDiI,GAGrF,OAFA5H,KAAKuvD,sBAAsB3nD,GAEpB5H,KAAKivD,SAAStvD,EACzB,EAEQ,YAAA4vD,sBAAR,SAA8B3nD,GAC1B,IAAM4nD,EAAkBjsB,SAASC,eAAe57B,GAE5C4nD,GACAA,EAAgB7B,QAExB,EAEQ,YAAA2B,mBAAR,SAA2Bld,EAAgDxqC,GAA3E,WACU6nD,EAAclsB,SAASC,eAAe57B,GAE5C,IAAK6nD,EACD,MAAM,IAAI,GAAqB,8DAGnCA,EAAY7rB,aAAa,aAAc,SACvChmC,OAAOoV,OAAOy8C,EAAY1pB,MAAOsoB,IAEjCoB,EAAY5J,iBAAiB,SAAS,WAClC4J,EAAY7rB,aAAa,WAAY,QAEjCwO,EAAuBsd,UACvBtd,EAAuBsd,UAAS,SAAO/vD,EAAuB0C,GAAiC,kD,iEAG3F,OAFAotD,EAAYE,gBAAgB,YAExBhwD,EACO,CAAP,EAAOK,KAAKivD,SAAStvD,IAGzB,GAAMK,KAAK4vD,gBAAgBvtD,I,cAA3B,S,aAGZ,IAEAotD,EAAY5J,iBAAiB,cAAc,WACvC4J,EAAY1pB,MAAMuoB,gBA/FT,SAgGb,IAEAmB,EAAY5J,iBAAiB,cAAc,WACvC4J,EAAY1pB,MAAMuoB,gBAAkBD,GAAiBC,eACzD,GACJ,EAEc,YAAAsB,gBAAd,SAA8BvtD,G,gIACH,SAAMrC,KAAKy5C,qBAAqB/G,oB,cAA/CI,EAAe,SAAkD,WACjEhqB,EAAmBzmB,EAAO,MAAnBg1C,EAAYh1C,EAAO,QAElCrC,KAAKsrD,YAAY8B,SAAS,gBAAiB,CACvCtkC,MAAK,EACLtQ,SAAU,mBACV8+B,aAAc,SACd+V,YAAava,EACb5wC,OAAQ,wBACRorD,gBAAiB15C,KAAKC,UAAUg3C,GAA0BxT,IAC1DkW,iBAAkB35C,KAAKC,UAAUw3C,GAA2BhU,M,YAGxE,EAlHA,G,GCpBA,WAII,WACYlQ,EACAmkB,EACAjkB,EACAwoB,GAHA,KAAA1oB,OAAAA,EACA,KAAAmkB,YAAAA,EACA,KAAAjkB,uBAAAA,EACA,KAAAwoB,2BAAAA,CACT,CAyHP,OAvHU,YAAA/jB,WAAN,SAAiBrpC,G,gIAKb,GAJQmF,EAA0BnF,EAAO,YAApBiF,EAAajF,EAAO,SAEnCqtD,EAAmB9vD,KAAK+vD,qBAAqBttD,IAE9CmF,IAAgBF,EACjB,MAAM,IAAI,GAAqB,qEAKnC,OAFA1H,KAAKu0C,UAAY7sC,EAEjB,GAAM1H,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OACvD,OADA,SACA,GAAM9vB,KAAK6vD,2BAA2B/jB,WAAW9rC,KAAKu1C,iB,cAAtD,SAEAv1C,KAAK6kD,cAAgB7kD,KAAKgwD,oBAAoBpoD,EAAakoD,G,YAG/D,YAAA7jB,aAAA,WAMI,OALIjsC,KAAK6kD,eAAiB7kD,KAAK6kD,cAAcphB,aACzCzjC,KAAK6kD,cAAcphB,WAAWC,YAAY1jC,KAAK6kD,eAC/C7kD,KAAK6kD,mBAAgBlhD,GAGlB3D,KAAK6vD,2BAA2B5jB,cAC3C,EAEQ,YAAA+jB,oBAAR,SAA4BpoD,EAAqBqoD,GAC7C,IAAMrrB,EAAYrB,SAASC,eAAe57B,GAClC8sC,EAA4Bub,EAAa,WAA7BtgB,EAAgBsgB,EAAa,YAEjD,IAAKrrB,EACD,MAAM,IAAI,GAAqB,+DAGnC,IAAMsrB,EAAkBlwD,KAAK6vD,2BAA2BvhB,aAAatuC,KAAK8lD,yBAA0BpR,EAAY/E,GAIhH,OAFA/K,EAAUf,YAAYqsB,GAEfA,CACX,EAEQ,YAAA3a,aAAR,WACI,IAAKv1C,KAAKu0C,UACN,MAAM,IAAI,GAAoBxQ,GAAwBK,uBAG1D,OAAOpkC,KAAKu0C,SAChB,EAEQ,YAAAwb,qBAAR,SAA6BttD,GAEzB,GAAIA,EAAQiF,WAAa,sBAA8CjF,EAAQ0tD,iBAC3E,OAAO1tD,EAAQ0tD,iBAGnB,GAAI1tD,EAAQiF,WAAa,sBAA8CjF,EAAQ2tD,iBAC3E,OAAO3tD,EAAQ2tD,iBAGnB,GAAI3tD,EAAQiF,WAAa,2BAAmDjF,EAAQ4tD,sBAChF,OAAO5tD,EAAQ4tD,sBAGnB,GAAI5tD,EAAQiF,WAAa,wBAAgDjF,EAAQ6tD,mBAC7E,OAAO7tD,EAAQ6tD,mBAGnB,GAAI7tD,EAAQiF,WAAa,0BAAkDjF,EAAQ8tD,qBAC/E,OAAO9tD,EAAQ8tD,qBAGnB,GAAI9tD,EAAQiF,WAAa,4BAAoDjF,EAAQ+tD,uBACjF,OAAO/tD,EAAQ+tD,uBAGnB,GAAI/tD,EAAQiF,WAAa,sBAA8CjF,EAAQguD,iBAC3E,OAAOhuD,EAAQguD,iBAGnB,GAAIhuD,EAAQiF,WAAa,qBAA6CjF,EAAQiuD,gBAC1E,OAAOjuD,EAAQiuD,gBAGnB,GAAIjuD,EAAQiF,WAAa,wBAAgDjF,EAAQkuD,mBAC7E,OAAOluD,EAAQkuD,mBAGnB,MAAM,IAAI,EACd,EAGc,YAAA7K,yBAAd,SAAuClgB,G,kIACnCA,EAAMsgB,iBACAh/C,EAAOlH,KAAKmnC,OAAOjsB,WAAWhU,KAAKuW,iBACnCmzC,EAAmBxjB,GAAuBlmC,GAAQ,E,iBAGhC,O,sBAAA,GAAMlH,KAAK6vD,2BAA2B/a,iB,OAC1D,OADMlhB,EAAc,SACpB,GAAM5zB,KAAK6vD,2BAA2B5a,cAAcrhB,I,cAApD,SACIg9B,GAAoBh9B,EAAYtR,gBAChC,GAAMtiB,KAAK6vD,2BAA2B9nB,sBAAsBnU,EAAYtR,kBADxE,M,OACA,S,iBAEJ,SAAMtiB,KAAK6wD,4B,cAAX,S,aAEA,I,aAA+B,aAAlB,EAAMpyD,QACf,MAAM,E,qCAKV,YAAAoyD,yBAAR,WACI7wD,KAAKsrD,YAAY8B,SAAS,gBAAiB,CACvChuD,SAAS,eACLyuB,OAAQ,YACR,eAAgB,qCACbF,KAGf,GA3BA,iBADC,I,6CA6BL,C,CAlIA,GCbO,IAAMmjC,GAAmD,CAACC,GAAI,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,SAC/GC,GAAI,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SACrJC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,QAAS,QAAS,QAAS,SAChCC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,QAAS,UCZH,SAASC,GAAaC,GAC3B,MAAsBA,EAAevuD,QAAQ,IAAK,KAAKwuD,cAAc9wD,MAAM,KAA1Ek7C,EAAQ,KACT6V,EAAqB7V,EAAQ,IADX,KAElB8V,EAAiBpB,GAAiB1U,GAExC,OAAK8V,EAIEA,EAAetrC,QAAQqrC,IAAoB,EAAIA,EAAkBC,EAAe,GAH5E,OAIf,C,SCLA,WAKI,WACY/qB,EACAE,EACA8qB,EACAC,GAHA,KAAAjrB,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAA8qB,wBAAAA,EACA,KAAAC,QAAAA,CACT,CA0HP,OAxHI,YAAAtmB,WAAA,SAAWrpC,GAAX,WACYmF,EAA0BnF,EAAO,YAApBiF,EAAajF,EAAO,SAEzC,IAAKmF,IAAgBF,EACjB,MAAM,IAAI,GAAqB,qEAKnC,OAFA1H,KAAKu0C,UAAY7sC,EAEV1H,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,uBACnD/C,MAAK,SAAA9qB,GACF,IAAMif,EAAgBjf,EAAM2hB,eAAeE,iBAAiBpc,GAE5D,IAAKwZ,IAAkBA,EAAc0e,mBAAmB1Q,WACpD,MAAM,IAAI,GAAiB9Y,GAAqBa,sBAGpD,IAAMo7C,EAA+B,CACjClW,iBAAkBj7B,EAAc0e,mBAAmB0yB,uBACnDlW,SAAU0V,GAAa,EAAKM,SAC5BtjB,SAAU5tB,EAAc8I,OAAO8kB,SAC/B5f,WAAYhO,EAAc0e,mBAAmB1Q,YAGjD,OAAO,EAAKijC,wBAAwBruB,KAAKuuB,EAC7C,IACCtlC,MAAK,SAAAuvB,GACF,EAAKiW,kBAAoBjW,EACzB,EAAKkW,cAAgB,EAAKxC,oBAAoBpoD,EAClD,GACR,EAEA,YAAAqkC,aAAA,WAOI,OANIjsC,KAAKwyD,eAAiBxyD,KAAKwyD,cAAc/uB,aACzCzjC,KAAKwyD,cAAcC,oBAAoB,QAASzyD,KAAK8lD,0BACrD9lD,KAAKwyD,cAAc/uB,WAAWC,YAAY1jC,KAAKwyD,eAC/CxyD,KAAKwyD,mBAAgB7uD,GAGlBgxB,QAAQU,SACnB,EAEQ,YAAA26B,oBAAR,SAA4BpoD,GACxB,IAAM4nD,EAAkBjsB,SAASC,eAAe57B,GAC1C3F,EAAQjC,KAAKmnC,OAAOjsB,WACpBgG,EAAgBlhB,KAAKu0C,UAAYtyC,EAAM2hB,eAAeE,iBAAiB9jB,KAAKu0C,WAAa,KACzF91B,EAAcxc,EAAM+nB,OAAO3L,iBAEjC,IAAKmxC,EACD,MAAM,IAAIzwD,MAAM,wCAGpB,IAAKmiB,EACD,MAAM,IAAI,GAAiB9K,GAAqBa,sBAGpD,IAAKwH,EACD,MAAM,IAAI,GAAqB,0CAGnC,IAAMwnC,EAAS1iB,SAASI,cAAc,SAItC,GAFAsiB,EAAOrnD,KAAO,QAEVsiB,EAAc0e,mBAAmB0yB,uBAAwB,CACzD,IAAMI,EAAYxxC,EAAc8I,OAAO8kB,SAAW,WAAa,GACvD5f,EAAehO,EAAc0e,mBAAkB,WAEjD/S,EAAS,CACX,UAAUilC,GAAa9xD,KAAKoyD,SAC5B,0CACA,cAAcljC,GAGlB+2B,EAAO0M,IAAM,CACT,WAAWD,EAAS,8DACpB7lC,EAAOjtB,KAAK,MACdA,KAAK,I,MAEPqmD,EAAO0M,IAAM,4EAOjB,OAJAnD,EAAgB3rB,YAAYoiB,GAE5BA,EAAOJ,iBAAiB,QAAS7lD,KAAK8lD,0BAE/BG,CACX,EAEQ,YAAA2M,yBAAR,WACI,IAAM3wD,EAAQjC,KAAKmnC,OAAOjsB,WACpBoM,EAAWrlB,EAAMqlB,SAAStL,cAC1BkF,EAAgBlhB,KAAKu0C,UAAYtyC,EAAM2hB,eAAeE,iBAAiB9jB,KAAKu0C,WAAa,KAE/F,IAAKjtB,EACD,MAAM,IAAI,GAAiBlR,GAAqBK,iBAGpD,IAAKyK,EACD,MAAM,IAAI,GAAiB9K,GAAqBa,sBAGpD,MAAO,CACHiY,WAAYhO,EAAc0e,mBAAmB1Q,WAC7C2jC,iBAAkB3xC,EAAc0e,mBAAmBizB,iBACnDlhC,OAAQrK,EAASpgB,KAAK8pB,WAAWhuB,WACjCiuB,SAAU3J,EAASpgB,KAAK+pB,SAAS3wB,KACjCwsB,OAAQxF,EAASpgB,KAAKxB,GACtB0H,aAA4B,OC9H1Bkf,OAAO28B,SAAS6J,OAAhBxmC,6FDgIV,EAGQ,YAAAw5B,yBAAR,WACI,IAAK9lD,KAAKuyD,kBACN,MAAM,IAAI,GAAoBxuB,GAAwBgvB,8BAG1D/yD,KAAKuyD,kBAAkBjrC,SAAStnB,KAAK4yD,2BACzC,GANA,iBADC,I,6CAQL,C,CApIA,G,GEIA,WAGI,WACYzrB,EACAE,EACA+X,EACAkM,EACA0H,QAAA,IAAAA,IAAAA,EAAA,IAJA,KAAA7rB,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAA+X,oBAAAA,EACA,KAAAkM,YAAAA,EACA,KAAA0H,MAAAA,CACT,CAgHP,OA9GI,YAAAlnB,WAAA,SAAWrpC,GAAX,WACUwwD,EAAgBxwD,EAAQgvC,OACxBxvC,EAAQjC,KAAKmnC,OAAOjsB,WACpBgG,EAAgBlhB,KAAK0lD,eAAiBzjD,EAAM2hB,eAAeE,iBAAiBrhB,EAAQiF,UAE1F,IAAKurD,EACD,MAAM,IAAI,GAGd,IAAK/xC,EACD,MAAM,IAAI,GAAiB9K,GAAqBa,sBAGpD,OAAOjX,KAAKo/C,oBAAoBtO,WAAW5vB,EAAc8I,OAAO6kB,YAC3D9hB,MAAK,SAAA0kB,G,UACF,IAAKvwB,IAAkBA,EAAc8I,OAAO6kB,WACxC,MAAM,IAAI,GAAiBz4B,GAAqBa,sBAGpD,IAAM43B,EAAa3tB,EAAc8I,OAAO6kB,WAClCwd,EAAMnrC,EAAc8I,OAAO8kB,SAAW,UAAY,aAClDwB,IAAW,MAAyB+b,GAAM4G,EAAcnW,SAAQ,GAEhEoW,EAAsBzhB,EAAOkP,QAAQsC,QAAU,SAC/CkQ,EAAiBF,EAAcG,YAAc,CAACF,GAAuB,GACrEG,EAAqBJ,EAAcG,YAAsC,GAAxB,CAACF,GAExD,OAAOzhB,EAAO6hB,OAAOtuB,OAAO,CACxBqnB,IAAG,EACH3b,OAAQJ,EACRkN,OAAQyV,EAAclH,qBACtBwH,QAAS,CACLC,QAASL,EACTM,WAAYJ,GAEhBttB,OAAO,8BACH2Z,MAAOsO,GAA6B0F,OACjC,IAAArlD,MAAK4kD,EAAcltB,MAAO,SAAU,QAAS,QAAS,QAAS,UAAW,iBAAe,CAC5Fd,KAA4B,kBAArB/jB,EAAcxb,IAAwD,WAAX,QAAnB,EAAAutD,EAAcltB,aAAK,eAAEd,MAAoB4oB,GAA4B8F,WAAgC,QAApB,EAACV,EAAcltB,aAAK,eAAEd,OAE1Jz3B,QAAS,SAAC8Q,EAAGkiC,GAAY,SAAKD,cAAc1R,EAAY2R,EAASyS,EAAchH,eAAtD,EACzB2H,YAAa,SAAC3vD,EAAMu8C,GAAY,SAAKgM,iBAAiBvoD,EAAMu8C,EAASyS,EAAclH,qBAAsBkH,EAAcjH,iBAAvF,GACjCvpD,EAAQmF,YACf,GACR,EAEA,YAAAqkC,aAAA,WAGI,OAFAjsC,KAAK0lD,oBAAiB/hD,EAEfgxB,QAAQU,SACnB,EAEQ,YAAAkrB,cAAR,SAAsB1R,EAAoB2R,EAAyBvP,GAAnE,WACI,IAAKuP,EACD,MAAM,IAAI,GAAoBzc,GAAwBgvB,8BAG1D,OAAO/yD,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,uBACnD/C,MAAK,SAAA9qB,GACF,IAAMiF,EAAOjF,EAAMiF,KAAKsW,UAClBsP,EAAS5lB,EAAOA,EAAKxB,GAAK,GAEhC,OAAO86C,EAAQnhB,QAAQ/P,KAAQ,EAAK0jC,MAAK,wCAAyC,CAAEnkB,WAAU,EAAE/hB,OAAM,GAAI,CACtG1tB,SAAS,eACL,iBAAkBsuB,IACfC,KAGf,IACCZ,MAAK,SAAA8mC,GAAO,OAAAA,EAAInuD,EAAJ,IACZ4nB,OAAM,SAAA3tB,GAKH,MAJIsxC,GACAA,EAAQtxC,GAGNA,CACV,GACR,EAEQ,YAAA6sD,iBAAR,SACIvoD,EACAu8C,EACAuL,EACAkD,GAJJ,WAMI,IAAKjvD,KAAK0lD,eACN,MAAM,IAAI,GAAoB3hB,GAAwBgvB,8BAG1D,IAAKvS,EACD,MAAM,IAAI,GAAoBzc,GAAwBgvB,8BAG1D,IAAK9uD,EAAK6vD,YAAc7vD,EAAK8vD,QACzB,MAAM,IAAI,GAAiB39C,GAAqBW,gBAGpD,IAAMrP,EAAW1H,KAAK0lD,eAAehgD,GAErC,OAAO86C,EAAQhzC,QAAQzP,IAAIkG,EAAK6vD,WAAW/mC,MAAK,SAAA1qB,GAC5C,EAAKipD,YAAY8B,SAAS,gBAAiB,CACvC9V,aAAc,SACd9+B,SAAU9Q,EACVxF,OAAQ6pD,EAAuB,kBAAoB,wBACnD3jC,UAAWnkB,EAAK6vD,UAChBE,QAAS/vD,EAAK8vD,QACdE,UAAWrgD,KAAKC,UAAUxR,EAAQ6xD,MAAMC,aAEhD,GACJ,EACJ,EAzHA,G,GCHA,WAKI,WACYhtB,EACAE,EACAikB,EACA8I,GAHA,KAAAjtB,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAAikB,YAAAA,EACA,KAAA8I,gCAAAA,CACT,CAsEP,OApEU,YAAAtoB,WAAN,SAAiBrpC,G,qJAKb,GAJIR,EAAQjC,KAAKmnC,OAAOjsB,WAClBgG,EAAgBjf,EAAM2hB,eAAeI,wBAAwBvhB,EAAQiF,YACnEk4B,EAAuB1e,EAAa,oBAEpB47B,SACpB,MAAM,IAAI,GAIN,OADR98C,KAAK+/C,gBAAkBngB,EAAmBqd,eAClC,GAAMj9C,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAc/D,OAdA7tB,EAAQ,SACFiF,EAAOjF,EAAMiF,KAAKuW,iBAClB6iC,EAA+B,CACjCgM,UAAW,SAAAroD,GAAQ,SAAKuoD,iBAAiBvoD,EAAtB,EACnBwwC,QAAS,SAAAxwC,GAAQ,SAAKowD,2BAA2BpwD,EAAhC,GAGjBxB,EAAQ6xD,gBAAkB7xD,EAAQ6xD,eAAevuB,QACjDua,EAAava,MAAQtjC,EAAQ6xD,eAAevuB,OAG1CwuB,EAA2C,QAAzB,EAAG9xD,EAAQ6xD,sBAAc,eAAEC,mBAC7CC,EAAsBjxC,QAAQgxC,GAAsBhxB,SAASC,eAAe+wB,IAElF,GAAMv0D,KAAKo0D,gCAAgCtoB,WAAW5qB,EAAeha,EAAK+pB,SAAS3wB,MAAM,I,OAQzF,OARA,SAEAN,KAAKo0D,gCAAgCpU,cAAc94C,EAAKxB,GAAI,IAAIjD,EAAQmF,YAAe04C,GAEnFkU,GACAx0D,KAAKo0D,gCAAgC1S,eAAex6C,EAAK8pB,WAAY,IAAIujC,GAGtE,CAAP,EAAO5/B,QAAQU,W,QAGnB,YAAA4W,aAAA,WAII,OAHAjsC,KAAKy0D,eAAY9wD,EACjB3D,KAAK00D,cAAW/wD,EAETgxB,QAAQU,SACnB,EAEQ,YAAAg/B,2BAAR,SAAmC,G,IAAE3T,EAAa,gBAC9C1gD,KAAKy0D,UAA8B,WAAlB/T,GAAgD,aAAlBA,EAC/C1gD,KAAK00D,SAA6B,UAAlBhU,CACpB,EAEQ,YAAA8L,iBAAR,SAAyB,G,IAIjBh0C,EAJmBm8C,EAAO,UAC9B,IAAKA,EACD,MAAM,IAAI,GAAiBv+C,GAAqBW,gBAYpD,OAPIyB,EADAxY,KAAK00D,UAAY10D,KAAK+/C,gBACX,sBACJ//C,KAAKy0D,UACD,uBAEA,iBAGRz0D,KAAKsrD,YAAY8B,SAAS,gBAAiB,CAC9C9V,aAAc,SACdp1C,OAAQ,wBACRsW,SAAQ,EACRqqC,SAAU8R,GAElB,EACJ,EAhFA,GCJe,SAAS,GAAoB5uB,GAChC,IAAAjjB,EAAiDijB,EAAK,MAA/CyZ,EAA0CzZ,EAAK,MAAxC0Z,EAAmC1Z,EAAK,OAAhC2Z,EAA2B3Z,EAAK,MAAzB4Z,EAAoB5Z,EAAK,OAAjB6Z,EAAY7Z,EAAK,QAExD4kB,EAAc,CAChBnL,MAAOoV,GAAcpV,GACrBG,OAAQ,GAAeA,GACvB78B,MAAO+xC,GAAc/xC,GACrB28B,OAAQqV,GAAerV,GACvBC,MAAOqV,GAAcrV,GACrBE,QAASoV,GAAgBpV,EAASH,IAGtC,OAAO,IAAA19C,QAAO4oD,EAAa,EAAA92B,MAC/B,CAEA,SAAS+gC,GAAcpV,GACnB,OAAOA,GAASP,GAAiBO,GAASA,OAAQ77C,CACtD,CAEA,SAASkxD,GAAc/xC,GACnB,OAAOA,GAASi8B,GAAiBj8B,GAASA,OAAQnf,CACtD,CAEA,SAASmxD,GAAerV,GACpB,OAAOA,GAAUT,GAAkBS,GAAUA,OAAS97C,CAC1D,CAEA,SAASoxD,GAAcrV,GACnB,OAAOA,GAASR,GAAiBQ,GAASA,OAAQ/7C,CACtD,CAEA,SAASqxD,GAAgBpV,EAAmBH,GACxC,GAAIG,GAA8B,kBAAZA,GAAyBH,IAAWT,GAAkBA,GAAkBa,YAC1F,OAAOD,CAIf,CAEA,SAAS,GAAeD,GAIpB,MAAsB,iBAAXA,GAAuBA,EAFhB,MAMdA,EAPc,MAWXA,CACX,C,SC7CA,WAGI,WACYxY,EACAE,EACAikB,EACAlM,EACAC,GAJA,KAAAlY,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAAikB,YAAAA,EACA,KAAAlM,oBAAAA,EACA,KAAAC,6BAAAA,CACT,CA+GP,OA7GU,YAAAvT,WAAN,SAAiBrpC,G,gJAIb,GAHQwyD,EAA4DxyD,EAAO,iCAAjCmF,EAA0BnF,EAAO,YAApBiF,EAAajF,EAAO,SACnE07C,GAAF,EAA4C8W,GAAoC,CAAC,GAA5E,IAAEvY,EAAyB,4BAAE3W,EAAK,SAExCr+B,EACD,MAAM,IAAI,GAAqB,qFAGnC,IAAKE,EACD,MAAM,IAAI,GAAqB,wFAGnC,IAAKqtD,EACD,MAAM,IAAI,GAAqB,6GAGnC,IAAK9W,EACD,MAAM,IAAI,GAAqB,iHAGrB,SAAMn+C,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAG3C,OAHpB7tB,EAAQ,SACRgvB,EAAWhvB,EAAMiF,KAAKuW,iBAAiBwT,SAAS3wB,KAChD4gB,EAAgBjf,EAAM2hB,eAAeI,wBAAwBtc,GACnE,EAAA1H,KAA0B,GAAMA,KAAKo/C,oBAAoB3C,mBAAmBv7B,EAAe+P,EAAUyrB,I,cAArG,EAAKwY,mBAAqB,SAE1Bl1D,KAAKm1D,cAAchX,EAAKz2C,EAAUE,EAAa80C,EAA2B3W,G,YAG9E,YAAAkG,aAAA,WACI,OAAOtX,QAAQU,SACnB,EAEQ,YAAA8/B,cAAR,SACIhX,EACAz2C,EACAE,EACA80C,EACA3W,GALJ,WAOUqvB,EAAoBp1D,KAAKq1D,+BAG/B,IAFiCz3D,OAAOkgB,OAAOs3C,EAAkBzU,SAASzwB,SAASiuB,GAG/E,MAAM,IAAI,GAAqB,mIAGnC,IAEMmX,EAAsC,CACxC5U,cAAevC,EACfpY,MAJqBA,EAAQ/lC,KAAKu1D,gBAAgBxvB,GAAS,CAAC,EAK5D6Y,YAAa,WAAM,SAAK4W,aAAa9Y,EAAlB,EACnB4P,UAAW,SAAC,G,IAAEqI,EAAO,UAA2B,SAAKnI,iBAAiB9kD,EAAUitD,EAAhC,GAG9CvI,EAAqBgJ,EAAkBlV,QAAQoV,GAEjDlJ,EAAmBvL,aACnBuL,EAAmBpnB,OAAO,IAAIp9B,GAE9B5H,KAAKysD,eAAe7kD,EAE5B,EAEc,YAAA4tD,aAAd,SAA2B9Y,G,gIAMH,OALdz6C,EAAQjC,KAAKmnC,OAAOjsB,WACpBhU,EAAOjF,EAAMiF,KAAKuW,iBAElB8K,EAAam0B,EAA4B,2CAA6C,kCAExE,GAAM18C,KAAKq/C,6BAA6BT,YAAY13C,EAAKxB,GAAI6iB,I,OAEjF,MAAO,CAAP,EAFoB,SAAwE,S,QAKxF,YAAAikC,iBAAR,SAAyB9kD,EAAkBuO,GACvC,IAAKA,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO9W,KAAKsrD,YAAY8B,SAAS,gBAAiB,CAC9C9V,aAAc,SACdp1C,OAAQ,wBACRsW,SAAU9Q,EACVm7C,SAAU5sC,GAElB,EAEQ,YAAAo/C,6BAAR,WACI,IAAKr1D,KAAKk1D,mBACN,MAAM,IAAI,GAGd,OAAOl1D,KAAKk1D,kBAChB,EAEQ,YAAAK,gBAAR,SAAwBxvB,GACd,MAAmC,GAAoBA,GAE7D,MAAO,CAAE4Z,OAFK,SAEG78B,MAFI,QAEG28B,OAFK,SAEGC,MAFI,QAGxC,EAEQ,YAAA+M,eAAR,SAAuBiB,GACnB,IAAMpoB,EAAUooB,GAAanqB,SAASC,eAAekqB,GAEjDpoB,GACAA,EAAQqoB,QAEhB,EACJ,EAxHA,G,GCAA,WAGI,WACYxmB,EACAE,EACAikB,EACAlM,EACAC,GAJA,KAAAlY,OAAAA,EACA,KAAAE,uBAAAA,EACA,KAAAikB,YAAAA,EACA,KAAAlM,oBAAAA,EACA,KAAAC,6BAAAA,CACT,CAiGP,OA/FU,YAAAvT,WAAN,SAAiBrpC,G,8IAIb,GAHQgzD,EAA+ChzD,EAAO,oBAAjCmF,EAA0BnF,EAAO,YAApBiF,EAAajF,EAAO,SACtDsjC,GAAF,EAAuC0vB,GAAuB,CAAC,GAAxD,MAAE/Y,EAAyB,6BAEnCh1C,EACD,MAAM,IAAI,GAAqB,qFAGnC,IAAKE,EACD,MAAM,IAAI,GAAqB,wFAGnC,IAAK6tD,EACD,MAAM,IAAI,GAAqB,gGAGrB,SAAMz1D,KAAKmnC,OAAOU,SAAS7nC,KAAKqnC,uBAAuBvX,wB,OAG3C,OAHpB7tB,EAAQ,SACRgvB,EAAWhvB,EAAMiF,KAAKuW,iBAAiBwT,SAAS3wB,KAChD4gB,EAAgBjf,EAAM2hB,eAAeI,wBAAwBtc,GACnE,EAAA1H,KAA0B,GAAMA,KAAKo/C,oBAAoB3C,mBAAmBv7B,EAAe+P,EAAUyrB,I,cAArG,EAAKwY,mBAAqB,SAE1Bl1D,KAAKm1D,cAAcvtD,EAAaF,EAAUg1C,EAA2B3W,G,YAGzE,YAAAkG,aAAA,WACI,OAAOtX,QAAQU,SACnB,EAEQ,YAAA8/B,cAAR,SAAsBvtD,EAAqBF,EAAkBg1C,EAAqC3W,GAAlG,WACUqvB,EAAoBp1D,KAAKq1D,+BAKzBC,EAAsC,CACxC5U,cALkB0U,EAAkBzU,QAAQ+U,MAM5C3vB,MAJqBA,EAAQ/lC,KAAK21D,qBAAqB5vB,GAAS,CAAC,EAKjE6Y,YAAa,WAAM,SAAK4W,aAAa9Y,EAAlB,EACnB4P,UAAW,SAAC,G,IAAEqI,EAAO,UAA2B,SAAKnI,iBAAiB9kD,EAAUitD,EAAhC,GAG9CvI,EAAqBgJ,EAAkBlV,QAAQoV,GAEjDlJ,EAAmBvL,aACnBuL,EAAmBpnB,OAAO,IAAIp9B,GAE9B5H,KAAKysD,eAAe7kD,EAE5B,EAEc,YAAA4tD,aAAd,SAA2B9Y,G,gIAMH,OALdz6C,EAAQjC,KAAKmnC,OAAOjsB,WACpBhU,EAAOjF,EAAMiF,KAAKuW,iBAElB8K,EAAam0B,EAA4B,8BAA+B,sBAE1D,GAAM18C,KAAKq/C,6BAA6BT,YAAY13C,EAAKxB,GAAI6iB,I,OAEjF,MAAO,CAAP,EAFoB,SAAwE,S,QAKxF,YAAAikC,iBAAR,SAAyB9kD,EAAkBuO,GACvC,IAAKA,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO9W,KAAKsrD,YAAY8B,SAAS,gBAAiB,CAC9C9V,aAAc,SACdp1C,OAAQ,wBACRsW,SAAU9Q,EACVm7C,SAAU5sC,GAElB,EAEQ,YAAAo/C,6BAAR,WACI,IAAKr1D,KAAKk1D,mBACN,MAAM,IAAI,GAGd,OAAOl1D,KAAKk1D,kBAChB,EAEQ,YAAAS,qBAAR,SAA6B5vB,GACnB,MAAmC,GAAoBA,GAE7D,MAAO,CAAE4Z,OAFK,SAEG78B,MAFI,QAEG28B,OAFK,SAEGC,MAFI,QAGxC,EAEQ,YAAA+M,eAAR,SAAuBiB,GACnB,IAAMpoB,EAAUooB,GAAanqB,SAASC,eAAekqB,GAEjDpoB,GACAA,EAAQqoB,QAEhB,EACJ,EA1GA,G,SCRA,WAGI,aACI3tD,KAAKmsC,UAAY,IAAI,GAAS,CAC1BW,cAAe9sC,KAAK41D,cAAcjtB,KAAK3oC,MACvC4sC,aAAa,GAErB,CA4CJ,OA1CI,YAAA7uC,IAAA,SAAI83D,GACA,OAAO71D,KAAKmsC,UAAUpuC,IAAIiC,KAAK81D,aAAaD,GAChD,EAEA,YAAA51D,SAAA,SAAS41D,EAAmBzrC,GACxBpqB,KAAKmsC,UAAUlsC,SAASD,KAAK81D,aAAaD,GAAYzrC,EAC1D,EAEQ,YAAA0rC,aAAR,SAAqBD,GACjB,OAAOliD,KAAKC,KAAKC,UAAUgiD,GAC/B,EAEQ,YAAAE,aAAR,SAAqBxoD,GACjB,OAAOqG,KAAKimC,MAAMmc,KAAKzoD,GAC3B,EAEQ,YAAAqoD,cAAR,SAAsBroD,EAAe0oD,GAArC,WACUC,EAAQl2D,KAAK+1D,aAAaxoD,GAC1B4oD,EAAqD,GAE3DF,EAAiBnjD,SAAQ,SAAAsjD,GAIrB,IAHA,IAAMC,EAAa,EAAKN,aAAaK,GAC/B12D,EAAS,CAAE6N,MAAO6oD,EAAiBE,QAAS,GAEvB,MAAA14D,OAAO24D,QAAQF,GAAf,eAA4B,CAA5C,WAAC34D,EAAG,KAAEa,EAAK,KACdb,KAAOw4D,GAASA,EAAMx4D,KAASa,GAC/BmB,EAAO42D,S,CAIfH,EAAQ3nD,KAAK9O,EACjB,IAEA,IAAM82D,EAAUL,EAAQjjD,MAAK,SAAC3V,EAAGkI,GAAM,OAAAA,EAAE6wD,QAAU/4D,EAAE+4D,OAAd,IAClCpzD,QAAO,SAAAxD,GAAU,OAAAA,EAAO42D,QAAU,CAAjB,IAAoB,GAE1C,GAAIE,aAAO,EAAPA,EAASjpD,MACT,OAAOipD,EAAQjpD,MAGnB,MAAM,IAAIxO,MAAM,mEACpB,EACJ,EApDA,G,SCIA,YAOI,WAAYN,G,ICduBC,EAAaR,E,mBDchD,EACI,YAAMO,GAAW,sCAAoC,K,OAJzD,EAAAE,KAAO,gBACP,EAAAC,KAAO,WCZ4BF,EDiBhB,ECjB6BR,EDiBvB,EAAWA,UChBhCN,OAAOiB,eACPjB,OAAOiB,eAAeH,EAAQR,GAE9BQ,EAAOI,UAAYZ,EDeoB,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAIF,MAAM,EAAKN,SAASQ,M,CAE7C,CACJ,OAjBY,oBAiBZ,EAlBA,CACYF,OENZ,IAAY,IAAZ,SAAYqX,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAY,QAAoB,K,SAyBhC,YACI,WAAmBC,GAAnB,MACI,YAOR,SAAyBzX,GACrB,OAAQA,GACJ,KAAK,GAAqB0X,sBACtB,MAAO,iEAEX,KAAK,GAAqBC,YACtB,MAAO,sDAEX,KAAK,GAAqBC,oBACtB,MAAO,8DAEX,KAAK,GAAqBC,gBACtB,MAAO,0DAEX,KAAK,GAAqBC,gBACtB,MAAO,0DAEX,KAAK,GAAqBC,sBAC1B,KAAK,GAAqBC,mBACtB,MAAO,+DAEX,KAAK,GAAqBC,aACtB,MAAO,uDAEX,KAAK,GAAqBC,eACtB,MAAO,0EAEX,KAAK,GAAqBC,eACtB,MAAO,yDAEX,KAAK,GAAqBC,oBACtB,MAAO,+EAEX,KAAK,GAAqBC,qBACtB,MAAO,2FAEX,KAAK,GAAqBC,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CAjDc,CAAgBb,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAK1X,KAAO,mBACZ,EAAKC,KAAO,e,CAChB,CACJ,OAP8C,oBAO9C,EAPA,CAA8C,I,SCpB9C,YACI,WAAYH,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAPkD,oBAOlD,EAPA,CAAkD,I,SCAlD,YACI,WAAYH,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKE,KAAO,8BACZ,EAAKC,KAAO,oB,CAChB,CACJ,OAPyD,oBAOzD,EAPA,CAAyD,ICClD,SAAS,GACZ0tB,GAEA,IAPJ,SAA0BA,GACtB,MAAO,oBAAqBA,CAChC,CAKS,CAAiBA,GAClB,MAAM,IAAIvtB,MAAM,6BAExB,C,SAEA,wBAMA,QALI,YAAAiZ,OAAA,SAAOqnB,GAGH,OAFA,GAAqB/S,QAEd,IAAI4jB,gBAAgB,EAAG7Q,EAClC,EACJ,EANA,GCOA,IAGK,IAAL,SAAK0lB,GACD,sBACA,qBACH,CAHD,CAAK,QAAa,K,SAWlB,WAOI,WACYv4B,EACAiqC,EACAxR,GAFA,KAAAz4B,eAAAA,EACA,KAAAiqC,2BAAAA,EACA,KAAAxR,gBAAAA,EAPJ,KAAAC,qBAAuB,EAAA9b,KACvB,KAAA+b,eAAyB,GAAcC,SACvC,KAAAC,eAAyB,GAAcC,QAM5C,CA4cP,OA1cU,YAAAxZ,WAAN,SACIrpC,G,sIAOA,GAJQiF,EAAoCjF,EAAO,SAAjCmF,EAA0BnF,EAAO,YAApB8iD,EAAa9iD,EAAO,SAEnD,GAAqB6pB,SAEhB5kB,IAAa69C,EACd,MAAM,IAAI,GACN,yBAQR,OAJQC,EAAwCD,EAAQ,gBAA/BE,EAAuBF,EAAQ,mBAExDvlD,KAAKklD,qBAAuBO,EAE5B,GAAMzlD,KAAKy2D,2BAA2B3mC,uB,OAEtC,OAFA,SAEA,GAAM9vB,KAAKy2D,2BAA2BjpC,kBAAkB9lB,I,OAWxD,OAXA,SAEMzF,EAAQjC,KAAKy2D,2BAA2Bv7C,WAC9Clb,KAAK0lD,eAAiBzjD,EAAM+hB,wBAAwBtc,GAEpD1H,KAAK2lD,gBAAkB3lD,KAAK4lD,cAAch+C,EAAa49C,GACvDxlD,KAAK2lD,gBAAgBE,iBACjB,QACA7lD,KAAK8lD,yBAAyBnd,KAAK3oC,OAGhC,CAAP,EAAO20B,QAAQU,W,QAGnB,YAAA4W,aAAA,WACI,OAAOtX,QAAQU,SACnB,EAEQ,YAAAuwB,cAAR,SACIh+C,EACA49C,QAAA,IAAAA,IAAAA,EAAA,6BAEA,IAAM5gB,EAAYrB,SAASC,eAAe57B,GAC1C,IAAKg9B,EACD,MAAM,IAAI,GACN,8DAIRrB,SAASpkC,KAAK4mD,UAAUC,IAAI,uBAC5B,IAAMC,EAAS1iB,SAASI,cAAc,OAMtC,OALAsiB,EAAOF,UAAUC,IAAIR,GACrBS,EAAOriB,aAAa,OAAQ,UAC5BqiB,EAAOriB,aAAa,aAAc,oBAClCgB,EAAUf,YAAYoiB,GAEfA,CACX,EAEQ,YAAAH,yBAAR,SAAiClgB,GAC7BA,EAAMsgB,iBACN,IAAMjkD,EAAQjC,KAAKy2D,2BAA2Bv7C,WACxChU,EAAOjF,EAAMwb,iBACbuM,EAAS/nB,EAAMyc,wBACf4I,EAAWrlB,EAAMklB,qBAEvB,IAAKnnB,KAAK0lD,iBAAmB1lD,KAAK0lD,eAAe9lB,mBAC7C,MAAM,IAAI,GACN,yBAGR,IAAMP,EAAUr/B,KAAKmmD,gBACjBj/C,EACAogB,EACA0C,EACAhqB,KAAK0lD,gBAEHU,EAAkBpmD,KAAKilD,gBAAgBjtC,OAAOqnB,GACpDr/B,KAAKqmD,sBACDD,EACApmD,KAAK0lD,eACL17B,GAGJo8B,EAAgBE,OACpB,EAEQ,YAAAH,gBAAR,SACIj/C,EACAogB,EACA0C,EACA9I,G,MAGI,EACA8I,EAAM,aADUu8B,EAAgB,mBAAEC,EAAS,YAG3C,EACAt/C,EAAI,SADQ5G,EAAI,OAAEk3B,EAAa,gBAI/B,EACAtW,EAAa,mBADSulC,EAAoB,uBAAEC,EAAiB,oBAG3DC,EAAmBz/C,EAAKwf,UAAUC,cAAcvmB,OAAS,EAazDi/B,EAA6C,CAC/CunB,6BAA8B,CAAC,iBAC/BC,8BAA+B,CAAC,QAAS,SACzCxsC,YAAaksC,EACbtO,aAAc33C,EACdmmD,qBAAoB,EACpBC,kBAAiB,EACjBhgC,UAAW,GACX2mB,MApBuCsZ,EACrC,CACI7jC,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,GACvC54B,KAAM,WAEV,CACIkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,GACvC54B,KAAM,UAchB,GAAI+nD,EACqC,QAArC,EAAAtnB,EAAQwnB,qCAA6B,SAAEr4C,KAAK,qBACzC,CACH,IAAM,EAA2C,CAC7C,CACIsU,MAAO9iB,KAAKmlD,eACZxzB,OAAQ,GAAGrK,EAASiT,SAASue,QAAQthB,KAI7ClQ,EAASoT,MAAM5nB,SAAQ,SAACg0C,GACpB,SAAUt4C,KAAK,CACXsU,MAAOgkC,EAAInoD,KACXgzB,OAAQ,GAAGm1B,EAAIn1B,OAAOmnB,QAAQthB,IAFlC,IAMJ6H,EAAQ3Y,UAAY,C,CAGxB,OAAO2Y,CACX,EAEQ,YAAAgnB,sBAAR,SACID,EACAllC,EACA8I,GAHJ,WAKIo8B,EAAgBW,mBAAqB,SAAOnhB,GAAK,kD,uEAGrC,O,sBAAA,GAAM5lC,KAAKgnD,oBAAoB9lC,EAAe0kB,I,cADpCqhB,EACV,SAAoD,KACxDb,EAAgBc,2BAA2BD,G,aAE3C,M,SAAM,IAAIloD,MAAM,8B,yBAIxBqnD,EAAgBe,0BAA4B,SAAOvhB,GAAK,4FACpD,SAAA5lC,KAAKonD,+BAA+BhB,EAAiBp8B,EAAQ4b,G,QAEjEwgB,EAAgBiB,yBAA2B,SAAOzhB,GAAK,4FACnD,SAAA5lC,KAAKsnD,8BAA8BlB,EAAiBp8B,EAAQ4b,G,QAEhEwgB,EAAgBmB,SAAW,6D,uEAGnB,O,sBADMz5B,EAAM,oBAAoB5M,EAAcxb,GAAE,WAChD,GAAM1F,KAAKwsB,eAAezuB,IAAI+vB,I,OAE9B,OAFA,SAEO,CAAP,EAAO9tB,KAAKy2D,2BAA2B9mC,gB,OAEvC,M,SAAM,IAAI,G,yBAIlBy2B,EAAgBoB,oBAAsB,SAAO5hB,GAAK,4FAC9C,SAAA5lC,KAAKynD,qBAAqB7hB,EAAOwgB,EAAiBllC,G,OAC1D,EAEc,YAAAkmC,+BAAd,SACIhB,EACAp8B,EACA4b,G,0JAEMtjB,EAAkBtiB,KAAK0nD,2BACzB9hB,EAAM+hB,iB,iBAIN,O,sBAAA,GAAM3nD,KAAKy2D,2BAA2B1uB,sBAClCzlB,I,cADJ,S,aAMA,M,SAFA8jC,EAAgBwB,QAEV,IAAI7oD,MAAM,kC,OA2CpB,GAvCoBynD,EAChBx8B,EAAM,uBACN/nB,EAAQjC,KAAKy2D,2BAA2Bv7C,WAE5Bsc,EACZv1B,EAAMwb,iBAAgB,uBACtB6J,EAAWrlB,EAAMklB,qBACf0gC,EAC6C,QADpB,EAC3BvgC,EAASvV,aAAa,GAAGkU,8BAAsB,eAAEvgB,GAC/CoiD,EACFxgC,EAASvV,aAAa,GAAGg2C,yBACvBC,EAAiBF,aAAgB,EAAhBA,EAAkBjqC,MACrC,SAAC,GAAW,OAAP,OAAcgqC,CAAP,IAEVI,EAAoBH,aAAgB,EAAhBA,EAAkB5kD,QACxC,SAAC41B,GAAW,OAAAA,EAAOpzB,KAAOmiD,CAAd,IAEVK,EACFF,EACM,CACI,CACIllC,MAAOklC,EAAezqB,YACtB5L,OAAQ,GAAGq2B,EAAe9pB,KAAK4a,QAC3BthB,GAEJt3B,OAAQ8nD,EAAeG,sBACvBC,WAAYJ,EAAetiD,KAGnC,GACVuiD,SAAAA,EAAmBn1C,SAAQ,SAACgmB,GACxB,OAAAovB,EAAgB15C,KAAK,CACjBsU,MAAOgW,EAAOyE,YACd5L,OAAQ,GAAGmH,EAAOoF,KAAK4a,QAAQthB,GAC/Bt3B,OAAQ44B,EAAOqvB,sBACfC,WAAYtvB,EAAOpzB,IAJvB,MAQmBoiD,aAtQDjoD,OAuQlB,MAAM,IAAId,MAAM,mCAGpB,GAAgC,IAA5B+oD,EAAiB1nD,OAYjB,OAXAgmD,EAAgBiC,iCACZnY,gBAAgBoY,uCAChB,GACA,CACI1pD,KAAM,UACNkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,IAE3C,IAGJ,IAGE+wB,EAAoBT,EAAiBjqC,MACvC,SAACib,GAAW,OAAAA,EAAOsF,aAAP,IAGVoqB,EAAWD,EACXA,EAAkB7iD,GAClBoiD,EAAiB,GAAGpiD,GACpB+iD,EAAmBT,EAAiBA,EAAetiD,GAAK8iD,E,iBAE1D,O,sBAAA,GAAMxoD,KAAK0oD,sBAAsBD,I,cAAjC,S,aAEA,M,SAAM,IAAI1pD,MAAM,kC,cAGpBkD,EAAQjC,KAAKy2D,2BAA2Bv7C,WACxCoM,EAAWrlB,EAAMklB,qBAEjBi/B,EAAgBiC,iCAAiC,CAC7CM,mBAAoBT,EACpBU,SAAU,CACNhqD,KAAM,QACNkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,IAE3CqxB,aAAc7oD,KAAK8oD,qBAAqBxhC,EAAUkQ,K,YAI5C,YAAA8vB,8BAAd,SACIlB,EACAp8B,EACA4b,G,oIAGoB4gB,EAChBx8B,EAAM,uBAEwBw+B,EAC9B5iB,EAAK,0B,iBAEL,O,sBAAA,GAAM5lC,KAAK0oD,sBAAsBF,I,cAAjC,S,aAIA,M,SAFApC,EAAgBwB,QAEV,IAAI7oD,MAAM,4C,cAGdkD,EAAQjC,KAAKy2D,2BAA2Bv7C,WAE9Bsc,EACZv1B,EAAMwb,iBAAgB,uBACpB6J,EAAWrlB,EAAMklB,qBAEvBi/B,EAAgB2C,gCAAgC,CAC5CH,SAAU,CACNhqD,KAAM,QACNkkB,MAAO0jC,EACP70B,OAAQ,GAAGrK,EAASC,WAAWuxB,QAAQthB,IAE3CqxB,aAAc7oD,KAAK8oD,qBAAqBxhC,EAAUkQ,K,YAIlD,YAAAsxB,qBAAR,SACIxhC,EACAkQ,GAEA,IAAM9Q,EAA2C,CAC7C,CACI5D,MAAO9iB,KAAKmlD,eACZxzB,OAAQ,GAAGrK,EAASiT,SAASue,QAAQthB,KAe7C,OAXAlQ,EAASoT,MAAM5nB,SAAQ,SAACg0C,GACpB,OAAApgC,EAAUlY,KAAK,CACXsU,MAAOgkC,EAAInoD,KACXgzB,OAAQ,GAAGm1B,EAAIn1B,OAAOmnB,QAAQthB,IAFlC,IAKJ9Q,EAAUlY,KAAK,CACXsU,MAAO9iB,KAAKqlD,eACZ1zB,OAAQ,GAAGrK,EAAS2S,kBAAkB6e,QAAQthB,KAG3C9Q,CACX,EAEc,YAAAgiC,sBAAd,SAAoCF,G,sHACzB,SAAMxoD,KAAKy2D,2BAA2Bj1B,qBACzCgnB,I,OADJ,MAAO,CAAP,EAAO,U,QAKG,YAAAxB,oBAAd,SACIpzB,EACAgS,G,qGASA,OAPMzmC,EAAO,CACT,iBAAiBymC,EAAMojB,cACvB,sBAAsBp1B,EAAYgM,mBAAmBiP,WACrD,eAAejb,EAAYgM,mBAAmB4mB,UAC9C,cAAcl6B,OAAO28B,SAASC,UAChCtpD,KAAK,KAEA,CAAP,EAAOI,KAAKwsB,eAAe8C,MA7YP65B,EA8YGv1B,EAAYgM,mBAAmBwpB,YA7YvDD,EAAc,sDA8YT,CACI/6B,aAAa,EACbhvB,QAAS,CACLyuB,OAAQ,mBACR,eAAgB,oCAChB,eAAgB,MAEpB1uB,KAAI,KAtZO,IAACgqD,C,QA2ZV,YAAA1B,qBAAd,SACI7hB,EACAwgB,EACAllC,G,kJAEM,EAA6C0kB,EAAMp4B,QAAjDD,EAAK,QAAE87C,EAAc,iBAAE1B,EAAe,kBACxC1lD,EAAQjC,KAAKy2D,2BAA2Bv7C,WACxChU,EAAOjF,EAAMwb,iBACbkpC,EAAmBz/C,EAAKwf,UAAUC,cAAcvmB,OAAS,EACzDoN,EAAmB,CACrB9F,SAAUwZ,EAAcxb,GACxBkuB,YAAa,CACTU,iBAAkB,CACdg1B,gBAAiB,CACbC,aAAch8C,EAAMqmB,YACpB41B,eAAgBj8C,EAAM2T,cACtBuoC,eAAgBl8C,EAAMm8C,0BAMhCC,EACF3pD,KAAK0nD,2BAA2B2B,GAC9BO,EACF5pD,KAAK0nD,2BAA2BC,GAC9BkC,EAAelC,aAAe,EAAfA,EAAiBkC,aAChCtvC,GAAQotC,aAAe,EAAfA,EAAiBxQ,cAAe,G,iBAG1C,O,sBAAA,GAAMn3C,KAAKy2D,2BAA2B3uB,sBAAqB,gCACpD6hB,GAAyB,CAC5B96B,MAAOg7B,EACPtvC,MAAK,M,cAHT,SAMIosC,EACA,GAAM3mD,KAAKy2D,2BAA2B1uB,sBAClC6hB,IAFJ,M,OACA,S,iBAKJ,SAAM5pD,KAAKy2D,2BAA2BxjC,YAAY,CAC9C5L,gBAAgB,K,OAEpB,OAHA,SAGA,GAAMrnB,KAAKy2D,2BAA2B1hC,cAAcvnB,I,OAGpD,OAHA,SACA44C,EAAgB0D,gBAAgB5Z,gBAAgB6Z,gBAEzC,CAAP,EAAO/pD,KAAKklD,wB,OAIZ,M,SAFAkB,EAAgB0D,gBAAgB5Z,gBAAgB8Z,gBAE1C,IAAIjrD,MAAM,2B,yBAIhB,YAAA2oD,2BAAR,SACIuC,GAEA,MAAO,CACHnwC,WAAWmwC,aAAO,EAAPA,EAASC,YAAa,GACjCnwC,UAAUkwC,aAAO,EAAPA,EAASE,aAAc,GACjChwC,MAAM8vC,aAAO,EAAPA,EAASlT,WAAY,GAC3B/8B,QAAS,GACTC,UAAWgwC,aAAO,EAAPA,EAASG,gBAAgBH,aAAO,EAAPA,EAASG,aAAa,KAAO,GACjElwC,UAAW+vC,aAAO,EAAPA,EAASG,gBAAgBH,aAAO,EAAPA,EAASG,aAAa,KAAO,GACjE9vC,YAAY2vC,aAAO,EAAPA,EAAS3vC,aAAc,GACnCD,aAAa4vC,aAAO,EAAPA,EAAS5vC,cAAe,GACrCE,OAAO0vC,aAAO,EAAPA,EAAS9S,cAAe,GAC/B/8B,iBAAiB6vC,aAAO,EAAPA,EAAS/S,qBAAsB,GAChDlhB,qBAAqBi0B,aAAO,EAAPA,EAAS/S,qBAAsB,GACpD18B,aAAc,GAEtB,EACJ,EAvdA,GChBA,GCfW5c,OAAOoV,QDKd,SAAC0jD,GACO,IAAA53C,EAAY43C,EAA0Bx7C,WAAU,QAExD,OAAO,IAAI,IACP,IAAA48B,qBAAoB,CAAE/4B,KAAMD,MAC5B43C,EACA,IAAI,GAEZ,GCbiC,CAAEC,WDe6B,CAC5D,CAAEjxD,GAAI,eEcK,SAASkxD,GACpBn0D,GAEM,MAA0BA,QAAAA,EAAW,CAAC,EAApCsc,EAAI,OAAE,IAAAE,OAAAA,OAAM,IAAG,OAAI,EACrB+L,EAAQd,KACRe,EAAgBF,GAAoBC,GACpC6sB,GAAgB,IAAAC,qBAAoB,CAAE/4B,KAAI,IAC1C83C,GAAa,IAAAC,kBAAiB,CAAE/3C,KAAI,IACpC23C,ECHK,SACX1rC,GAGc,IAAAlM,EACVkM,EAAM9P,WAAU,eAEd28B,GAAgB,IAAAC,qBAAoB,CAAE/4B,KAAMD,MAE5Ci4C,EAAyB,IAAI,GAC/B9vB,IAGE+vB,EAAwB,IAAI,GAC9B,IAAI,GAAsBnf,GAC1B,IAAI,GAAoB,IAAI,GAAoBA,IAChD,IAAI,GAAwB,IAAI,GAAwBA,KAGtDof,EAAqB,IAAI,GAC3B,IAAI,GAAmBpf,GACvB,IAAI,GAAkB,IAAI,GAAsBA,KAG9Cqf,EAA8B,IAAI,GACpC,IAAI,GAA4Brf,GAChC,IAAI,GACA,IAAI,GAA2BA,KAIjCsf,EAA2B,IAAI,GACjC,IAAI,GAAyBtf,GAC7B,IAAI,GAAsBA,IAGxBuf,EAA6B,IAAI,GACnC,IAAI,GAA2Bvf,IAG7Bwf,EAAuB,IAAI,GAC7B,IAAI,GAAqBtsC,GAAoBC,IAC7CisC,EACA,IAAI,GACJ,IAAI,GACAzwB,IAAqB,KAAA8wB,yBAI7B,OAAO,IAAI,GACPtsC,EACA+rC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAER,CDxDsCE,CAAgCvsC,GAC5DwsC,EE9BK,SACXd,EACAe,QAAA,IAAAA,IAAAA,EAAA,GAOA,IALA,IAAMC,EAAW,IAAI,G,WAKPC,GAGV,ICzBO,SACXx6D,GAEA,MAAO,eAAgBA,CAC3B,CDsBay6D,CAGCD,G,iBAKN,IAAyB,UAAAA,EAA6BhB,WAA7B,eAAyC,CAA7D,IAAMN,EAAU,KACjBqB,EAASz3D,SAASo2D,GAAY,WAC1B,OAAAsB,EAA6BjB,EAA7B,G,GAdmC,MAAA94D,OAAO24D,QAClDkB,GAD2C,e,EAApC,KAA+B,IAmB1C,OAAOC,CACX,CFCuB,CAA+BhB,GAElD,OAAO,IAAI,GACP1rC,EACA,IAAI,GIjBG,SACXA,EACAC,EACA4sB,EACAgf,EACA53C,EACAF,GAEA,IAAM24C,EAAW,IAAI,GACfjxB,GAAe,KAAAsR,mBACfif,EAAwB,IAAI,GAC9B,IAAI,GAAsBnf,GAC1B,IAAI,GAAoB,IAAI,GAAoBA,IAChD,IAAI,GAAwB,IAAI,GAAwBA,KAEtDggB,EAAwB,IAAI,GAAsBhgB,GAClDuf,EAA6B,IAAI,GAA2B,IAAI,GAA2Bvf,IAC3FigB,EAA8B,IAAI,GAA4BjgB,GAC9DkgB,EAA8B,IAAI,GAA4BD,EAA6Bd,GAC3FgB,EAAoB,IAAI,GAAkBH,GAC1CZ,EAAqB,IAAI,GAAmB,IAAI,GAAmBpf,GAAgBmgB,GACnFC,EAAuB,IAAI,GAAqBhtC,GAChDitC,EAA4B,IAAI,GAChCC,EAAkC,IAAI,GAAgC3xB,IAAqB,KAAA8wB,wBAC3FD,EAAuB,IAAI,GAAqBY,EAAsBhB,EAAoBiB,EAA2BC,GACrHC,EAAsB,IAAI,GAAoB,IAAI,GAAsB3xB,IACxE4xB,ECjDK,SACX5xB,EACAoR,EACA7sB,EACAisC,EACAI,GAEA,IAAMiB,EAAqB,IAAI,GAA2B7xB,GACpD8xB,EAA8B,IAAI,GAA4B1gB,GAEpE,OAAO,IAAI,GACPygB,EACAC,EACAvtC,EACAisC,EACAI,EAER,CDgC2CmB,CAAqC/xB,EAAcoR,EAAe7sB,EAAOisC,EAAoBI,GAC9HiB,EAAqB,IAAI,GAA2B7xB,GACpD8xB,EAA8B,IAAI,GAA4B1gB,GAoOpE,OAlOA6f,EAASz3D,SAAS,aAAmC,WACjD,WAAI,GACA+qB,EACAgsC,EACAnf,EACAuf,EACA,IAAI,GACA,IAAI,GAAyBvf,GAC7B,IAAI,GAAsBA,IAE9B,IAAI,GACA,IAAI,GAA4BA,GAChC,IAAI,GACA,IAAI,GAA2BA,KAGvC,IAAI,GACA,IAAI,GAAqB5sB,GACzB,IAAI,GACA,IAAI,GAAmB4sB,GACvB,IAAI,GAAkBggB,IAE1B,IAAI,GACJ,IAAI,GAAgCrxB,IAAqB,KAAA8wB,yBAE7DS,EACA,IAAI,GACA,IAAI,GAAmBlgB,GACvB,IAAI,GAAkBggB,IAE1B,IAAI,GA7BR,IAiCJH,EAASz3D,SAAS,kBAAwC,WACtD,WAAI,GACA+qB,EACAgsC,EE7FD,IAAI,GACP,IAAI,IAAwB,KAAAjf,qBF0F5B,IAOJ2f,EAASz3D,SAAS,qBAA2C,WACzD,WAAI,GACA+qB,EACAgsC,EACAoB,EACAvB,EACAvqC,OALJ,IASJorC,EAASz3D,SAAS,4BAAkD,WAChE,WAAI,GACA+qB,EACAgsC,EACAoB,EACAvB,EACAvqC,OALJ,IASJorC,EAASz3D,SAAS,oBAA0C,WACxD,WAAI,GACA+qB,EACAosC,EACAgB,EACAvB,EAJJ,IAQJa,EAASz3D,SAAS,sBAA4C,WAC1D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,sBAA4C,WAC1D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,2BAAiD,WAC/D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,wBAA8C,WAC5D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,GAA8BotC,IAN1C,IAWJV,EAASz3D,SAAS,0BAAgD,WAC9D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,GAAgC6sB,IAN5C,IAWJ6f,EAASz3D,SAAS,4BAAkD,WAChE,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,sBAA4C,WAC1D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,qBAA2C,WACzD,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,wBAA8C,WAC5D,WAAI,GACA+qB,EACA6rC,EACAG,EACArf,GACI3sB,EACA,IAAI,IANZ,IAWJ0sC,EAASz3D,SAAS,eAAqC,WACnD,WAAI,GACA+qB,EACAgsC,EACA,IAAI,GAAuBvwB,GAC3BxnB,EAJJ,IAOJy4C,EAASz3D,SAAS,kBAAwC,WACtD,WAAI,GACA+qB,EACAgsC,EACA,IAAI,GAAmBvwB,GACvBowB,EACA93C,EALJ,IASJ24C,EAASz3D,SAAS,mBAAyC,WACvD,WAAI,GACA+qB,EACAgsC,EACAH,EACAwB,EAJJ,IAQJX,EAASz3D,SAAS,wBAA8C,WAC5D,WAAI,GACA+qB,EACAgsC,EACAH,EACAyB,EACAC,EALJ,IASJb,EAASz3D,SAAS,yBAA+C,WAC7D,WAAI,GACA+qB,EACAgsC,EACAH,EACAyB,EACAC,EALJ,IASGb,CACX,CJ/OYe,CAA6BztC,EAAOC,EAAe4sB,EAAegf,EAAY53C,EAAQF,GACtFy4C,EACA,IAAI,GAA2B,IAAI,GAA2B3f,KAG1E,C","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/apple-pay/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/create-paypal-commerce-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadFormFieldsAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && Object.prototype.hasOwnProperty.call(object, key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction |\n    CreateCustomerAddressAction |\n    CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    CreateCustomerRequestedAction |\n    CreateCustomerSucceededAction |\n    CreateCustomerFailedAction |\n    SpamProtectionAction |\n    LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    CreateCustomerAddressRequestedAction |\n    CreateCustomerAddressSucceededAction |\n    CreateCustomerAddressFailedAction |\n    LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyExecutePaymentMethodCheckoutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    ExecutePaymentMethodCheckoutRequestedAction |\n    ExecutePaymentMethodCheckoutSucceededAction |\n    ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport { CustomerAction, CustomerActionType } from './customer-actions';\nimport CustomerState, { CustomerErrorsState, CustomerStatusesState, DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | CustomerAction | ContinueAsGuestAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerErrorsState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case CustomerActionType.CreateCustomerFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(errors, 'createAddressError', undefined);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n        return objectSet(errors, 'createAddressError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerStatusesState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case CustomerActionType.CreateCustomerFailed:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(statuses, 'isCreating', false);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n        return objectSet(statuses, 'isCreatingAddress', true);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(statuses, 'isCreatingAddress', false);\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    LoadFormFieldsRequestedAction |\n    LoadFormFieldsSucceededAction |\n    LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n        return objectMerge(errors, {\n            executePaymentMethodCheckoutError: undefined,\n            executePaymentMethodCheckoutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        return objectMerge(errors, {\n            executePaymentMethodCheckoutError: action.payload,\n            executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        return objectMerge(statuses, {\n            isExecutingPaymentMethodCheckout: true,\n            executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n        return objectMerge(statuses, {\n            isExecutingPaymentMethodCheckout: false,\n            executePaymentMethodCheckoutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, { DEFAULT_STATE, FormFieldsErrorState, FormFieldsStatusesState } from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction\n): FormFields | undefined {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction\n): FormFieldsErrorState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction\n): FormFieldsStatusesState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = ForgetCheckoutRemoteCustomerAction |\n    InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction = ForgetCheckoutRemoteCustomerRequestedAction |\n    ForgetCheckoutRemoteCustomerSucceededAction |\n    ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    PickupOptionRequestedAction |\n    LoadPickupOptionsSucceededAction |\n    LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [ key: string ]: any },\n    parent?: string\n): { [ key: string ]: any } {\n    const flattened: {[key: string]: any} = {};\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? parent + '.' + key : key;\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(\n    object: { [ key: string ]: any }\n) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce((previous, current) => ({\n        ...previous,\n        [current]: object[current],\n    }), {});\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, { DEFAULT_STATE, PickupOptionErrorsState, PickupOptionStatusesState } from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString , action.payload);\n            }\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: PickupOptionErrorsState = DEFAULT_STATE.errors,\n    action: Action\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    CheckoutVerifyRequestedAction |\n    CheckoutVerifyFailedAction |\n    CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.VerifyCheckoutSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCustomer:\n        return 'Unable to proceed because customer data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createPickupOptionSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    const getCustomerOrThrow = createSelector(\n        getCustomer,\n        getCustomer => () => {\n            return guard(getCustomer(), () => new MissingDataError(MissingDataErrorType.MissingCustomer));\n        }\n    );\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        status => () => status\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            const shippingConsignment = consignments?.find(consignment => !consignment.selectedPickupOption);\n\n            return shippingConsignment?.shippingAddress;\n        }\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        getShippingAddress => () => {\n            return guard(getShippingAddress(), () => new MissingDataError(MissingDataErrorType.MissingShippingAddress));\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentIdOrThrow = createSelector(\n        getPaymentId,\n        getPaymentId => () => {\n            return guard(getPaymentId(), () => new MissingDataError(MissingDataErrorType.MissingPaymentId));\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentStatusOrThrow = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => () => {\n            return guard(getPaymentStatus(), () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus));\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentTokenOrThrow = createSelector(\n        getPaymentToken,\n        getPaymentToken => () => {\n            return guard(getPaymentToken(), () => new MissingDataError(MissingDataErrorType.MissingPaymentToken));\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrl => () => {\n            return guard(getPaymentRedirectUrl(), () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl));\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () => data && formFields ? ({\n            ...data.storeConfig,\n            formFields,\n        }) : undefined\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        data => () => data\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE,\n        formState: FormFieldsState\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state, { formState }),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getHost: getHost(state),\n            getLocale: getLocale(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) => (methodId?: string) => {\n            if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                return;\n            }\n\n            return executePaymentMethodCheckoutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) => (methodId?: string) => {\n            if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecutingPaymentMethodCheckout;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments?.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        getCardInstrument => (instrumentId: string) => {\n            return guard(getCardInstrument(instrumentId), () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument));\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.shippingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.billingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => () => formFields ? formFields.customerAccount : []\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: FormFieldsState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(consignmentId: string, searchArea: SearchArea): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        pickupOptions => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: PickupOptionState = DEFAULT_STATE\n    ): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentsOrThrow = createSelector(\n        getConsignments,\n        getConsignments => () => {\n            return guard(getConsignments(), () => new MissingDataError(MissingDataErrorType.MissingConsignments));\n        }\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) => (methodId: string) => {\n            const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n            return currentPayment?.paymentId;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            getPaymentId: getPaymentId(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        Object.prototype.hasOwnProperty.call(object, key)\n    );\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, pickupOptionReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" /> \nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { PaymentMethod } from '.';\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            const state = store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods({ ...options, params: { ...options?.params, cartId: cart.id } })\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n                    const methods = response.body;\n                    const filteredMethods = Array.isArray(methods) ? this._filterApplePay(methods) : methods;\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, filteredMethods, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            const state = store.getState();\n            const cartId = state.cart.getCart()?.id;\n            const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, { ...options, params })\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n\n        return filter(methods, method => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout, params }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true, params: {...options?.params, checkoutId: id} }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig(),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true })\n            ),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(\n        previous: ComparableCheckout,\n        updated: ComparableCheckout\n    ) {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\nexport type ComparableCheckout = Pick<Checkout, 'outstandingBalance' | 'coupons' | 'giftCertificates'>\n    & {\n        cart: Partial<Cart>;\n    };\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError(\n                    this._getComparableCheckout(checkout),\n                    this._getComparableCheckout(response.body)\n                );\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(\n        checkout: Checkout\n    ): ComparableCheckout  {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get<Config>(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n            throw error;\n        });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(\n        private _formFieldsRequestSender: FormFieldsRequestSender\n    ) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            })\n        ).pipe(\n            catchError(response => throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload?: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(\n                            this._mapToOrderRequestBody(\n                                payload ?? {},\n                                checkout.id,\n                                checkout.customerMessage,\n                                externalSource\n                            ),\n                            {\n                                ...options,\n                                headers: {\n                                    checkoutVariant: variantIdentificationToken,\n                                },\n                            }))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { joinIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body?: InternalOrderRequestBody, { headers, timeout }: SubmitOrderRequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post<InternalOrderResponseBody>(url, {\n            body,\n            headers: omitBy({\n                'X-Checkout-Variant': headers && headers.checkoutVariant,\n                ...SDK_VERSION_HEADERS,\n            }, isNil),\n            timeout,\n        }).catch(error => {\n            if (error.body.type === 'tax_provider_unavailable') {\n                throw new OrderTaxProviderUnavailableError();\n            }\n\n            throw error;\n        });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (settings: InitializeOffsitePaymentSettings)\n    => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            defer(async () => {\n                try {\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform(payment, store.getState())\n                    );\n                } catch (error) {\n                    const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform({ ...payment, additionalAction }, store.getState())\n                    );\n                }\n            })\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race([this._paymentRequestSender.initializeOffsitePayment(payload, target), promise].filter(Boolean))\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\",\n    PAYPALCOMMERCE = \"paypalcommerce\",\n    PAYPALCOMMERCE_APMS = \"paypalcommercealternativemethods\",\n    PAYPALCOMMERCE_VENMO = \"paypalcommercevenmo\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress, Address } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { HostedCreditCardInstrument, HostedVaultedInstrument, PaymentInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData, nonce: string): PaymentRequestBody {\n        const { additionalAction, authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string\n    ): PaymentInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                hostedFormNonce: nonce,\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                hostedFormNonce: nonce,\n            };\n    }\n\n    private _mapShippingAddress(checkoutState: InternalCheckoutSelectors, paymentMethod?: PaymentMethod): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every(consignment => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentBaseRequestBodyWithAddress, ConsignmentAssignmentBaseRequestBodyWithShippingAddress, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment) ? consignment.address : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                address,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment) ? consignment.address : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                address,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment: ConsignmentAssignmentBaseRequestBodyWithAddress | ConsignmentAssignmentBaseRequestBodyWithShippingAddress\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport { CardingProtectionChallengeNotCompletedError, CardingProtectionFailedError, SpamProtectionChallengeNotCompletedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(error: Error): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(id: string, key?: string): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha.execute()\n            .pipe(take(1))\n            .pipe(switchMap(async ({ error, token }) => {\n                if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                    throw new CardingProtectionChallengeNotCompletedError();\n                }\n\n                if (error || !token) {\n                    throw new CardingProtectionFailedError();\n                }\n\n                return {\n                    type: 'recaptcha_v2_verification',\n                    data: {\n                        human_verification_token: token,\n                    },\n                };\n            })).toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return status === 'additional_action_required'\n            && additional_action_required\n            && additional_action_required.type === 'recaptcha_v2_verification';\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            this._widgetId = recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(this._widgetId),\n                    });\n                    recaptcha.reset(this._widgetId);\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                if (recaptcha) {\n                    this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n                    this._recaptcha = recaptcha;\n                }\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            })\n                .pipe(\n                    retryWhen(errors => errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error)\n                        )\n                    )),\n                    switchMap(element => {\n                        this._watchRecaptchaChallengeWindow(event$, element);\n                        recaptcha.execute(this._widgetId);\n\n                        return event$;\n                    }),\n                    catchError(error => of({ error }))\n                );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { cloneResult as clone } from \"../common/utility\";\nimport { InternalCheckoutSelectors } from \"../checkout\";\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: { getShippingAddress, getShippingAddressOrThrow },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    PaymentIntegrationService,\n    PaymentIntegrationSelectors,\n    BillingAddressRequestBody,\n    OrderRequestBody,\n    Payment,\n    ShippingAddressRequestBody,\n    RequestOptions,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { BillingAddressActionCreator } from \"../billing\";\nimport { CheckoutStore, CheckoutActionCreator } from \"../checkout\";\nimport { DataStoreProjection } from \"../common/data-store\";\nimport { OrderActionCreator } from \"../order\";\nimport PaymentActionCreator from \"../payment/payment-action-creator\";\nimport PaymentMethodActionCreator from \"../payment/payment-method-action-creator\";\nimport { ConsignmentActionCreator } from \"../shipping\";\n\nimport PaymentIntegrationStoreProjectionFactory from \"./payment-integration-store-projection-factory\";\n\nexport default class DefaultPaymentIntegrationService\n    implements PaymentIntegrationService\n{\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(\n            this._store\n        );\n    }\n\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._checkoutActionCreator.loadCurrentCheckout()\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._checkoutActionCreator.loadDefaultCheckout()\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder(payload)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(\n        payment: Payment\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment(payment)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(payload)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(payload)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options)\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { createAction, createDataStore, Action, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from \"../checkout\";\nimport {\n    DataStoreProjection,\n    createDataStoreProjection,\n} from \"../common/data-store\";\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors\n        ) => PaymentIntegrationSelectors\n    ) {}\n\n    create(\n        store: ReadableCheckoutStore\n    ): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from \"@bigcommerce/data-store\";\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { concat, defer, empty, of } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\nimport { InternalCheckoutSelectors } from \"../checkout\";\nimport { throwErrorAction } from \"../common/error\";\nimport { Registry } from \"../common/registry\";\nimport { PaymentMethodActionCreator } from \"../payment\";\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from \"./checkout-button-actions\";\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonOptions,\n} from \"./checkout-button-options\";\nimport CheckoutButtonRegistryV2 from \"./checkout-button-strategy-registry-v2\";\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from \"./strategies\";\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store\n                    .getState()\n                    .checkoutButton.isInitialized(\n                        options.methodId,\n                        options.containerId\n                    )\n            ) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta\n                    )\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    { timeout: options.timeout, useCache: true }\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta\n                            )\n                        )\n                )\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.InitializeButtonFailed,\n                        error,\n                        meta\n                    )\n                )\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (\n                !store.getState().checkoutButton.isInitialized(options.methodId)\n            ) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta\n                    )\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta\n                            )\n                        )\n                )\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta\n                    )\n                )\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(\n        options?: RegistryOptions\n    ) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? (token => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(\n                this._defaultToken,\n                cacheToken || this._defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): HTMLElement;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\ninterface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ButtonColor, AmazonPayV2ChangeActionType, AmazonPayV2PayOptions, AmazonPayV2Placement, AmazonPayV2SDK, AmazonPayV2ButtonParameters } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): HTMLElement {\n        return this._getAmazonPayV2SDK().Pay.renderButton(`#${containerId}`, options);\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton(\n        containerId: string,\n        checkoutState: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        options?: AmazonPayV2ButtonParameters\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to render the Amazon Pay button to an invalid HTML container element.');\n        }\n\n        const amazonPayV2ButtonOptions = options ?? this._getAmazonPayV2ButtonOptions(checkoutState, methodId, placement);\n\n        this.createButton(containerId, amazonPayV2ButtonOptions);\n\n        return container;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            paymentMethods: { getPaymentMethodOrThrow },\n            config: { getStoreConfigOrThrow },\n            cart: { getCart },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n                publicKeyId,\n                createCheckoutSessionConfig,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath },\n        } = getStoreConfigOrThrow();\n\n        const cart = getCart();\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement,\n            buttonColor: AmazonPayV2ButtonColor.Gold,\n        };\n\n        if (features['PROJECT-3483.amazon_pay_ph4']) {\n            return /^(SANDBOX|LIVE)/.test(publicKeyId)\n                ? {\n                      ...buttonBaseConfig,\n                      publicKeyId,\n                      createCheckoutSessionConfig,\n                  }\n                : {\n                      ...buttonBaseConfig,\n                      sandbox: !!testMode,\n                      createCheckoutSessionConfig: {\n                          ...createCheckoutSessionConfig,\n                          publicKeyId,\n                      },\n                  };\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { assertApplePayWindow } from './is-apple-pay-window';\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { GooglePaymentData, GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1, GooglePayCreator, TokenizePayload } from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport { VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<TInstance, TOptions = BraintreeModuleCreatorConfig, TError = BraintreeError> {\n    create(config: TOptions, callback?: (error: TError, instance: TInstance) => void): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<BraintreeDataCollector, BraintreeDataCollectorCreatorConfig>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(request?: GooglePayBraintreeDataRequest): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(options?: BraintreeHostedFieldsTokenizeOptions): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<BraintreeThreeDSecure, BraintreeThreeDSecureCreatorConfig>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(config: BraintreePaypalSdkCreatorConfig, callback: (instance: BraintreePaypalCheckout) => void): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<BraintreeVenmoCheckout, BraintreeVenmoCreatorConfig>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import { NotInitializedError, NotInitializedErrorType, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeError, BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVenmoCheckout, BraintreeVisaCheckout, GooglePayBraintreeSDK, PAYPAL_COMPONENTS } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n                .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: { currency: string },\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (error: BraintreeError, braintreePaypalCheckout: BraintreePaypalCheckout) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                components: PAYPAL_COMPONENTS.toString(),\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n                .then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2}));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n                .catch(error => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n                .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVenmoCheckoutCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(`//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`);\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, BraintreeVerifyPayload, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string, customerEmail?: string): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 =  paymentData.paymentMethodData.info.billingAddress.address1;\n        const city =  paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode =  paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode =  paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id, remoteBillingAddress.email);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'cybersource',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'chase',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n            consignments,\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments?.every(consignment => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                ? false\n                : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!payload.id || !payload.type || !payload.card || !payload.card.brand || !payload.card.last4) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode, decimalPlaces: decimalPlaces },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, decimalPlaces).toFixed(decimalPlaces),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n  }\nexport default class MasterpassScriptLoader {\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    async load({ useMasterpassSrc, language, testMode, checkoutId }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [\n                `locale=${language}`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            const sourceUrl = [\n               `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n               params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n\n        }\n\n        await this._scriptLoader.loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`);\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { FundingType, PaypalCommerceHostWindow, PaypalCommerceInitializationData, PaypalCommerceScriptParams, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currency: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        const paypalSdkScriptConfig = this._getPayPalSdkScriptConfigOrThrow(paymentMethod, currency, initializesOnCheckoutPage);\n\n        if (!this._window.paypalLoadScript) {\n            const PAYPAL_SDK_VERSION = '5.0.5';\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    private _getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currency: string,\n        initializesOnCheckoutPage = true,\n    ): PaypalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit = shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = !shouldShowInlineCheckout && !isHostedCheckoutEnabled; // should disable APMs if Inline Checkout or Shipping Options feature enabled\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter((apm: string) => !enabledAlternativePaymentMethods.includes(apm))\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [...disableCardFunding, ...disableCreditFunding, ...disableVenmoFunding, ...disableAPMsFunding];\n        const enableFunding: FundingType = [...enableCardFunding, ...enableCreditFunding, ...enableVenmoFunding, ...enableAPMsFunding];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency,\n            intent,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport { OrderData, OrderStatus } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n    isVenmo?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    // TODO: this method should be removed when provider will be passed as an argument\n    // (to prevent containing unnecessary provider detecting logic inside)\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM, isVenmo} = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n        if (isVenmo && !isAPM) {\n            provider = isCheckout ? 'paypalcommercevenmocheckout' : 'paypalcommercevenmo';\n        }\n\n        if (isAPM) {\n            provider = isCheckout ? 'paypalcommercealternativemethodscheckout' : 'paypalcommercealternativemethod';\n        }\n\n        return this.createOrder(cartId, provider);\n    }\n\n    async createOrder(cartId: string, providerId: string): Promise<OrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post<OrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, {headers});\n\n        return res.body;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    ADYENV3 = 'adyenv3',\n    ADYENV3_GOOGLEPAY = 'googlepayadyenv3',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAYV2 = 'amazonpay',\n    APPLEPAY = 'applepay',\n    BARCLAYS = 'barclays',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CBA_MPGS = 'cba_mpgs',\n    CHECKOUTCOM = 'checkoutcom',\n    CHECKOUTCOM_APM = 'checkoutcomapm',\n    CHECKOUTCOM_FAWRY = 'checkoutcomfawry',\n    CHECKOUTCOM_SEPA = 'checkoutcomsepa',\n    CHECKOUTCOM_IDEAL = 'checkoutcomideal',\n    CREDIT_CARD = 'creditcard',\n    CHECKOUTCOM_GOOGLE_PAY = 'googlepaycheckoutcom',\n    CLEARPAY = 'clearpay',\n    CONVERGE = 'converge',\n    CYBERSOURCE = 'cybersource',\n    CYBERSOURCEV2 = 'cybersourcev2',\n    DIGITALRIVER = 'digitalriver',\n    CYBERSOURCEV2_GOOGLE_PAY = 'googlepaycybersourcev2',\n    HUMM = 'humm',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LAYBUY = 'laybuy',\n    LEGACY = 'legacy',\n    MOLLIE = 'mollie',\n    MONERIS = 'moneris',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    OPY = 'opy',\n    ORBITAL_GOOGLE_PAY = 'googlepayorbital',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    PAYPAL_COMMERCE_CREDIT_CARD = 'paypalcommercecreditcards',\n    PAYPAL_COMMERCE_ALTERNATIVE_METHODS = 'paypalcommercealternativemethods',\n    PAYPAL_COMMERCE_VENMO = 'paypalcommercevenmo',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n    QUADPAY = 'quadpay',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    STRIPE_UPE = 'stripeupe',\n    STRIPE_UPE_GOOGLE_PAY = 'googlepaystripeupe',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_VENMO = 'braintreevenmo',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    WORLDPAYACCESS = 'worldpayaccess',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    SEZZLE = 'sezzle',\n    ZIP = 'zip',\n}\n\nexport default PaymentStrategyType;\n","\nexport interface ApproveDataOptions {\n    orderID?: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string | void>; // TODO: this method should return only Promise<void>\n    onApprove?(data: ApproveDataOptions): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    OXXO: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport const NON_INSTANT_PAYMENT_METHODS = ['oxxo'];\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions): PaypalCommerceButtons;\n    PaymentFields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\nexport type EnableFundingType =  FundingType | string;\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: 'capture' | 'authorize';\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\nexport type ComponentsScriptType = Array<'buttons' | 'messages' | 'hosted-fields' | 'payment-fields'>;\n\nexport interface PaypalCommerceScriptParams  {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    components?: ComponentsScriptType;\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentMethod } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentStrategyType from '../../payment-strategy-type';\n\nimport { ButtonsOptions, FieldsOptions, NON_INSTANT_PAYMENT_METHODS, ParamsForProvider, PaypalButtonStyleOptions, PaypalCommerceButtons, PaypalCommerceFields, PaypalCommerceHostedFields, PaypalCommerceHostedFieldsApprove, PaypalCommerceHostedFieldsRenderOptions, PaypalCommerceHostedFieldsState, PaypalCommerceHostedFieldsSubmitOptions, PaypalCommerceInitializationData, PaypalCommerceMessages, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK, PaypalCommerceSDKFunding, PaypalFieldsStyleOptions, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape } from './index';\n\nexport interface OptionalParamsRenderButtons {\n    paramsForProvider?: ParamsForProvider;\n    fundingKey?: keyof PaypalCommerceSDKFunding;\n    onRenderButton?(): void;\n}\n\nexport interface ParamsRenderHostedFields {\n    fields: PaypalCommerceHostedFieldsRenderOptions['fields'];\n    styles?: PaypalCommerceHostedFieldsRenderOptions['styles'];\n}\n\ninterface EventsHostedFields {\n    blur?(event: PaypalCommerceHostedFieldsState): void;\n    focus?(event: PaypalCommerceHostedFieldsState): void;\n    cardTypeChange?(event: PaypalCommerceHostedFieldsState): void;\n    validityChange?(event: PaypalCommerceHostedFieldsState): void;\n    inputSubmitRequest?(event: PaypalCommerceHostedFieldsState): void;\n}\n\nexport interface RenderApmFieldsParams {\n    apmFieldsContainer: string;\n    fundingKey: keyof PaypalCommerceSDKFunding;\n    apmFieldsStyles?: PaypalFieldsStyleOptions;\n    fullName?: string;\n    email?: string;\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _paypal?: PaypalCommerceSDK;\n    private _paypalButtons?: PaypalCommerceButtons;\n    private _paypalFields?: PaypalCommerceFields;\n    private _paypalMessages?: PaypalCommerceMessages;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _fundingSource?: string;\n    private _orderId?: string;\n    private _gatewayId?: string;\n    private _isVenmoEnabled?: boolean;\n\n    constructor(\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async initialize(paymentMethod: PaymentMethod<PaypalCommerceInitializationData>, currencyCode: string, initializesOnCheckoutPage?: boolean): Promise<PaypalCommerceSDK> {\n        this._paypal = await this._paypalScriptLoader.loadPaypalCommerce(paymentMethod, currencyCode, initializesOnCheckoutPage);\n        this._gatewayId = paymentMethod.gateway;\n        this._isVenmoEnabled = paymentMethod.initializationData?.isVenmoEnabled;\n\n        return this._paypal;\n    }\n\n    renderButtons(cartId: string, container: string, params: ButtonsOptions = {}, optionalParams: OptionalParamsRenderButtons = {}): PaypalCommerceButtons {\n        if (!this._paypal || !this._paypal.Buttons) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { paramsForProvider, fundingKey, onRenderButton } = optionalParams;\n\n        const buttonParams: ButtonsOptions = {\n            ...params,\n            createOrder: () => this._setupPayment(cartId, paramsForProvider),\n\n            onClick: async (data, actions) => {\n                this._fundingSource = data.fundingSource;\n\n                return params.onClick?.(data, actions);\n            },\n        };\n\n        if (params.style) {\n            buttonParams.style = this._validateStyleParams(params.style);\n        }\n\n        if (fundingKey) {\n            this._fundingSource = this._paypal.FUNDING[fundingKey];\n            buttonParams.fundingSource = this._fundingSource;\n        }\n\n        this._paypalButtons = this._paypal.Buttons(buttonParams);\n\n        if (!this._paypalButtons.isEligible()) {\n            this._processNotEligible(buttonParams, fundingKey);\n        }\n\n        onRenderButton?.();\n\n        this._paypalButtons.render(container);\n\n        return this._paypalButtons;\n    }\n\n    renderFields({\n        apmFieldsContainer,\n        fundingKey,\n        apmFieldsStyles,\n        fullName,\n        email,\n    }: RenderApmFieldsParams): PaypalCommerceFields {\n        if (!this._paypal || !this._paypal.PaymentFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const fieldsParams: FieldsOptions = {\n            fundingSource: this._paypal.FUNDING[fundingKey],\n            style: apmFieldsStyles,\n            fields: {\n                name: {\n                    value: fullName,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        this._paypalFields = this._paypal.PaymentFields(fieldsParams);\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        this._paypalFields.render(apmFieldsContainer);\n\n        return this._paypalFields;\n    }\n\n    getOrderId() {\n        return this._orderId;\n    }\n\n    renderMessages(cartTotal: number, container: string): PaypalCommerceMessages {\n        if (!this._paypal || !this._paypal.Messages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n        this._paypalMessages = this._paypal.Messages({\n            amount: cartTotal,\n            placement: 'cart',\n            style: {\n                layout: 'text',\n            },\n        });\n        this._paypalMessages.render(container);\n\n        return this._paypalMessages;\n    }\n\n    async renderHostedFields(cartId: string, params: ParamsRenderHostedFields, events?: EventsHostedFields): Promise<void> {\n        if (!this._paypal || !this._paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { fields, styles } = params;\n\n        if (!this._paypal.HostedFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._hostedFields = await this._paypal.HostedFields.render({\n            fields,\n            styles,\n            paymentsSDK: true,\n            createOrder: () => this._setupPayment(cartId, { isCreditCard: true }),\n        });\n\n        if (events) {\n            (Object.keys(events) as Array<keyof EventsHostedFields>).forEach(key => {\n                (this._hostedFields as PaypalCommerceHostedFields).on(key, events[key] as (event: PaypalCommerceHostedFieldsState) => void);\n            });\n        }\n    }\n\n    async submitHostedFields(options?: PaypalCommerceHostedFieldsSubmitOptions): Promise<PaypalCommerceHostedFieldsApprove> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit(omitBy(options, isNil));\n    }\n\n    getHostedFieldsValidationState(): { isValid: boolean; fields: PaypalCommerceHostedFieldsState['fields'] } {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { fields } = this._hostedFields.getState();\n\n        const isValid = (Object.keys(fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>)\n            .every(key => fields[key]?.isValid);\n\n        return { isValid, fields };\n    }\n\n    deinitialize() {\n        this._paypalButtons?.close?.();\n        this._paypal = undefined;\n        this._paypalButtons = undefined;\n        this._fundingSource = undefined;\n        this._hostedFields = undefined;\n    }\n\n    private async _setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<string> {\n        const paramsForProvider = { ...params, isCredit: this._fundingSource === 'credit' || this._fundingSource === 'paylater' };\n        const isAPM = this._gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS;\n        const isVenmo = this._fundingSource === 'venmo' && this._isVenmoEnabled;\n\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(cartId, {...paramsForProvider, isAPM, isVenmo});\n        this._orderId = orderId;\n        const methodId = this._fundingSource;\n\n        if (methodId && NON_INSTANT_PAYMENT_METHODS.indexOf(methodId) > -1) {\n            await this._patchNonInstantPaymentMethods(methodId);\n        }\n\n        return orderId;\n    }\n\n    private async _patchNonInstantPaymentMethods(methodId: string): Promise<InternalCheckoutSelectors> {\n        const gatewayId = this._gatewayId;\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: this._orderId,\n                },\n            },\n        };\n\n        const order = { useStoreCredit: false };\n        const paymentRequestOptions = {\n            gatewayId,\n            methodId,\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(\n            order,\n            { params: paymentRequestOptions }\n        ));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment({\n            gatewayId,\n            methodId,\n            paymentData,\n        }));\n    }\n\n    private _validateStyleParams = (style: PaypalButtonStyleOptions): PaypalButtonStyleOptions  => {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    };\n\n    private _processNotEligible(buttonParams: ButtonsOptions, fundingKey?: keyof PaypalCommerceSDKFunding): void {\n        if (fundingKey?.toUpperCase() === this._paypal?.FUNDING.PAYLATER.toUpperCase()) {\n            buttonParams.fundingSource = this._paypal?.FUNDING.CREDIT;\n\n            this._paypalButtons = this._paypal?.Buttons(buttonParams);\n\n            if (this._paypalButtons?.isEligible()) {\n                return;\n            }\n        }\n\n        throw new NotImplementedError(`PayPal ${this._fundingSource || ''} is not available for your region. Please use PayPal Checkout instead.`);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(createAction(RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested, undefined, {methodId})),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded, undefined, {methodId});\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed, error, { methodId }))\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { AmazonPayV2PaymentProcessor, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError('Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.');\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._walletButton = this._amazonPayV2PaymentProcessor.renderAmazonPayButton(\n            containerId,\n            this._store.getState(),\n            methodId,\n            AmazonPayV2Placement.Cart,\n            amazonpay\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport { Payment, PaymentActionCreator, PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport { assertApplePayWindow, ApplePaySessionFactory } from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) => `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n\n        const { methodId, containerId , applepay}  = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            buttonClassName,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, buttonClassName = 'apple-pay-checkout-button'): HTMLElement {\n        const container = document.getElementById(containerId);\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create wallet button without valid container ID.');\n        }\n\n        document.body.classList.add('apple-pay-supported');\n        const button = document.createElement('div');\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const { storeProfile: { storeCountryCode, storeName } } = config;\n        const { currency: { code, decimalPlaces} } = cart;\n\n        const { initializationData : { merchantCapabilities, supportedNetworks } } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping ? {\n            label: storeName,\n            amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            type: 'pending',\n        } : {\n            label: storeName,\n            amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            type: 'final',\n        };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}`},\n            ];\n\n            checkout.taxes.forEach(tax =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }));\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig\n    ) {\n        applePaySession.onvalidatemerchant = async event => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(paymentMethod, event);\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async event =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async event =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(this._remoteCheckoutActionCreator.signOut(paymentMethod.id));\n\n                return this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async event =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress)\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const { storeProfile: { storeName } } = config;\n        let state = this._store.getState();\n        const { currency: { decimalPlaces } } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({id}) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(option => option.id !== selectionShippingOptionId);\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption ? [{\n            label: selectedOption.description,\n            amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n            detail: selectedOption.additionalDescription,\n            identifier: selectedOption.id,\n        }] : [];\n        unselectedOptions?.forEach(option => shippingOptions.push(\n            {\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }\n        ));\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                []\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find(\n            option => option.isRecommended\n        );\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent\n    ) {\n        const { storeProfile: { storeName } } = config;\n        const { shippingMethod: { identifier: optionId } } = event;\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._store.getState();\n        const { currency: { decimalPlaces } } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(checkout: Checkout, decimalPlaces: number): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}`},\n        ];\n\n        checkout.taxes.forEach(tax =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }));\n        lineItems.push({ label: this._shippingLabel, amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`});\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId)\n        );\n    }\n\n    private async _onValidateMerchant(paymentData: PaymentMethod, event: ApplePayJS.ApplePayValidateMerchantEvent) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(validationEndpoint(paymentData.initializationData.paymentsUrl), {\n            credentials: false,\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'X-XSRF-TOKEN': null,\n            },\n            body,\n        });\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                })\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress)\n                );\n            }\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(\n                {\n                    useStoreCredit: false,\n                })\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(contact?: ApplePayJS.ApplePayPaymentContact): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: contact?.addressLines && contact?.addressLines[0] || '',\n            address2: contact?.addressLines && contact?.addressLines[1] || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalButtonStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(details: BraintreeDetails): Partial<LegacyAddress> {\n    const {\n        billingAddress,\n        email,\n        firstName,\n        lastName,\n        phone,\n        shippingAddress,\n    } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(details: BraintreeDetails): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Address } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { mapToBraintreeShippingAddressOverride, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`);\n        }\n\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const currency = state.cart.getCartOrThrow()?.currency.code;\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency };\n        const paypalCheckoutSuccessCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode)\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(braintreePaypalCheckout, braintreepaypal, containerId, methodId, testMode);\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean\n    ): void {\n        const { style, shippingAddress, shouldProcessPayment, onAuthorizeError, onPaymentError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, shippingAddress, onPaymentError),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(authorizeData, braintreePaypalCheckout, methodId, shouldProcessPayment, onAuthorizeError),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        const isMessageContainerAvailable = messagingContainerId && !!document.getElementById(messagingContainerId);\n        const isMessagesRenderingFeatureOn = storeConfig.checkoutSettings.features['PAYPAL-1149.braintree-new-card-below-totals-banner-placement'];\n\n        const { paypal } = this._window;\n\n        if (paypal && isMessagesRenderingFeatureOn && messagingContainerId && isMessageContainerAvailable) {\n            const paypalMessagesRender = paypal.Messages({ amount: cart.cartAmount, placement: 'cart' });\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        shippingAddress?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        try {\n            const checkout = state.checkout.getCheckoutOrThrow();\n            const config = state.config.getStoreConfigOrThrow();\n            const customer = state.customer.getCustomer();\n\n            const address = shippingAddress || customer?.addresses?.[0];\n            const shippingAddressOverride = address ? mapToBraintreeShippingAddressOverride(address) : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount: checkout.outstandingBalance,\n                currency: config.currency.code,\n                offerCredit: false,\n            });\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({ paypal: true });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalButtonStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Address } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { mapToBraintreeShippingAddressOverride, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalButtonStyleLabelOption, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`);\n        }\n\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const currency = state.cart.getCartOrThrow()?.currency.code;\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode)\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean\n    ): void {\n        const { style, shippingAddress, shouldProcessPayment, onAuthorizeError, onPaymentError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach(fundingSource => {\n                const buttonStyle = fundingSource === paypal.FUNDING.CREDIT\n                    ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                    : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () => this._setupPayment(braintreePaypalCheckout, shippingAddress, onPaymentError),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(authorizeData, braintreePaypalCheckout, methodId, shouldProcessPayment, onAuthorizeError),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        shippingAddress?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        try {\n            const checkout = state.checkout.getCheckoutOrThrow();\n            const config = state.config.getStoreConfigOrThrow();\n            const customer = state.customer.getCustomer();\n\n            const address = shippingAddress || customer?.addresses?.[0];\n            const shippingAddressOverride = address ? mapToBraintreeShippingAddressOverride(address) : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount: checkout.outstandingBalance,\n                currency: config.currency.code,\n                offerCredit: true,\n            });\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({ paypal: true });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeError, BraintreeSDKCreator, BraintreeTokenizePayload, BraintreeVenmoCheckout } from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            braintreeVenmoCheckout => this._handleInitializationVenmoSuccess(braintreeVenmoCheckout, containerId),\n            error => this._handleInitializationVenmoError(error, containerId)\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(braintreeVenmoCheckout: BraintreeVenmoCheckout, parentContainerId: string): void {\n        return this._renderVenmoButton(braintreeVenmoCheckout, parentContainerId);\n    }\n\n    private _handleInitializationVenmoError(error: BraintreeError | UnsupportedBrowserError, containerId: string): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(braintreeVenmoCheckout: BraintreeVenmoCheckout, containerId: string): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError('Unable to create wallet button without valid container ID.');\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', () =>  {\n            venmoButton.setAttribute('disabled', 'true');\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                    venmoButton.removeAttribute('disabled');\n\n                    if (error) {\n                        return this._onError(error);\n                    }\n\n                    await this._handlePostForm(payload);\n                });\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _handlePostForm(payload: BraintreeTokenizePayload): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string, buttonOptions: GooglePayButtonInitializeOptions): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick, buttonType, buttonColor);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(options: CheckoutButtonInitializeOptions): GooglePayButtonInitializeOptions {\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 && options.googlepayadyenv3) {\n            return options.googlepayadyenv3;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 && options.googlepaycybersourcev2) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL && options.googlepayorbital) {\n            return options.googlepayorbital;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE && options.googlepaystripeupe) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export const supportedLocales: {[language: string]: string[]} = {es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: ['en_us', 'en_gb', 'en_ca', 'en_es', 'en_fr', 'en_ie', 'en_sg', 'en_au', 'en_nz', 'en_my', 'en_hk', 'en_th', 'en_ae', 'en_sa', 'en_qa', 'en_kw', 'en_za'],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca']};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { formatLocale, getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalButtonStyleShapeOption, PaypalButtonStyleSizeOption, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: PaypalButtonStyleShapeOption.RECT,\n                        ...pick(paypalOptions.style, 'layout', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                        size: (paymentMethod.id === 'paypalexpress' && paypalOptions.style?.size === 'small') ? PaypalButtonStyleSizeOption.RESPONSIVE : paypalOptions.style?.size,\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, PaypalCommercePaymentProcessor } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _isCredit?: boolean;\n    private _isVenmo?: boolean;\n    private _isVenmoEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        this._isVenmoEnabled = initializationData.isVenmoEnabled;\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const buttonParams: ButtonsOptions = {\n            onApprove: data => this._tokenizePayment(data),\n            onClick: data => this._handleClickButtonProvider(data),\n        };\n\n        if (options.paypalCommerce && options.paypalCommerce.style) {\n            buttonParams.style = options.paypalCommerce.style;\n        }\n\n        const messagingContainer = options.paypalCommerce?.messagingContainer;\n        const isMessagesAvailable = Boolean(messagingContainer && document.getElementById(messagingContainer));\n\n        await this._paypalCommercePaymentProcessor.initialize(paymentMethod, cart.currency.code, false);\n\n        this._paypalCommercePaymentProcessor.renderButtons(cart.id, `#${options.containerId}`, buttonParams);\n\n        if (isMessagesAvailable) {\n            this._paypalCommercePaymentProcessor.renderMessages(cart.cartAmount, `#${messagingContainer}`);\n        }\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isCredit = undefined;\n        this._isVenmo = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider({ fundingSource }: ClickDataOptions): void {\n        this._isCredit = fundingSource === 'credit' || fundingSource === 'paylater';\n        this._isVenmo = fundingSource === 'venmo';\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n        let provider;\n\n        if (this._isVenmo && this._isVenmoEnabled) {\n            provider = 'paypalcommercevenmo';\n        } else if (this._isCredit) {\n            provider = 'paypalcommercecredit';\n        } else {\n            provider = 'paypalcommerce';\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider,\n            order_id: orderID,\n        });\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape, PaypalButtonStyleOptions } from '../../../payment/strategies/paypal-commerce';\n\nexport default function getValidButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n    const { label, color, layout, shape, height, tagline } = style;\n\n    const validStyles = {\n        color: getValidColor(color),\n        height: getValidHeight(height),\n        label: getValidLabel(label),\n        layout: getValidLayout(layout),\n        shape: getValidShape(shape),\n        tagline: getValidTagline(tagline, layout),\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidColor(color?: StyleButtonColor): StyleButtonColor | undefined {\n    return color && StyleButtonColor[color] ? color : undefined;\n}\n\nfunction getValidLabel(label?: StyleButtonLabel): StyleButtonLabel | undefined {\n    return label && StyleButtonLabel[label] ? label : undefined\n}\n\nfunction getValidLayout(layout?: StyleButtonLayout): StyleButtonLayout | undefined {\n    return layout && StyleButtonLayout[layout] ? layout : undefined\n}\n\nfunction getValidShape(shape?: StyleButtonShape): StyleButtonShape | undefined {\n    return shape && StyleButtonShape[shape] ? shape : undefined\n}\n\nfunction getValidTagline(tagline?: boolean, layout?: string): boolean | undefined {\n    if (tagline && typeof tagline === 'boolean' && layout === StyleButtonLayout[StyleButtonLayout.horizontal]) {\n        return tagline;\n    }\n\n    return undefined;\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ApproveDataOptions, ButtonsOptions, PaypalButtonStyleOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\n\nexport default class PaypalCommerceAlternativeMethodsButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const { apm, initializesOnCheckoutPage, style } = paypalcommercealternativemethods || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`);\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`);\n        }\n\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const currency = state.cart.getCartOrThrow().currency.code;\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        this._paypalCommerceSdk = await this._paypalScriptLoader.loadPaypalCommerce(paymentMethod, currency, initializesOnCheckoutPage);\n\n        this._renderButton(apm, methodId, containerId, initializesOnCheckoutPage, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        apm: string,\n        methodId: string,\n        containerId: string,\n        initializesOnCheckoutPage?: boolean,\n        style?: PaypalButtonStyleOptions\n    ): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalCommerceSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(`Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`);\n        }\n\n        const validButtonStyle = style ? this._getButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: apm,\n            style: validButtonStyle,\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveDataOptions) => this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercealternativemethodscheckout' : 'paypalcommercealternativemethod';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cart.id, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ApproveDataOptions, ButtonsOptions, PaypalButtonStyleOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\n\nexport default class PaypalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { style, initializesOnCheckoutPage } = paypalcommercevenmo || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`);\n        }\n\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const currency = state.cart.getCartOrThrow().currency.code;\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        this._paypalCommerceSdk = await this._paypalScriptLoader.loadPaypalCommerce(paymentMethod, currency, initializesOnCheckoutPage);\n\n        this._renderButton(containerId, methodId, initializesOnCheckoutPage, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(containerId: string, methodId: string, initializesOnCheckoutPage?: boolean, style?: PaypalButtonStyleOptions): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const fundingSource = paypalCommerceSdk.FUNDING.VENMO;\n\n        const validButtonStyle = style ? this._getVenmoButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource,\n            style: validButtonStyle,\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveDataOptions) => this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercevenmocheckout': 'paypalcommercevenmo';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cart.id, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getVenmoButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor() {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: false,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n        const results: Array<{ token: string; matches: number }> = [];\n\n        registeredTokens.forEach(registeredToken => {\n            const resolverId = this._decodeToken(registeredToken);\n            const result = { token: registeredToken, matches: 0 };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matched = results.sort((a, b) => b.matches - a.matches)\n            .filter(result => result.matches > 0)[0];\n\n        if (matched?.token) {\n            return matched.token;\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import CustomError from \"./custom-error\";\nimport setPrototypeOf from \"./set-prototype-of\";\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError\n    extends Error\n    implements CustomError\n{\n    name = \"StandardError\";\n    type = \"standard\";\n\n    constructor(message?: string) {\n        super(message || \"An unexpected error has occurred.\");\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from \"./standard-error\";\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = \"MissingDataError\";\n        this.type = \"missing_data\";\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return \"Unable to proceed because billing address data is unavailable.\";\n\n        case MissingDataErrorType.MissingCart:\n            return \"Unable to proceed because cart data is unavailable.\";\n\n        case MissingDataErrorType.MissingConsignments:\n            return \"Unable to proceed because consignments data is unavailable.\";\n\n        case MissingDataErrorType.MissingCheckout:\n            return \"Unable to proceed because checkout data is unavailable.\";\n\n        case MissingDataErrorType.MissingCustomer:\n            return \"Unable to proceed because customer data is unavailable.\";\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return \"Unable to proceed because configuration data is unavailable.\";\n\n        case MissingDataErrorType.MissingOrder:\n            return \"Unable to proceed because order data is unavailable.\";\n\n        case MissingDataErrorType.MissingOrderId:\n            return \"Unable to proceed because order ID is unavailable or not generated yet.\";\n\n        case MissingDataErrorType.MissingPayment:\n            return \"Unable to proceed because payment data is unavailable.\";\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return \"Unable to proceed because the token required to submit a payment is missing.\";\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return \"Unable to proceed because payment method data is unavailable or not properly configured.\";\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return \"Unable to proceed because shipping address data is unavailable.\";\n\n        default:\n            return \"Unable to proceed because the required data is unavailable.\";\n    }\n}\n","import StandardError from \"./standard-error\";\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || \"Invalid arguments have been provided.\");\n\n        this.name = \"InvalidArgumentError\";\n        this.type = \"invalid_argument\";\n    }\n}\n","import StandardError from \"./standard-error\";\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || \"Payment process was cancelled.\");\n\n        this.name = \"PaymentMethodCancelledError\";\n        this.type = \"payment_cancelled\";\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return \"ApplePaySession\" in window;\n}\n\nexport function assertApplePayWindow(\n    window: Window\n): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error(\"Apple pay is not supported\");\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { RequestSender } from \"@bigcommerce/request-sender\";\nimport { noop } from \"lodash\";\nimport { WithApplePayButtonInitializeOptions } from \"./apple-pay-button-initialize-options\";\nimport ApplePaySessionFactory, {\n    assertApplePayWindow,\n} from \"./apple-pay-session-factory\";\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = \"Subtotal\",\n    Shipping = \"Shipping\",\n}\n\nfunction isShippingOptions(\n    options: ShippingOption[] | undefined\n): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithApplePayButtonInitializeOptions\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(\n                MissingDataErrorType.MissingPaymentMethod\n            );\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._paymentIntegrationService.loadDefaultCheckout();\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener(\n            \"click\",\n            this._handleWalletButtonClick.bind(this)\n        );\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = \"apple-pay-checkout-button\"\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        if (!container) {\n            throw new InvalidArgumentError(\n                \"Unable to create wallet button without valid container ID.\"\n            );\n        }\n\n        document.body.classList.add(\"apple-pay-supported\");\n        const button = document.createElement(\"div\");\n        button.classList.add(buttonClassName);\n        button.setAttribute(\"role\", \"button\");\n        button.setAttribute(\"aria-label\", \"Apple Pay button\");\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(\n                MissingDataErrorType.MissingPaymentMethod\n            );\n        }\n        const request = this._getBaseRequest(\n            cart,\n            checkout,\n            config,\n            this._paymentMethod\n        );\n        const applePaySession = this._sessionFactory.create(request);\n        this._handleApplePayEvents(\n            applePaySession,\n            this._paymentMethod,\n            config\n        );\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: \"pending\",\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: \"final\",\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: [\"postalAddress\"],\n            requiredShippingContactFields: [\"email\", \"phone\"],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push(\"postalAddress\");\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                })\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } =\n                    await this._onValidateMerchant(paymentMethod, event);\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error(\"Merchant validation failed\");\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n                await this._requestSender.get(url);\n\n                return this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent\n    ) {\n        const shippingAddress = this._transformContactToAddress(\n            event.shippingContact\n        );\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(\n                shippingAddress\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error(\"Shipping address update failed\");\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId =\n            checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions =\n            checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(\n            ({ id }) => id === selectionShippingOptionId\n        );\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] =\n            selectedOption\n                ? [\n                      {\n                          label: selectedOption.description,\n                          amount: `${selectedOption.cost.toFixed(\n                              decimalPlaces\n                          )}`,\n                          detail: selectedOption.additionalDescription,\n                          identifier: selectedOption.id,\n                      },\n                  ]\n                : [];\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            })\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error(\"Shipping options not available.\");\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: \"pending\",\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                []\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find(\n            (option) => option.isRecommended\n        );\n\n        const optionId = recommendedOption\n            ? recommendedOption.id\n            : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error(\"Shipping options update failed\");\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: \"final\",\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error(\"Shipping option selection update failed.\");\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: \"final\",\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            })\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return await this._paymentIntegrationService.selectShippingOption(\n            optionId\n        );\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join(\"&\");\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    \"X-XSRF-TOKEN\": null,\n                },\n                body,\n            }\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress =\n            this._transformContactToAddress(billingContact);\n        const transformedShippingAddress =\n            this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || \"\";\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error(\"Payment cannot complete\");\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || \"\",\n            lastName: contact?.familyName || \"\",\n            city: contact?.locality || \"\",\n            company: \"\",\n            address1: (contact?.addressLines && contact?.addressLines[0]) || \"\",\n            address2: (contact?.addressLines && contact?.addressLines[1]) || \"\",\n            postalCode: contact?.postalCode || \"\",\n            countryCode: contact?.countryCode || \"\",\n            phone: contact?.phoneNumber || \"\",\n            stateOrProvince: contact?.administrativeArea || \"\",\n            stateOrProvinceCode: contact?.administrativeArea || \"\",\n            customFields: [],\n        };\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { createRequestSender } from \"@bigcommerce/request-sender\";\n\nimport ApplePayButtonStrategy from \"./apple-pay-button-strategy\";\nimport ApplePaySessionFactory from \"./apple-pay-session-factory\";\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<\n    ApplePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory()\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [\n    { id: \"applepay\" },\n]);\n","import ResolvableModule from \"./resolvable-module\";\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[]\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { createPaymentClient, PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, paymentClient, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { PaymentIntegrationService } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { createRequestSender } from \"@bigcommerce/request-sender\";\nimport { createScriptLoader } from \"@bigcommerce/script-loader\";\n\nimport {\n    BillingAddressActionCreator,\n    BillingAddressRequestSender,\n} from \"../billing\";\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from \"../checkout\";\nimport { ConfigActionCreator, ConfigRequestSender } from \"../config\";\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from \"../form\";\nimport { OrderActionCreator, OrderRequestSender } from \"../order\";\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from \"../payment\";\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n} from \"../shipping\";\nimport {\n    PaymentHumanVerificationHandler,\n    createSpamProtection,\n} from \"../spam-protection\";\nimport {\n    SubscriptionsActionCreator,\n    SubscriptionsRequestSender,\n} from \"../subscription\";\nimport createPaymentIntegrationSelectors from \"./create-payment-integration-selectors\";\nimport DefaultPaymentIntegrationService from \"./default-payment-integration-service\";\nimport PaymentIntegrationStoreProjectionFactory from \"./payment-integration-store-projection-factory\";\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender))\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(\n            new SubscriptionsRequestSender(requestSender)\n        )\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender)\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender)\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(\n            createSpamProtection(createScriptLoader())\n        )\n    );\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\n\nimport { ResolveIdRegistry } from \"../common/registry\";\nimport * as defaultCheckoutButtonStrategyFactories from \"../generated/checkout-button-strategies\";\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService)\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from \"./resolvable-module\";\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule\n): module is ResolvableModule<TModule, TIdentifier> {\n    return \"resolveIds\" in module;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { PaymentActionCreator, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentRequestSender, PaymentRequestTransformer } from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAdyenV3Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayCybersourceV2Initializer, GooglePayOrbitalInitializer, GooglePayStripeInitializer, GooglePayStripeUPEInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { createPaypalCommercePaymentProcessor, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from '../payment/strategies/paypal-commerce';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { ApplePayButtonStrategy } from './strategies/apple-pay';\nimport { BraintreePaypalButtonStrategy, BraintreePaypalCreditButtonStrategy, BraintreeVenmoButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceAlternativeMethodsButtonStrategy, PaypalCommerceButtonStrategy, PaypalCommerceVenmoButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender, checkoutActionCreator);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer, paymentHumanVerificationHandler);\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paypalCommercePaymentProcessor = createPaypalCommercePaymentProcessor(scriptLoader, requestSender, store, orderActionCreator, paymentActionCreator);\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    registry.register(CheckoutButtonMethodType.APPLEPAY, () =>\n        new ApplePayButtonStrategy(\n            store,\n            checkoutActionCreator,\n            requestSender,\n            paymentMethodActionCreator,\n            new ConsignmentActionCreator(\n                new ConsignmentRequestSender(requestSender),\n                new CheckoutRequestSender(requestSender)\n            ),\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender),\n                new SubscriptionsActionCreator(\n                    new SubscriptionsRequestSender(requestSender)\n                )\n            ),\n            new PaymentActionCreator(\n                new PaymentRequestSender(paymentClient),\n                new OrderActionCreator(\n                    new OrderRequestSender(requestSender),\n                    new CheckoutValidator(checkoutRequestSender)\n                ),\n                new PaymentRequestTransformer(),\n                new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()))\n            ),\n            remoteCheckoutActionCreator,\n            new OrderActionCreator(\n                new OrderRequestSender(requestSender),\n                new CheckoutValidator(checkoutRequestSender)\n            ),\n            new ApplePaySessionFactory()\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            braintreeSdkCreator,\n            formPoster,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalCreditButtonStrategy(\n            store,\n            checkoutActionCreator,\n            braintreeSdkCreator,\n            formPoster,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_VENMO, () =>\n        new BraintreeVenmoButtonStrategy(\n            store,\n            paymentMethodActionCreator,\n            braintreeSdkCreator,\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV3, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV3Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(braintreeSdkCreator)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCybersourceV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ORBITAL, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayOrbitalInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeUPEInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader),\n            locale\n        ));\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalCommercePaymentProcessor\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE_APMS, () =>\n        new PaypalCommerceAlternativeMethodsButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalScriptLoader,\n            paypalCommerceRequestSender\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE_VENMO, () =>\n        new PaypalCommerceVenmoButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalScriptLoader,\n            paypalCommerceRequestSender\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { OrderActionCreator } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from './index';\n\nexport default function createPaypalCommercePaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender,\n    store: CheckoutStore,\n    orderActionCreator: OrderActionCreator,\n    paymentActionCreator: PaymentActionCreator\n) {\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    return new PaypalCommercePaymentProcessor(\n        paypalScriptLoader,\n        paypalCommerceRequestSender,\n        store,\n        orderActionCreator,\n        paymentActionCreator\n    );\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","OrderActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","LoadOrderSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","FormFieldsActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","PaymentActionType","PaymentMethodActionType","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","provider","method","barclays","braintree","braintreepaypal","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","createPaymentClient","store","paymentClient","subscribe","setHost","paymentSettings","bigpayBaseUrl","cacheAction","fn","Observable","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","isApplePayWindow","window","assertApplePayWindow","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","_formFieldsRequestSender","loadFields","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","switchMap","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","paymentData","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","_paymentHumanVerificationHandler","initializeOffsitePayment","promise","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","Promise","race","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","handle","additionalAction","SubmitPaymentFailed","_client","resolve","reject","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","attributes","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","test","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","output","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","_mapShippingAddress","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","authToken","formattedInstrument","isFormattedVaultedInstrument","vaultAccessToken","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","paymentMethodMeta","_transformHostedInputValues","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","delete","_googleRecaptcha","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","execute","take","human_verification_token","toPromise","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","document","getElementById","parentNode","removeChild","createElement","setAttribute","appendChild","load","NotInitializedErrorType","_window","callback","MutationObserver","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","event","iframeContainer","parentElement","style","visibility","observe","attributeFilter","_scriptLoader","_loadPromise","_loadScript","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_store","_storeProjectionFactory","_checkoutActionCreator","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_storeProjection","subscriber","filters","dispatch","updateBillingAddress","updateShippingAddress","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","noop","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","splice","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","isPrivate","selectorDecorator","resolver","memoizedMethod","cachedValue","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","uniqueId","setUniqueElementId","all","initialize","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","_getStrategy","strategy","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","_amazonPayV2ScriptLoader","_amazonPayV2SDK","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","signout","renderAmazonPayButton","placement","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","extractAmazonCheckoutSessionId","publicKeyId","createCheckoutSessionConfig","features","shopPath","buttonBaseConfig","productType","PayOnly","PayAndShip","buttonColor","Gold","sandbox","createCheckoutSession","region","amazonPayV2Region","amazon","ApplePaySession","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","components","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_methodId","_configureWallet","onClick","buttonType","Short","Default","_googlePayClient","displayWallet","loadPaymentData","_getPaymentDataRequest","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","_getMethodId","hasShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","cardType","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","payment_type","tokenFormat","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","currencyCode","gatewayMerchantId","merchantName","merchantInfo","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","loadPaypalCommerce","initializesOnCheckoutPage","paypalSdkScriptConfig","_getPayPalSdkScriptConfigOrThrow","paypalLoadScript","clientId","intent","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isInlineCheckoutEnabled","isPayPalCreditAvailable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldShowInlineCheckout","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","isVenmo","createOrder","getOrderStatus","PaymentStrategyType","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","NON_INSTANT_PAYMENT_METHODS","_paypalScriptLoader","_paypalCommerceRequestSender","_validateStyleParams","updatedStyle","color","layout","shape","height","tagline","horizontal","_gatewayId","_isVenmoEnabled","renderButtons","optionalParams","Buttons","paramsForProvider","fundingKey","onRenderButton","buttonParams","_setupPayment","actions","_fundingSource","fundingSource","FUNDING","_paypalButtons","isEligible","_processNotEligible","renderFields","apmFieldsContainer","apmFieldsStyles","PaymentFields","fieldsParams","fields","_paypalFields","fieldContainerElement","innerHTML","getOrderId","_orderId","renderMessages","cartTotal","Messages","_paypalMessages","renderHostedFields","events","HostedFields","styles","paymentsSDK","_hostedFields","submitHostedFields","submit","getHostedFieldsValidationState","isValid","close","_patchNonInstantPaymentMethods","device_info","method_id","paypal_account","order_id","paymentRequestOptions","toUpperCase","PAYLATER","CREDIT","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","signOut","generateToken","trackAuthorizationEvent","forgetCheckout","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","_amazonPayV2PaymentProcessor","amazonpay","_walletButton","Cart","DefaultLabels","_remoteCheckoutActionCreator","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","_paymentMethod","_applePayButton","_createButton","addEventListener","_handleWalletButtonClick","classList","add","button","preventDefault","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","storeCountryCode","storeName","merchantCapabilities","supportedNetworks","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","location","hostname","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","fundingicons","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_formPoster","messagingContainerId","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","onPaymentError","PAYPAL","validButtonStyle","paypalButtonRender","env","onApprove","authorizeData","_tokenizePayment","_removeElement","isMessageContainerAvailable","isMessagesRenderingFeatureOn","checkoutSettings","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","tokenizePayment","postForm","device_data","billing_address","shipping_address","buttonContainerId","onErrorCallback","elementId","remove","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","width","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","parentContainerId","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_createSignInButton","buttonOptions","googlePayButton","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","hasPhysicalItems","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","removeEventListener","subdomain","src","_createMasterpassPayload","allowedCardTypes","origin","CheckoutButtonNotInitialized","_host","paypalOptions","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","_paypalCommercePaymentProcessor","_handleClickButtonProvider","paypalCommerce","messagingContainer","isMessagesAvailable","_isCredit","_isVenmo","orderID","getValidColor","getValidLabel","getValidLayout","getValidShape","getValidTagline","paypalcommercealternativemethods","_paypalCommerceSdk","_renderButton","paypalCommerceSdk","_getPayPalCommerceSdkOrThrow","buttonRenderOptions","_getButtonStyle","_createOrder","paypalcommercevenmo","VENMO","_getVenmoButtonStyle","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","query","results","registeredToken","resolverId","matches","entries","matched","_paymentIntegrationService","paymentIntegrationService","resolveIds","createCheckoutButtonInitializer","formPoster","createFormPoster","storeProjectionFactory","checkoutActionCreator","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","createScriptLoader","createPaymentIntegrationService","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","checkoutRequestSender","remoteCheckoutRequestSender","remoteCheckoutActionCreator","checkoutValidator","paymentRequestSender","paymentRequestTransformer","paymentHumanVerificationHandler","braintreeSdkCreator","paypalCommercePaymentProcessor","paypalScriptLoader","paypalCommerceRequestSender","createPaypalCommercePaymentProcessor","createCheckoutButtonRegistry"],"sourceRoot":""}